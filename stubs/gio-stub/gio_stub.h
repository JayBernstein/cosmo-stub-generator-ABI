#include "../stub.h"
#include "gio/gio.h"

void initialize_gio(void);
void close_gio(void);

GType (g_action_get_type)(void);
const gchar * (g_action_get_name)(GAction * action);
const GVariantType * (g_action_get_parameter_type)(GAction * action);
const GVariantType * (g_action_get_state_type)(GAction * action);
GVariant * (g_action_get_state_hint)(GAction * action);
gboolean (g_action_get_enabled)(GAction * action);
GVariant * (g_action_get_state)(GAction * action);
void (g_action_change_state)(GAction * action, GVariant * value);
void (g_action_activate)(GAction * action, GVariant * parameter);
gboolean (g_action_name_is_valid)(const gchar * action_name);
gboolean (g_action_parse_detailed_name)(const gchar * detailed_name, gchar * * action_name, GVariant * * target_value, GError * * error);
gchar * (g_action_print_detailed_name)(const gchar * action_name, GVariant * target_value);
GType (g_action_group_get_type)(void);
gboolean (g_action_group_has_action)(GActionGroup * action_group, const gchar * action_name);
gchar * * (g_action_group_list_actions)(GActionGroup * action_group);
const GVariantType * (g_action_group_get_action_parameter_type)(GActionGroup * action_group, const gchar * action_name);
const GVariantType * (g_action_group_get_action_state_type)(GActionGroup * action_group, const gchar * action_name);
GVariant * (g_action_group_get_action_state_hint)(GActionGroup * action_group, const gchar * action_name);
gboolean (g_action_group_get_action_enabled)(GActionGroup * action_group, const gchar * action_name);
GVariant * (g_action_group_get_action_state)(GActionGroup * action_group, const gchar * action_name);
void (g_action_group_change_action_state)(GActionGroup * action_group, const gchar * action_name, GVariant * value);
void (g_action_group_activate_action)(GActionGroup * action_group, const gchar * action_name, GVariant * parameter);
void (g_action_group_action_added)(GActionGroup * action_group, const gchar * action_name);
void (g_action_group_action_removed)(GActionGroup * action_group, const gchar * action_name);
void (g_action_group_action_enabled_changed)(GActionGroup * action_group, const gchar * action_name, gboolean enabled);
void (g_action_group_action_state_changed)(GActionGroup * action_group, const gchar * action_name, GVariant * state);
gboolean (g_action_group_query_action)(GActionGroup * action_group, const gchar * action_name, gboolean * enabled, const GVariantType * * parameter_type, const GVariantType * * state_type, GVariant * * state_hint, GVariant * * state);
guint (g_dbus_connection_export_action_group)(GDBusConnection * connection, const gchar * object_path, GActionGroup * action_group, GError * * error);
void (g_dbus_connection_unexport_action_group)(GDBusConnection * connection, guint export_id);
GType (g_action_map_get_type)(void);
GAction * (g_action_map_lookup_action)(GActionMap * action_map, const gchar * action_name);
void (g_action_map_add_action)(GActionMap * action_map, GAction * action);
void (g_action_map_remove_action)(GActionMap * action_map, const gchar * action_name);
void (g_action_map_add_action_entries)(GActionMap * action_map, const GActionEntry * entries, gint n_entries, gpointer user_data);
void (g_action_map_remove_action_entries)(GActionMap * action_map, const GActionEntry * entries, gint n_entries);
GType (g_app_info_get_type)(void);
GAppInfo * (g_app_info_create_from_commandline)(const char * commandline, const char * application_name, GAppInfoCreateFlags flags, GError * * error);
GAppInfo * (g_app_info_dup)(GAppInfo * appinfo);
gboolean (g_app_info_equal)(GAppInfo * appinfo1, GAppInfo * appinfo2);
const char * (g_app_info_get_id)(GAppInfo * appinfo);
const char * (g_app_info_get_name)(GAppInfo * appinfo);
const char * (g_app_info_get_display_name)(GAppInfo * appinfo);
const char * (g_app_info_get_description)(GAppInfo * appinfo);
const char * (g_app_info_get_executable)(GAppInfo * appinfo);
const char * (g_app_info_get_commandline)(GAppInfo * appinfo);
GIcon * (g_app_info_get_icon)(GAppInfo * appinfo);
gboolean (g_app_info_launch)(GAppInfo * appinfo, GList * files, GAppLaunchContext * context, GError * * error);
gboolean (g_app_info_supports_uris)(GAppInfo * appinfo);
gboolean (g_app_info_supports_files)(GAppInfo * appinfo);
gboolean (g_app_info_launch_uris)(GAppInfo * appinfo, GList * uris, GAppLaunchContext * context, GError * * error);
void (g_app_info_launch_uris_async)(GAppInfo * appinfo, GList * uris, GAppLaunchContext * context, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_app_info_launch_uris_finish)(GAppInfo * appinfo, GAsyncResult * result, GError * * error);
gboolean (g_app_info_should_show)(GAppInfo * appinfo);
gboolean (g_app_info_set_as_default_for_type)(GAppInfo * appinfo, const char * content_type, GError * * error);
gboolean (g_app_info_set_as_default_for_extension)(GAppInfo * appinfo, const char * extension, GError * * error);
gboolean (g_app_info_add_supports_type)(GAppInfo * appinfo, const char * content_type, GError * * error);
gboolean (g_app_info_can_remove_supports_type)(GAppInfo * appinfo);
gboolean (g_app_info_remove_supports_type)(GAppInfo * appinfo, const char * content_type, GError * * error);
const char * * (g_app_info_get_supported_types)(GAppInfo * appinfo);
gboolean (g_app_info_can_delete)(GAppInfo * appinfo);
gboolean (g_app_info_delete)(GAppInfo * appinfo);
gboolean (g_app_info_set_as_last_used_for_type)(GAppInfo * appinfo, const char * content_type, GError * * error);
GList * (g_app_info_get_all)(void);
GList * (g_app_info_get_all_for_type)(const char * content_type);
GList * (g_app_info_get_recommended_for_type)(const gchar * content_type);
GList * (g_app_info_get_fallback_for_type)(const gchar * content_type);
void (g_app_info_reset_type_associations)(const char * content_type);
GAppInfo * (g_app_info_get_default_for_type)(const char * content_type, gboolean must_support_uris);
void (g_app_info_get_default_for_type_async)(const char * content_type, gboolean must_support_uris, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GAppInfo * (g_app_info_get_default_for_type_finish)(GAsyncResult * result, GError * * error);
GAppInfo * (g_app_info_get_default_for_uri_scheme)(const char * uri_scheme);
void (g_app_info_get_default_for_uri_scheme_async)(const char * uri_scheme, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GAppInfo * (g_app_info_get_default_for_uri_scheme_finish)(GAsyncResult * result, GError * * error);
gboolean (g_app_info_launch_default_for_uri)(const char * uri, GAppLaunchContext * context, GError * * error);
void (g_app_info_launch_default_for_uri_async)(const char * uri, GAppLaunchContext * context, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_app_info_launch_default_for_uri_finish)(GAsyncResult * result, GError * * error);
GType (g_app_launch_context_get_type)(void);
GAppLaunchContext * (g_app_launch_context_new)(void);
void (g_app_launch_context_setenv)(GAppLaunchContext * context, const char * variable, const char * value);
void (g_app_launch_context_unsetenv)(GAppLaunchContext * context, const char * variable);
char * * (g_app_launch_context_get_environment)(GAppLaunchContext * context);
char * (g_app_launch_context_get_display)(GAppLaunchContext * context, GAppInfo * info, GList * files);
char * (g_app_launch_context_get_startup_notify_id)(GAppLaunchContext * context, GAppInfo * info, GList * files);
void (g_app_launch_context_launch_failed)(GAppLaunchContext * context, const char * startup_notify_id);
GType (g_app_info_monitor_get_type)(void);
GAppInfoMonitor * (g_app_info_monitor_get)(void);
GType (g_application_get_type)(void);
gboolean (g_application_id_is_valid)(const gchar * application_id);
GApplication * (g_application_new)(const gchar * application_id, GApplicationFlags flags);
const gchar * (g_application_get_application_id)(GApplication * application);
void (g_application_set_application_id)(GApplication * application, const gchar * application_id);
const gchar * (g_application_get_version)(GApplication * application);
void (g_application_set_version)(GApplication * application, const gchar * version);
GDBusConnection * (g_application_get_dbus_connection)(GApplication * application);
const gchar * (g_application_get_dbus_object_path)(GApplication * application);
guint (g_application_get_inactivity_timeout)(GApplication * application);
void (g_application_set_inactivity_timeout)(GApplication * application, guint inactivity_timeout);
GApplicationFlags (g_application_get_flags)(GApplication * application);
void (g_application_set_flags)(GApplication * application, GApplicationFlags flags);
const gchar * (g_application_get_resource_base_path)(GApplication * application);
void (g_application_set_resource_base_path)(GApplication * application, const gchar * resource_path);
void (g_application_set_action_group)(GApplication * application, GActionGroup * action_group);
void (g_application_add_main_option_entries)(GApplication * application, const GOptionEntry * entries);
void (g_application_add_main_option)(GApplication * application, const char * long_name, char short_name, GOptionFlags flags, GOptionArg arg, const char * description, const char * arg_description);
void (g_application_add_option_group)(GApplication * application, GOptionGroup * group);
void (g_application_set_option_context_parameter_string)(GApplication * application, const gchar * parameter_string);
void (g_application_set_option_context_summary)(GApplication * application, const gchar * summary);
void (g_application_set_option_context_description)(GApplication * application, const gchar * description);
gboolean (g_application_get_is_registered)(GApplication * application);
gboolean (g_application_get_is_remote)(GApplication * application);
gboolean (g_application_register)(GApplication * application, GCancellable * cancellable, GError * * error);
void (g_application_hold)(GApplication * application);
void (g_application_release)(GApplication * application);
void (g_application_activate)(GApplication * application);
void (g_application_open)(GApplication * application, GFile * * files, gint n_files, const gchar * hint);
int (g_application_run)(GApplication * application, int argc, char * * argv);
void (g_application_quit)(GApplication * application);
GApplication * (g_application_get_default)(void);
void (g_application_set_default)(GApplication * application);
void (g_application_mark_busy)(GApplication * application);
void (g_application_unmark_busy)(GApplication * application);
gboolean (g_application_get_is_busy)(GApplication * application);
void (g_application_send_notification)(GApplication * application, const gchar * id, GNotification * notification);
void (g_application_withdraw_notification)(GApplication * application, const gchar * id);
void (g_application_bind_busy_property)(GApplication * application, gpointer object, const gchar * property);
void (g_application_unbind_busy_property)(GApplication * application, gpointer object, const gchar * property);
GType (g_application_command_line_get_type)(void);
gchar * * (g_application_command_line_get_arguments)(GApplicationCommandLine * cmdline, int * argc);
GVariantDict * (g_application_command_line_get_options_dict)(GApplicationCommandLine * cmdline);
GInputStream * (g_application_command_line_get_stdin)(GApplicationCommandLine * cmdline);
const gchar * const * (g_application_command_line_get_environ)(GApplicationCommandLine * cmdline);
const gchar * (g_application_command_line_getenv)(GApplicationCommandLine * cmdline, const gchar * name);
const gchar * (g_application_command_line_get_cwd)(GApplicationCommandLine * cmdline);
gboolean (g_application_command_line_get_is_remote)(GApplicationCommandLine * cmdline);
void (g_application_command_line_print_literal)(GApplicationCommandLine * cmdline, const gchar * message);
void (g_application_command_line_printerr_literal)(GApplicationCommandLine * cmdline, const gchar * message);
int (g_application_command_line_get_exit_status)(GApplicationCommandLine * cmdline);
void (g_application_command_line_set_exit_status)(GApplicationCommandLine * cmdline, int exit_status);
GVariant * (g_application_command_line_get_platform_data)(GApplicationCommandLine * cmdline);
GFile * (g_application_command_line_create_file_for_arg)(GApplicationCommandLine * cmdline, const gchar * arg);
void (g_application_command_line_done)(GApplicationCommandLine * cmdline);
GType (g_initable_get_type)(void);
gboolean (g_initable_init)(GInitable * initable, GCancellable * cancellable, GError * * error);
gpointer (g_initable_new)(GType object_type, GCancellable * cancellable, GError * * error, const gchar * first_property_name, ...);
gpointer (g_initable_newv)(GType object_type, guint n_parameters, GParameter * parameters, GCancellable * cancellable, GError * * error);
GObject * (g_initable_new_valist)(GType object_type, const gchar * first_property_name, va_list var_args, GCancellable * cancellable, GError * * error);
GType (g_async_initable_get_type)(void);
void (g_async_initable_init_async)(GAsyncInitable * initable, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_async_initable_init_finish)(GAsyncInitable * initable, GAsyncResult * res, GError * * error);
void (g_async_initable_newv_async)(GType object_type, guint n_parameters, GParameter * parameters, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void (g_async_initable_new_valist_async)(GType object_type, const gchar * first_property_name, va_list var_args, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GObject * (g_async_initable_new_finish)(GAsyncInitable * initable, GAsyncResult * res, GError * * error);
GType (g_async_result_get_type)(void);
gpointer (g_async_result_get_user_data)(GAsyncResult * res);
GObject * (g_async_result_get_source_object)(GAsyncResult * res);
gboolean (g_async_result_legacy_propagate_error)(GAsyncResult * res, GError * * error);
gboolean (g_async_result_is_tagged)(GAsyncResult * res, gpointer source_tag);
GType (g_input_stream_get_type)(void);
gssize (g_input_stream_read)(GInputStream * stream, void * buffer, gsize count, GCancellable * cancellable, GError * * error);
gboolean (g_input_stream_read_all)(GInputStream * stream, void * buffer, gsize count, gsize * bytes_read, GCancellable * cancellable, GError * * error);
GBytes * (g_input_stream_read_bytes)(GInputStream * stream, gsize count, GCancellable * cancellable, GError * * error);
gssize (g_input_stream_skip)(GInputStream * stream, gsize count, GCancellable * cancellable, GError * * error);
gboolean (g_input_stream_close)(GInputStream * stream, GCancellable * cancellable, GError * * error);
void (g_input_stream_read_async)(GInputStream * stream, void * buffer, gsize count, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_input_stream_read_finish)(GInputStream * stream, GAsyncResult * result, GError * * error);
void (g_input_stream_read_all_async)(GInputStream * stream, void * buffer, gsize count, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_input_stream_read_all_finish)(GInputStream * stream, GAsyncResult * result, gsize * bytes_read, GError * * error);
void (g_input_stream_read_bytes_async)(GInputStream * stream, gsize count, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GBytes * (g_input_stream_read_bytes_finish)(GInputStream * stream, GAsyncResult * result, GError * * error);
void (g_input_stream_skip_async)(GInputStream * stream, gsize count, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_input_stream_skip_finish)(GInputStream * stream, GAsyncResult * result, GError * * error);
void (g_input_stream_close_async)(GInputStream * stream, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_input_stream_close_finish)(GInputStream * stream, GAsyncResult * result, GError * * error);
gboolean (g_input_stream_is_closed)(GInputStream * stream);
gboolean (g_input_stream_has_pending)(GInputStream * stream);
gboolean (g_input_stream_set_pending)(GInputStream * stream, GError * * error);
void (g_input_stream_clear_pending)(GInputStream * stream);
GType (g_filter_input_stream_get_type)(void);
GInputStream * (g_filter_input_stream_get_base_stream)(GFilterInputStream * stream);
gboolean (g_filter_input_stream_get_close_base_stream)(GFilterInputStream * stream);
void (g_filter_input_stream_set_close_base_stream)(GFilterInputStream * stream, gboolean close_base);
GType (g_buffered_input_stream_get_type)(void);
GInputStream * (g_buffered_input_stream_new)(GInputStream * base_stream);
GInputStream * (g_buffered_input_stream_new_sized)(GInputStream * base_stream, gsize size);
gsize (g_buffered_input_stream_get_buffer_size)(GBufferedInputStream * stream);
void (g_buffered_input_stream_set_buffer_size)(GBufferedInputStream * stream, gsize size);
gsize (g_buffered_input_stream_get_available)(GBufferedInputStream * stream);
gsize (g_buffered_input_stream_peek)(GBufferedInputStream * stream, void * buffer, gsize offset, gsize count);
const void * (g_buffered_input_stream_peek_buffer)(GBufferedInputStream * stream, gsize * count);
gssize (g_buffered_input_stream_fill)(GBufferedInputStream * stream, gssize count, GCancellable * cancellable, GError * * error);
void (g_buffered_input_stream_fill_async)(GBufferedInputStream * stream, gssize count, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_buffered_input_stream_fill_finish)(GBufferedInputStream * stream, GAsyncResult * result, GError * * error);
int (g_buffered_input_stream_read_byte)(GBufferedInputStream * stream, GCancellable * cancellable, GError * * error);
GType (g_output_stream_get_type)(void);
gssize (g_output_stream_write)(GOutputStream * stream, const void * buffer, gsize count, GCancellable * cancellable, GError * * error);
gboolean (g_output_stream_write_all)(GOutputStream * stream, const void * buffer, gsize count, gsize * bytes_written, GCancellable * cancellable, GError * * error);
gboolean (g_output_stream_writev)(GOutputStream * stream, const GOutputVector * vectors, gsize n_vectors, gsize * bytes_written, GCancellable * cancellable, GError * * error);
gboolean (g_output_stream_writev_all)(GOutputStream * stream, GOutputVector * vectors, gsize n_vectors, gsize * bytes_written, GCancellable * cancellable, GError * * error);
gboolean (g_output_stream_printf)(GOutputStream * stream, gsize * bytes_written, GCancellable * cancellable, GError * * error, const gchar * format, ...);
gboolean (g_output_stream_vprintf)(GOutputStream * stream, gsize * bytes_written, GCancellable * cancellable, GError * * error, const gchar * format, va_list args);
gssize (g_output_stream_write_bytes)(GOutputStream * stream, GBytes * bytes, GCancellable * cancellable, GError * * error);
gssize (g_output_stream_splice)(GOutputStream * stream, GInputStream * source, GOutputStreamSpliceFlags flags, GCancellable * cancellable, GError * * error);
gboolean (g_output_stream_flush)(GOutputStream * stream, GCancellable * cancellable, GError * * error);
gboolean (g_output_stream_close)(GOutputStream * stream, GCancellable * cancellable, GError * * error);
void (g_output_stream_write_async)(GOutputStream * stream, const void * buffer, gsize count, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_output_stream_write_finish)(GOutputStream * stream, GAsyncResult * result, GError * * error);
void (g_output_stream_write_all_async)(GOutputStream * stream, const void * buffer, gsize count, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_write_all_finish)(GOutputStream * stream, GAsyncResult * result, gsize * bytes_written, GError * * error);
void (g_output_stream_writev_async)(GOutputStream * stream, const GOutputVector * vectors, gsize n_vectors, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_writev_finish)(GOutputStream * stream, GAsyncResult * result, gsize * bytes_written, GError * * error);
void (g_output_stream_writev_all_async)(GOutputStream * stream, GOutputVector * vectors, gsize n_vectors, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_writev_all_finish)(GOutputStream * stream, GAsyncResult * result, gsize * bytes_written, GError * * error);
void (g_output_stream_write_bytes_async)(GOutputStream * stream, GBytes * bytes, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_output_stream_write_bytes_finish)(GOutputStream * stream, GAsyncResult * result, GError * * error);
void (g_output_stream_splice_async)(GOutputStream * stream, GInputStream * source, GOutputStreamSpliceFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_output_stream_splice_finish)(GOutputStream * stream, GAsyncResult * result, GError * * error);
void (g_output_stream_flush_async)(GOutputStream * stream, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_flush_finish)(GOutputStream * stream, GAsyncResult * result, GError * * error);
void (g_output_stream_close_async)(GOutputStream * stream, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_close_finish)(GOutputStream * stream, GAsyncResult * result, GError * * error);
gboolean (g_output_stream_is_closed)(GOutputStream * stream);
gboolean (g_output_stream_is_closing)(GOutputStream * stream);
gboolean (g_output_stream_has_pending)(GOutputStream * stream);
gboolean (g_output_stream_set_pending)(GOutputStream * stream, GError * * error);
void (g_output_stream_clear_pending)(GOutputStream * stream);
GType (g_filter_output_stream_get_type)(void);
GOutputStream * (g_filter_output_stream_get_base_stream)(GFilterOutputStream * stream);
gboolean (g_filter_output_stream_get_close_base_stream)(GFilterOutputStream * stream);
void (g_filter_output_stream_set_close_base_stream)(GFilterOutputStream * stream, gboolean close_base);
GType (g_buffered_output_stream_get_type)(void);
GOutputStream * (g_buffered_output_stream_new)(GOutputStream * base_stream);
GOutputStream * (g_buffered_output_stream_new_sized)(GOutputStream * base_stream, gsize size);
gsize (g_buffered_output_stream_get_buffer_size)(GBufferedOutputStream * stream);
void (g_buffered_output_stream_set_buffer_size)(GBufferedOutputStream * stream, gsize size);
gboolean (g_buffered_output_stream_get_auto_grow)(GBufferedOutputStream * stream);
void (g_buffered_output_stream_set_auto_grow)(GBufferedOutputStream * stream, gboolean auto_grow);
GType (g_bytes_icon_get_type)(void);
GIcon * (g_bytes_icon_new)(GBytes * bytes);
GBytes * (g_bytes_icon_get_bytes)(GBytesIcon * icon);
GType (g_cancellable_get_type)(void);
GCancellable * (g_cancellable_new)(void);
gboolean (g_cancellable_is_cancelled)(GCancellable * cancellable);
gboolean (g_cancellable_set_error_if_cancelled)(GCancellable * cancellable, GError * * error);
int (g_cancellable_get_fd)(GCancellable * cancellable);
gboolean (g_cancellable_make_pollfd)(GCancellable * cancellable, GPollFD * pollfd);
void (g_cancellable_release_fd)(GCancellable * cancellable);
GSource * (g_cancellable_source_new)(GCancellable * cancellable);
GCancellable * (g_cancellable_get_current)(void);
void (g_cancellable_push_current)(GCancellable * cancellable);
void (g_cancellable_pop_current)(GCancellable * cancellable);
void (g_cancellable_reset)(GCancellable * cancellable);
gulong (g_cancellable_connect)(GCancellable * cancellable, GCallback callback, gpointer data, GDestroyNotify data_destroy_func);
void (g_cancellable_disconnect)(GCancellable * cancellable, gulong handler_id);
void (g_cancellable_cancel)(GCancellable * cancellable);
GType (g_converter_get_type)(void);
GConverterResult (g_converter_convert)(GConverter * converter, const void * inbuf, gsize inbuf_size, void * outbuf, gsize outbuf_size, GConverterFlags flags, gsize * bytes_read, gsize * bytes_written, GError * * error);
void (g_converter_reset)(GConverter * converter);
GBytes * (g_converter_convert_bytes)(GConverter * converter, GBytes * bytes, GError * * error);
GType (g_charset_converter_get_type)(void);
GCharsetConverter * (g_charset_converter_new)(const gchar * to_charset, const gchar * from_charset, GError * * error);
void (g_charset_converter_set_use_fallback)(GCharsetConverter * converter, gboolean use_fallback);
gboolean (g_charset_converter_get_use_fallback)(GCharsetConverter * converter);
guint (g_charset_converter_get_num_fallbacks)(GCharsetConverter * converter);
gboolean (g_content_type_equals)(const gchar * type1, const gchar * type2);
gboolean (g_content_type_is_a)(const gchar * type, const gchar * supertype);
gboolean (g_content_type_is_mime_type)(const gchar * type, const gchar * mime_type);
gboolean (g_content_type_is_unknown)(const gchar * type);
gchar * (g_content_type_get_description)(const gchar * type);
gchar * (g_content_type_get_mime_type)(const gchar * type);
GIcon * (g_content_type_get_icon)(const gchar * type);
GIcon * (g_content_type_get_symbolic_icon)(const gchar * type);
gchar * (g_content_type_get_generic_icon_name)(const gchar * type);
gboolean (g_content_type_can_be_executable)(const gchar * type);
gchar * (g_content_type_from_mime_type)(const gchar * mime_type);
gchar * (g_content_type_guess)(const gchar * filename, const guchar * data, gsize data_size, gboolean * result_uncertain);
gchar * * (g_content_type_guess_for_tree)(GFile * root);
GList * (g_content_types_get_registered)(void);
const gchar * const * (g_content_type_get_mime_dirs)(void);
void (g_content_type_set_mime_dirs)(const gchar * const * dirs);
GType (g_converter_input_stream_get_type)(void);
GInputStream * (g_converter_input_stream_new)(GInputStream * base_stream, GConverter * converter);
GConverter * (g_converter_input_stream_get_converter)(GConverterInputStream * converter_stream);
GType (g_converter_output_stream_get_type)(void);
GOutputStream * (g_converter_output_stream_new)(GOutputStream * base_stream, GConverter * converter);
GConverter * (g_converter_output_stream_get_converter)(GConverterOutputStream * converter_stream);
GType (g_credentials_get_type)(void);
GCredentials * (g_credentials_new)(void);
gchar * (g_credentials_to_string)(GCredentials * credentials);
gpointer (g_credentials_get_native)(GCredentials * credentials, GCredentialsType native_type);
void (g_credentials_set_native)(GCredentials * credentials, GCredentialsType native_type, gpointer native);
gboolean (g_credentials_is_same_user)(GCredentials * credentials, GCredentials * other_credentials, GError * * error);
pid_t (g_credentials_get_unix_pid)(GCredentials * credentials, GError * * error);
uid_t (g_credentials_get_unix_user)(GCredentials * credentials, GError * * error);
gboolean (g_credentials_set_unix_user)(GCredentials * credentials, uid_t uid, GError * * error);
GType (g_datagram_based_get_type)(void);
gint (g_datagram_based_receive_messages)(GDatagramBased * datagram_based, GInputMessage * messages, guint num_messages, gint flags, gint64 timeout, GCancellable * cancellable, GError * * error);
gint (g_datagram_based_send_messages)(GDatagramBased * datagram_based, GOutputMessage * messages, guint num_messages, gint flags, gint64 timeout, GCancellable * cancellable, GError * * error);
GSource * (g_datagram_based_create_source)(GDatagramBased * datagram_based, GIOCondition condition, GCancellable * cancellable);
GIOCondition (g_datagram_based_condition_check)(GDatagramBased * datagram_based, GIOCondition condition);
gboolean (g_datagram_based_condition_wait)(GDatagramBased * datagram_based, GIOCondition condition, gint64 timeout, GCancellable * cancellable, GError * * error);
GType (g_data_input_stream_get_type)(void);
GDataInputStream * (g_data_input_stream_new)(GInputStream * base_stream);
void (g_data_input_stream_set_byte_order)(GDataInputStream * stream, GDataStreamByteOrder order);
GDataStreamByteOrder (g_data_input_stream_get_byte_order)(GDataInputStream * stream);
void (g_data_input_stream_set_newline_type)(GDataInputStream * stream, GDataStreamNewlineType type);
GDataStreamNewlineType (g_data_input_stream_get_newline_type)(GDataInputStream * stream);
guchar (g_data_input_stream_read_byte)(GDataInputStream * stream, GCancellable * cancellable, GError * * error);
gint16 (g_data_input_stream_read_int16)(GDataInputStream * stream, GCancellable * cancellable, GError * * error);
guint16 (g_data_input_stream_read_uint16)(GDataInputStream * stream, GCancellable * cancellable, GError * * error);
gint32 (g_data_input_stream_read_int32)(GDataInputStream * stream, GCancellable * cancellable, GError * * error);
guint32 (g_data_input_stream_read_uint32)(GDataInputStream * stream, GCancellable * cancellable, GError * * error);
gint64 (g_data_input_stream_read_int64)(GDataInputStream * stream, GCancellable * cancellable, GError * * error);
guint64 (g_data_input_stream_read_uint64)(GDataInputStream * stream, GCancellable * cancellable, GError * * error);
char * (g_data_input_stream_read_line)(GDataInputStream * stream, gsize * length, GCancellable * cancellable, GError * * error);
char * (g_data_input_stream_read_line_utf8)(GDataInputStream * stream, gsize * length, GCancellable * cancellable, GError * * error);
void (g_data_input_stream_read_line_async)(GDataInputStream * stream, gint io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
char * (g_data_input_stream_read_line_finish)(GDataInputStream * stream, GAsyncResult * result, gsize * length, GError * * error);
char * (g_data_input_stream_read_line_finish_utf8)(GDataInputStream * stream, GAsyncResult * result, gsize * length, GError * * error);
char * (g_data_input_stream_read_until)(GDataInputStream * stream, const gchar * stop_chars, gsize * length, GCancellable * cancellable, GError * * error);
void (g_data_input_stream_read_until_async)(GDataInputStream * stream, const gchar * stop_chars, gint io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
char * (g_data_input_stream_read_until_finish)(GDataInputStream * stream, GAsyncResult * result, gsize * length, GError * * error);
char * (g_data_input_stream_read_upto)(GDataInputStream * stream, const gchar * stop_chars, gssize stop_chars_len, gsize * length, GCancellable * cancellable, GError * * error);
void (g_data_input_stream_read_upto_async)(GDataInputStream * stream, const gchar * stop_chars, gssize stop_chars_len, gint io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
char * (g_data_input_stream_read_upto_finish)(GDataInputStream * stream, GAsyncResult * result, gsize * length, GError * * error);
GType (g_data_output_stream_get_type)(void);
GDataOutputStream * (g_data_output_stream_new)(GOutputStream * base_stream);
void (g_data_output_stream_set_byte_order)(GDataOutputStream * stream, GDataStreamByteOrder order);
GDataStreamByteOrder (g_data_output_stream_get_byte_order)(GDataOutputStream * stream);
gboolean (g_data_output_stream_put_byte)(GDataOutputStream * stream, guchar data, GCancellable * cancellable, GError * * error);
gboolean (g_data_output_stream_put_int16)(GDataOutputStream * stream, gint16 data, GCancellable * cancellable, GError * * error);
gboolean (g_data_output_stream_put_uint16)(GDataOutputStream * stream, guint16 data, GCancellable * cancellable, GError * * error);
gboolean (g_data_output_stream_put_int32)(GDataOutputStream * stream, gint32 data, GCancellable * cancellable, GError * * error);
gboolean (g_data_output_stream_put_uint32)(GDataOutputStream * stream, guint32 data, GCancellable * cancellable, GError * * error);
gboolean (g_data_output_stream_put_int64)(GDataOutputStream * stream, gint64 data, GCancellable * cancellable, GError * * error);
gboolean (g_data_output_stream_put_uint64)(GDataOutputStream * stream, guint64 data, GCancellable * cancellable, GError * * error);
gboolean (g_data_output_stream_put_string)(GDataOutputStream * stream, const char * str, GCancellable * cancellable, GError * * error);
GType (g_dbus_action_group_get_type)(void);
GDBusActionGroup * (g_dbus_action_group_get)(GDBusConnection * connection, const gchar * bus_name, const gchar * object_path);
gchar * (g_dbus_address_escape_value)(const gchar * string);
gboolean (g_dbus_is_address)(const gchar * string);
gboolean (g_dbus_is_supported_address)(const gchar * string, GError * * error);
void (g_dbus_address_get_stream)(const gchar * address, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GIOStream * (g_dbus_address_get_stream_finish)(GAsyncResult * res, gchar * * out_guid, GError * * error);
GIOStream * (g_dbus_address_get_stream_sync)(const gchar * address, gchar * * out_guid, GCancellable * cancellable, GError * * error);
gchar * (g_dbus_address_get_for_bus_sync)(GBusType bus_type, GCancellable * cancellable, GError * * error);
GType (g_dbus_auth_observer_get_type)(void);
GDBusAuthObserver * (g_dbus_auth_observer_new)(void);
gboolean (g_dbus_auth_observer_authorize_authenticated_peer)(GDBusAuthObserver * observer, GIOStream * stream, GCredentials * credentials);
gboolean (g_dbus_auth_observer_allow_mechanism)(GDBusAuthObserver * observer, const gchar * mechanism);
GType (g_dbus_connection_get_type)(void);
void (g_bus_get)(GBusType bus_type, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusConnection * (g_bus_get_finish)(GAsyncResult * res, GError * * error);
GDBusConnection * (g_bus_get_sync)(GBusType bus_type, GCancellable * cancellable, GError * * error);
void (g_dbus_connection_new)(GIOStream * stream, const gchar * guid, GDBusConnectionFlags flags, GDBusAuthObserver * observer, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusConnection * (g_dbus_connection_new_finish)(GAsyncResult * res, GError * * error);
GDBusConnection * (g_dbus_connection_new_sync)(GIOStream * stream, const gchar * guid, GDBusConnectionFlags flags, GDBusAuthObserver * observer, GCancellable * cancellable, GError * * error);
void (g_dbus_connection_new_for_address)(const gchar * address, GDBusConnectionFlags flags, GDBusAuthObserver * observer, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusConnection * (g_dbus_connection_new_for_address_finish)(GAsyncResult * res, GError * * error);
GDBusConnection * (g_dbus_connection_new_for_address_sync)(const gchar * address, GDBusConnectionFlags flags, GDBusAuthObserver * observer, GCancellable * cancellable, GError * * error);
void (g_dbus_connection_start_message_processing)(GDBusConnection * connection);
gboolean (g_dbus_connection_is_closed)(GDBusConnection * connection);
GIOStream * (g_dbus_connection_get_stream)(GDBusConnection * connection);
const gchar * (g_dbus_connection_get_guid)(GDBusConnection * connection);
const gchar * (g_dbus_connection_get_unique_name)(GDBusConnection * connection);
GCredentials * (g_dbus_connection_get_peer_credentials)(GDBusConnection * connection);
guint32 (g_dbus_connection_get_last_serial)(GDBusConnection * connection);
gboolean (g_dbus_connection_get_exit_on_close)(GDBusConnection * connection);
void (g_dbus_connection_set_exit_on_close)(GDBusConnection * connection, gboolean exit_on_close);
GDBusCapabilityFlags (g_dbus_connection_get_capabilities)(GDBusConnection * connection);
GDBusConnectionFlags (g_dbus_connection_get_flags)(GDBusConnection * connection);
void (g_dbus_connection_close)(GDBusConnection * connection, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dbus_connection_close_finish)(GDBusConnection * connection, GAsyncResult * res, GError * * error);
gboolean (g_dbus_connection_close_sync)(GDBusConnection * connection, GCancellable * cancellable, GError * * error);
void (g_dbus_connection_flush)(GDBusConnection * connection, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dbus_connection_flush_finish)(GDBusConnection * connection, GAsyncResult * res, GError * * error);
gboolean (g_dbus_connection_flush_sync)(GDBusConnection * connection, GCancellable * cancellable, GError * * error);
gboolean (g_dbus_connection_send_message)(GDBusConnection * connection, GDBusMessage * message, GDBusSendMessageFlags flags, volatile guint32 * out_serial, GError * * error);
void (g_dbus_connection_send_message_with_reply)(GDBusConnection * connection, GDBusMessage * message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 * out_serial, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusMessage * (g_dbus_connection_send_message_with_reply_finish)(GDBusConnection * connection, GAsyncResult * res, GError * * error);
GDBusMessage * (g_dbus_connection_send_message_with_reply_sync)(GDBusConnection * connection, GDBusMessage * message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 * out_serial, GCancellable * cancellable, GError * * error);
gboolean (g_dbus_connection_emit_signal)(GDBusConnection * connection, const gchar * destination_bus_name, const gchar * object_path, const gchar * interface_name, const gchar * signal_name, GVariant * parameters, GError * * error);
void (g_dbus_connection_call)(GDBusConnection * connection, const gchar * bus_name, const gchar * object_path, const gchar * interface_name, const gchar * method_name, GVariant * parameters, const GVariantType * reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GVariant * (g_dbus_connection_call_finish)(GDBusConnection * connection, GAsyncResult * res, GError * * error);
GVariant * (g_dbus_connection_call_sync)(GDBusConnection * connection, const gchar * bus_name, const gchar * object_path, const gchar * interface_name, const gchar * method_name, GVariant * parameters, const GVariantType * reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable * cancellable, GError * * error);
void (g_dbus_connection_call_with_unix_fd_list)(GDBusConnection * connection, const gchar * bus_name, const gchar * object_path, const gchar * interface_name, const gchar * method_name, GVariant * parameters, const GVariantType * reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList * fd_list, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GVariant * (g_dbus_connection_call_with_unix_fd_list_finish)(GDBusConnection * connection, GUnixFDList * * out_fd_list, GAsyncResult * res, GError * * error);
GVariant * (g_dbus_connection_call_with_unix_fd_list_sync)(GDBusConnection * connection, const gchar * bus_name, const gchar * object_path, const gchar * interface_name, const gchar * method_name, GVariant * parameters, const GVariantType * reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList * fd_list, GUnixFDList * * out_fd_list, GCancellable * cancellable, GError * * error);
guint (g_dbus_connection_register_object)(GDBusConnection * connection, const gchar * object_path, GDBusInterfaceInfo * interface_info, const GDBusInterfaceVTable * vtable, gpointer user_data, GDestroyNotify user_data_free_func, GError * * error);
guint (g_dbus_connection_register_object_with_closures)(GDBusConnection * connection, const gchar * object_path, GDBusInterfaceInfo * interface_info, GClosure * method_call_closure, GClosure * get_property_closure, GClosure * set_property_closure, GError * * error);
gboolean (g_dbus_connection_unregister_object)(GDBusConnection * connection, guint registration_id);
guint (g_dbus_connection_register_subtree)(GDBusConnection * connection, const gchar * object_path, const GDBusSubtreeVTable * vtable, GDBusSubtreeFlags flags, gpointer user_data, GDestroyNotify user_data_free_func, GError * * error);
gboolean (g_dbus_connection_unregister_subtree)(GDBusConnection * connection, guint registration_id);
guint (g_dbus_connection_signal_subscribe)(GDBusConnection * connection, const gchar * sender, const gchar * interface_name, const gchar * member, const gchar * object_path, const gchar * arg0, GDBusSignalFlags flags, GDBusSignalCallback callback, gpointer user_data, GDestroyNotify user_data_free_func);
void (g_dbus_connection_signal_unsubscribe)(GDBusConnection * connection, guint subscription_id);
guint (g_dbus_connection_add_filter)(GDBusConnection * connection, GDBusMessageFilterFunction filter_function, gpointer user_data, GDestroyNotify user_data_free_func);
void (g_dbus_connection_remove_filter)(GDBusConnection * connection, guint filter_id);
GQuark (g_dbus_error_quark)(void);
gboolean (g_dbus_error_is_remote_error)(const GError * error);
gchar * (g_dbus_error_get_remote_error)(const GError * error);
gboolean (g_dbus_error_strip_remote_error)(GError * error);
gboolean (g_dbus_error_register_error)(GQuark error_domain, gint error_code, const gchar * dbus_error_name);
gboolean (g_dbus_error_unregister_error)(GQuark error_domain, gint error_code, const gchar * dbus_error_name);
void (g_dbus_error_register_error_domain)(const gchar * error_domain_quark_name, volatile gsize * quark_volatile, const GDBusErrorEntry * entries, guint num_entries);
GError * (g_dbus_error_new_for_dbus_error)(const gchar * dbus_error_name, const gchar * dbus_error_message);
void (g_dbus_error_set_dbus_error)(GError * * error, const gchar * dbus_error_name, const gchar * dbus_error_message, const gchar * format, ...);
void (g_dbus_error_set_dbus_error_valist)(GError * * error, const gchar * dbus_error_name, const gchar * dbus_error_message, const gchar * format, va_list var_args);
gchar * (g_dbus_error_encode_gerror)(const GError * error);
GType (g_dbus_interface_get_type)(void);
GDBusInterfaceInfo * (g_dbus_interface_get_info)(GDBusInterface * interface_);
GDBusObject * (g_dbus_interface_get_object)(GDBusInterface * interface_);
void (g_dbus_interface_set_object)(GDBusInterface * interface_, GDBusObject * object);
GDBusObject * (g_dbus_interface_dup_object)(GDBusInterface * interface_);
GType (g_dbus_interface_skeleton_get_type)(void);
GDBusInterfaceSkeletonFlags (g_dbus_interface_skeleton_get_flags)(GDBusInterfaceSkeleton * interface_);
void (g_dbus_interface_skeleton_set_flags)(GDBusInterfaceSkeleton * interface_, GDBusInterfaceSkeletonFlags flags);
GDBusInterfaceInfo * (g_dbus_interface_skeleton_get_info)(GDBusInterfaceSkeleton * interface_);
GDBusInterfaceVTable * (g_dbus_interface_skeleton_get_vtable)(GDBusInterfaceSkeleton * interface_);
GVariant * (g_dbus_interface_skeleton_get_properties)(GDBusInterfaceSkeleton * interface_);
void (g_dbus_interface_skeleton_flush)(GDBusInterfaceSkeleton * interface_);
gboolean (g_dbus_interface_skeleton_export)(GDBusInterfaceSkeleton * interface_, GDBusConnection * connection, const gchar * object_path, GError * * error);
void (g_dbus_interface_skeleton_unexport)(GDBusInterfaceSkeleton * interface_);
void (g_dbus_interface_skeleton_unexport_from_connection)(GDBusInterfaceSkeleton * interface_, GDBusConnection * connection);
GDBusConnection * (g_dbus_interface_skeleton_get_connection)(GDBusInterfaceSkeleton * interface_);
GList * (g_dbus_interface_skeleton_get_connections)(GDBusInterfaceSkeleton * interface_);
gboolean (g_dbus_interface_skeleton_has_connection)(GDBusInterfaceSkeleton * interface_, GDBusConnection * connection);
const gchar * (g_dbus_interface_skeleton_get_object_path)(GDBusInterfaceSkeleton * interface_);
const gchar * (g_dbus_annotation_info_lookup)(GDBusAnnotationInfo * * annotations, const gchar * name);
GDBusMethodInfo * (g_dbus_interface_info_lookup_method)(GDBusInterfaceInfo * info, const gchar * name);
GDBusSignalInfo * (g_dbus_interface_info_lookup_signal)(GDBusInterfaceInfo * info, const gchar * name);
GDBusPropertyInfo * (g_dbus_interface_info_lookup_property)(GDBusInterfaceInfo * info, const gchar * name);
void (g_dbus_interface_info_cache_build)(GDBusInterfaceInfo * info);
void (g_dbus_interface_info_cache_release)(GDBusInterfaceInfo * info);
void (g_dbus_interface_info_generate_xml)(GDBusInterfaceInfo * info, guint indent, GString * string_builder);
GDBusNodeInfo * (g_dbus_node_info_new_for_xml)(const gchar * xml_data, GError * * error);
GDBusInterfaceInfo * (g_dbus_node_info_lookup_interface)(GDBusNodeInfo * info, const gchar * name);
void (g_dbus_node_info_generate_xml)(GDBusNodeInfo * info, guint indent, GString * string_builder);
GDBusNodeInfo * (g_dbus_node_info_ref)(GDBusNodeInfo * info);
GDBusInterfaceInfo * (g_dbus_interface_info_ref)(GDBusInterfaceInfo * info);
GDBusMethodInfo * (g_dbus_method_info_ref)(GDBusMethodInfo * info);
GDBusSignalInfo * (g_dbus_signal_info_ref)(GDBusSignalInfo * info);
GDBusPropertyInfo * (g_dbus_property_info_ref)(GDBusPropertyInfo * info);
GDBusArgInfo * (g_dbus_arg_info_ref)(GDBusArgInfo * info);
GDBusAnnotationInfo * (g_dbus_annotation_info_ref)(GDBusAnnotationInfo * info);
void (g_dbus_node_info_unref)(GDBusNodeInfo * info);
void (g_dbus_interface_info_unref)(GDBusInterfaceInfo * info);
void (g_dbus_method_info_unref)(GDBusMethodInfo * info);
void (g_dbus_signal_info_unref)(GDBusSignalInfo * info);
void (g_dbus_property_info_unref)(GDBusPropertyInfo * info);
void (g_dbus_arg_info_unref)(GDBusArgInfo * info);
void (g_dbus_annotation_info_unref)(GDBusAnnotationInfo * info);
GType (g_dbus_node_info_get_type)(void);
GType (g_dbus_interface_info_get_type)(void);
GType (g_dbus_method_info_get_type)(void);
GType (g_dbus_signal_info_get_type)(void);
GType (g_dbus_property_info_get_type)(void);
GType (g_dbus_arg_info_get_type)(void);
GType (g_dbus_annotation_info_get_type)(void);
GType (g_dbus_menu_model_get_type)(void);
GDBusMenuModel * (g_dbus_menu_model_get)(GDBusConnection * connection, const gchar * bus_name, const gchar * object_path);
GType (g_dbus_message_get_type)(void);
GDBusMessage * (g_dbus_message_new)(void);
GDBusMessage * (g_dbus_message_new_signal)(const gchar * path, const gchar * interface_, const gchar * signal);
GDBusMessage * (g_dbus_message_new_method_call)(const gchar * name, const gchar * path, const gchar * interface_, const gchar * method);
GDBusMessage * (g_dbus_message_new_method_reply)(GDBusMessage * method_call_message);
GDBusMessage * (g_dbus_message_new_method_error)(GDBusMessage * method_call_message, const gchar * error_name, const gchar * error_message_format, ...);
GDBusMessage * (g_dbus_message_new_method_error_valist)(GDBusMessage * method_call_message, const gchar * error_name, const gchar * error_message_format, va_list var_args);
GDBusMessage * (g_dbus_message_new_method_error_literal)(GDBusMessage * method_call_message, const gchar * error_name, const gchar * error_message);
gchar * (g_dbus_message_print)(GDBusMessage * message, guint indent);
gboolean (g_dbus_message_get_locked)(GDBusMessage * message);
void (g_dbus_message_lock)(GDBusMessage * message);
GDBusMessage * (g_dbus_message_copy)(GDBusMessage * message, GError * * error);
GDBusMessageByteOrder (g_dbus_message_get_byte_order)(GDBusMessage * message);
void (g_dbus_message_set_byte_order)(GDBusMessage * message, GDBusMessageByteOrder byte_order);
GDBusMessageType (g_dbus_message_get_message_type)(GDBusMessage * message);
void (g_dbus_message_set_message_type)(GDBusMessage * message, GDBusMessageType type);
GDBusMessageFlags (g_dbus_message_get_flags)(GDBusMessage * message);
void (g_dbus_message_set_flags)(GDBusMessage * message, GDBusMessageFlags flags);
guint32 (g_dbus_message_get_serial)(GDBusMessage * message);
void (g_dbus_message_set_serial)(GDBusMessage * message, guint32 serial);
GVariant * (g_dbus_message_get_header)(GDBusMessage * message, GDBusMessageHeaderField header_field);
void (g_dbus_message_set_header)(GDBusMessage * message, GDBusMessageHeaderField header_field, GVariant * value);
guchar * (g_dbus_message_get_header_fields)(GDBusMessage * message);
GVariant * (g_dbus_message_get_body)(GDBusMessage * message);
void (g_dbus_message_set_body)(GDBusMessage * message, GVariant * body);
GUnixFDList * (g_dbus_message_get_unix_fd_list)(GDBusMessage * message);
void (g_dbus_message_set_unix_fd_list)(GDBusMessage * message, GUnixFDList * fd_list);
guint32 (g_dbus_message_get_reply_serial)(GDBusMessage * message);
void (g_dbus_message_set_reply_serial)(GDBusMessage * message, guint32 value);
const gchar * (g_dbus_message_get_interface)(GDBusMessage * message);
void (g_dbus_message_set_interface)(GDBusMessage * message, const gchar * value);
const gchar * (g_dbus_message_get_member)(GDBusMessage * message);
void (g_dbus_message_set_member)(GDBusMessage * message, const gchar * value);
const gchar * (g_dbus_message_get_path)(GDBusMessage * message);
void (g_dbus_message_set_path)(GDBusMessage * message, const gchar * value);
const gchar * (g_dbus_message_get_sender)(GDBusMessage * message);
void (g_dbus_message_set_sender)(GDBusMessage * message, const gchar * value);
const gchar * (g_dbus_message_get_destination)(GDBusMessage * message);
void (g_dbus_message_set_destination)(GDBusMessage * message, const gchar * value);
const gchar * (g_dbus_message_get_error_name)(GDBusMessage * message);
void (g_dbus_message_set_error_name)(GDBusMessage * message, const gchar * value);
const gchar * (g_dbus_message_get_signature)(GDBusMessage * message);
void (g_dbus_message_set_signature)(GDBusMessage * message, const gchar * value);
guint32 (g_dbus_message_get_num_unix_fds)(GDBusMessage * message);
void (g_dbus_message_set_num_unix_fds)(GDBusMessage * message, guint32 value);
const gchar * (g_dbus_message_get_arg0)(GDBusMessage * message);
const gchar * (g_dbus_message_get_arg0_path)(GDBusMessage * message);
GDBusMessage * (g_dbus_message_new_from_blob)(guchar * blob, gsize blob_len, GDBusCapabilityFlags capabilities, GError * * error);
gssize (g_dbus_message_bytes_needed)(guchar * blob, gsize blob_len, GError * * error);
guchar * (g_dbus_message_to_blob)(GDBusMessage * message, gsize * out_size, GDBusCapabilityFlags capabilities, GError * * error);
gboolean (g_dbus_message_to_gerror)(GDBusMessage * message, GError * * error);
GType (g_dbus_method_invocation_get_type)(void);
const gchar * (g_dbus_method_invocation_get_sender)(GDBusMethodInvocation * invocation);
const gchar * (g_dbus_method_invocation_get_object_path)(GDBusMethodInvocation * invocation);
const gchar * (g_dbus_method_invocation_get_interface_name)(GDBusMethodInvocation * invocation);
const gchar * (g_dbus_method_invocation_get_method_name)(GDBusMethodInvocation * invocation);
const GDBusMethodInfo * (g_dbus_method_invocation_get_method_info)(GDBusMethodInvocation * invocation);
const GDBusPropertyInfo * (g_dbus_method_invocation_get_property_info)(GDBusMethodInvocation * invocation);
GDBusConnection * (g_dbus_method_invocation_get_connection)(GDBusMethodInvocation * invocation);
GDBusMessage * (g_dbus_method_invocation_get_message)(GDBusMethodInvocation * invocation);
GVariant * (g_dbus_method_invocation_get_parameters)(GDBusMethodInvocation * invocation);
gpointer (g_dbus_method_invocation_get_user_data)(GDBusMethodInvocation * invocation);
void (g_dbus_method_invocation_return_value)(GDBusMethodInvocation * invocation, GVariant * parameters);
void (g_dbus_method_invocation_return_value_with_unix_fd_list)(GDBusMethodInvocation * invocation, GVariant * parameters, GUnixFDList * fd_list);
void (g_dbus_method_invocation_return_error)(GDBusMethodInvocation * invocation, GQuark domain, gint code, const gchar * format, ...);
void (g_dbus_method_invocation_return_error_valist)(GDBusMethodInvocation * invocation, GQuark domain, gint code, const gchar * format, va_list var_args);
void (g_dbus_method_invocation_return_error_literal)(GDBusMethodInvocation * invocation, GQuark domain, gint code, const gchar * message);
void (g_dbus_method_invocation_return_gerror)(GDBusMethodInvocation * invocation, const GError * error);
void (g_dbus_method_invocation_take_error)(GDBusMethodInvocation * invocation, GError * error);
void (g_dbus_method_invocation_return_dbus_error)(GDBusMethodInvocation * invocation, const gchar * error_name, const gchar * error_message);
guint (g_bus_own_name)(GBusType bus_type, const gchar * name, GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func);
guint (g_bus_own_name_on_connection)(GDBusConnection * connection, const gchar * name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func);
guint (g_bus_own_name_with_closures)(GBusType bus_type, const gchar * name, GBusNameOwnerFlags flags, GClosure * bus_acquired_closure, GClosure * name_acquired_closure, GClosure * name_lost_closure);
guint (g_bus_own_name_on_connection_with_closures)(GDBusConnection * connection, const gchar * name, GBusNameOwnerFlags flags, GClosure * name_acquired_closure, GClosure * name_lost_closure);
void (g_bus_unown_name)(guint owner_id);
guint (g_bus_watch_name)(GBusType bus_type, const gchar * name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func);
guint (g_bus_watch_name_on_connection)(GDBusConnection * connection, const gchar * name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func);
guint (g_bus_watch_name_with_closures)(GBusType bus_type, const gchar * name, GBusNameWatcherFlags flags, GClosure * name_appeared_closure, GClosure * name_vanished_closure);
guint (g_bus_watch_name_on_connection_with_closures)(GDBusConnection * connection, const gchar * name, GBusNameWatcherFlags flags, GClosure * name_appeared_closure, GClosure * name_vanished_closure);
void (g_bus_unwatch_name)(guint watcher_id);
GType (g_dbus_object_get_type)(void);
const gchar * (g_dbus_object_get_object_path)(GDBusObject * object);
GList * (g_dbus_object_get_interfaces)(GDBusObject * object);
GDBusInterface * (g_dbus_object_get_interface)(GDBusObject * object, const gchar * interface_name);
GType (g_dbus_object_manager_get_type)(void);
const gchar * (g_dbus_object_manager_get_object_path)(GDBusObjectManager * manager);
GList * (g_dbus_object_manager_get_objects)(GDBusObjectManager * manager);
GDBusObject * (g_dbus_object_manager_get_object)(GDBusObjectManager * manager, const gchar * object_path);
GDBusInterface * (g_dbus_object_manager_get_interface)(GDBusObjectManager * manager, const gchar * object_path, const gchar * interface_name);
GType (g_dbus_object_manager_client_get_type)(void);
void (g_dbus_object_manager_client_new)(GDBusConnection * connection, GDBusObjectManagerClientFlags flags, const gchar * name, const gchar * object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusObjectManager * (g_dbus_object_manager_client_new_finish)(GAsyncResult * res, GError * * error);
GDBusObjectManager * (g_dbus_object_manager_client_new_sync)(GDBusConnection * connection, GDBusObjectManagerClientFlags flags, const gchar * name, const gchar * object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable * cancellable, GError * * error);
void (g_dbus_object_manager_client_new_for_bus)(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar * name, const gchar * object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusObjectManager * (g_dbus_object_manager_client_new_for_bus_finish)(GAsyncResult * res, GError * * error);
GDBusObjectManager * (g_dbus_object_manager_client_new_for_bus_sync)(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar * name, const gchar * object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable * cancellable, GError * * error);
GDBusConnection * (g_dbus_object_manager_client_get_connection)(GDBusObjectManagerClient * manager);
GDBusObjectManagerClientFlags (g_dbus_object_manager_client_get_flags)(GDBusObjectManagerClient * manager);
const gchar * (g_dbus_object_manager_client_get_name)(GDBusObjectManagerClient * manager);
gchar * (g_dbus_object_manager_client_get_name_owner)(GDBusObjectManagerClient * manager);
GType (g_dbus_object_manager_server_get_type)(void);
GDBusObjectManagerServer * (g_dbus_object_manager_server_new)(const gchar * object_path);
GDBusConnection * (g_dbus_object_manager_server_get_connection)(GDBusObjectManagerServer * manager);
void (g_dbus_object_manager_server_set_connection)(GDBusObjectManagerServer * manager, GDBusConnection * connection);
void (g_dbus_object_manager_server_export)(GDBusObjectManagerServer * manager, GDBusObjectSkeleton * object);
void (g_dbus_object_manager_server_export_uniquely)(GDBusObjectManagerServer * manager, GDBusObjectSkeleton * object);
gboolean (g_dbus_object_manager_server_is_exported)(GDBusObjectManagerServer * manager, GDBusObjectSkeleton * object);
gboolean (g_dbus_object_manager_server_unexport)(GDBusObjectManagerServer * manager, const gchar * object_path);
GType (g_dbus_object_proxy_get_type)(void);
GDBusObjectProxy * (g_dbus_object_proxy_new)(GDBusConnection * connection, const gchar * object_path);
GDBusConnection * (g_dbus_object_proxy_get_connection)(GDBusObjectProxy * proxy);
GType (g_dbus_object_skeleton_get_type)(void);
GDBusObjectSkeleton * (g_dbus_object_skeleton_new)(const gchar * object_path);
void (g_dbus_object_skeleton_flush)(GDBusObjectSkeleton * object);
void (g_dbus_object_skeleton_add_interface)(GDBusObjectSkeleton * object, GDBusInterfaceSkeleton * interface_);
void (g_dbus_object_skeleton_remove_interface)(GDBusObjectSkeleton * object, GDBusInterfaceSkeleton * interface_);
void (g_dbus_object_skeleton_remove_interface_by_name)(GDBusObjectSkeleton * object, const gchar * interface_name);
void (g_dbus_object_skeleton_set_object_path)(GDBusObjectSkeleton * object, const gchar * object_path);
GType (g_dbus_proxy_get_type)(void);
void (g_dbus_proxy_new)(GDBusConnection * connection, GDBusProxyFlags flags, GDBusInterfaceInfo * info, const gchar * name, const gchar * object_path, const gchar * interface_name, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusProxy * (g_dbus_proxy_new_finish)(GAsyncResult * res, GError * * error);
GDBusProxy * (g_dbus_proxy_new_sync)(GDBusConnection * connection, GDBusProxyFlags flags, GDBusInterfaceInfo * info, const gchar * name, const gchar * object_path, const gchar * interface_name, GCancellable * cancellable, GError * * error);
void (g_dbus_proxy_new_for_bus)(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo * info, const gchar * name, const gchar * object_path, const gchar * interface_name, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusProxy * (g_dbus_proxy_new_for_bus_finish)(GAsyncResult * res, GError * * error);
GDBusProxy * (g_dbus_proxy_new_for_bus_sync)(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo * info, const gchar * name, const gchar * object_path, const gchar * interface_name, GCancellable * cancellable, GError * * error);
GDBusConnection * (g_dbus_proxy_get_connection)(GDBusProxy * proxy);
GDBusProxyFlags (g_dbus_proxy_get_flags)(GDBusProxy * proxy);
const gchar * (g_dbus_proxy_get_name)(GDBusProxy * proxy);
gchar * (g_dbus_proxy_get_name_owner)(GDBusProxy * proxy);
const gchar * (g_dbus_proxy_get_object_path)(GDBusProxy * proxy);
const gchar * (g_dbus_proxy_get_interface_name)(GDBusProxy * proxy);
gint (g_dbus_proxy_get_default_timeout)(GDBusProxy * proxy);
void (g_dbus_proxy_set_default_timeout)(GDBusProxy * proxy, gint timeout_msec);
GDBusInterfaceInfo * (g_dbus_proxy_get_interface_info)(GDBusProxy * proxy);
void (g_dbus_proxy_set_interface_info)(GDBusProxy * proxy, GDBusInterfaceInfo * info);
GVariant * (g_dbus_proxy_get_cached_property)(GDBusProxy * proxy, const gchar * property_name);
void (g_dbus_proxy_set_cached_property)(GDBusProxy * proxy, const gchar * property_name, GVariant * value);
gchar * * (g_dbus_proxy_get_cached_property_names)(GDBusProxy * proxy);
void (g_dbus_proxy_call)(GDBusProxy * proxy, const gchar * method_name, GVariant * parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GVariant * (g_dbus_proxy_call_finish)(GDBusProxy * proxy, GAsyncResult * res, GError * * error);
GVariant * (g_dbus_proxy_call_sync)(GDBusProxy * proxy, const gchar * method_name, GVariant * parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable * cancellable, GError * * error);
void (g_dbus_proxy_call_with_unix_fd_list)(GDBusProxy * proxy, const gchar * method_name, GVariant * parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList * fd_list, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GVariant * (g_dbus_proxy_call_with_unix_fd_list_finish)(GDBusProxy * proxy, GUnixFDList * * out_fd_list, GAsyncResult * res, GError * * error);
GVariant * (g_dbus_proxy_call_with_unix_fd_list_sync)(GDBusProxy * proxy, const gchar * method_name, GVariant * parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList * fd_list, GUnixFDList * * out_fd_list, GCancellable * cancellable, GError * * error);
GType (g_dbus_server_get_type)(void);
GDBusServer * (g_dbus_server_new_sync)(const gchar * address, GDBusServerFlags flags, const gchar * guid, GDBusAuthObserver * observer, GCancellable * cancellable, GError * * error);
const gchar * (g_dbus_server_get_client_address)(GDBusServer * server);
const gchar * (g_dbus_server_get_guid)(GDBusServer * server);
GDBusServerFlags (g_dbus_server_get_flags)(GDBusServer * server);
void (g_dbus_server_start)(GDBusServer * server);
void (g_dbus_server_stop)(GDBusServer * server);
gboolean (g_dbus_server_is_active)(GDBusServer * server);
gboolean (g_dbus_is_guid)(const gchar * string);
gchar * (g_dbus_generate_guid)(void);
gboolean (g_dbus_is_name)(const gchar * string);
gboolean (g_dbus_is_unique_name)(const gchar * string);
gboolean (g_dbus_is_member_name)(const gchar * string);
gboolean (g_dbus_is_interface_name)(const gchar * string);
gboolean (g_dbus_is_error_name)(const gchar * string);
void (g_dbus_gvariant_to_gvalue)(GVariant * value, GValue * out_gvalue);
GVariant * (g_dbus_gvalue_to_gvariant)(const GValue * gvalue, const GVariantType * type);
gchar * (g_dbus_escape_object_path_bytestring)(const guint8 * bytes);
gchar * (g_dbus_escape_object_path)(const gchar * s);
guint8 * (g_dbus_unescape_object_path)(const gchar * s);
GType (g_debug_controller_get_type)(void);
gboolean (g_debug_controller_get_debug_enabled)(GDebugController * self);
void (g_debug_controller_set_debug_enabled)(GDebugController * self, gboolean debug_enabled);
GType (g_debug_controller_dbus_get_type)(void);
GDebugControllerDBus * (g_debug_controller_dbus_new)(GDBusConnection * connection, GCancellable * cancellable, GError * * error);
void (g_debug_controller_dbus_stop)(GDebugControllerDBus * self);
GType (g_drive_get_type)(void);
char * (g_drive_get_name)(GDrive * drive);
GIcon * (g_drive_get_icon)(GDrive * drive);
GIcon * (g_drive_get_symbolic_icon)(GDrive * drive);
gboolean (g_drive_has_volumes)(GDrive * drive);
GList * (g_drive_get_volumes)(GDrive * drive);
gboolean (g_drive_is_removable)(GDrive * drive);
gboolean (g_drive_is_media_removable)(GDrive * drive);
gboolean (g_drive_has_media)(GDrive * drive);
gboolean (g_drive_is_media_check_automatic)(GDrive * drive);
gboolean (g_drive_can_poll_for_media)(GDrive * drive);
gboolean (g_drive_can_eject)(GDrive * drive);
void (g_drive_eject)(GDrive * drive, GMountUnmountFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_eject_finish)(GDrive * drive, GAsyncResult * result, GError * * error);
void (g_drive_poll_for_media)(GDrive * drive, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_poll_for_media_finish)(GDrive * drive, GAsyncResult * result, GError * * error);
char * (g_drive_get_identifier)(GDrive * drive, const char * kind);
char * * (g_drive_enumerate_identifiers)(GDrive * drive);
GDriveStartStopType (g_drive_get_start_stop_type)(GDrive * drive);
gboolean (g_drive_can_start)(GDrive * drive);
gboolean (g_drive_can_start_degraded)(GDrive * drive);
void (g_drive_start)(GDrive * drive, GDriveStartFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_start_finish)(GDrive * drive, GAsyncResult * result, GError * * error);
gboolean (g_drive_can_stop)(GDrive * drive);
void (g_drive_stop)(GDrive * drive, GMountUnmountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_stop_finish)(GDrive * drive, GAsyncResult * result, GError * * error);
void (g_drive_eject_with_operation)(GDrive * drive, GMountUnmountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_eject_with_operation_finish)(GDrive * drive, GAsyncResult * result, GError * * error);
const gchar * (g_drive_get_sort_key)(GDrive * drive);
GType (g_dtls_connection_get_type)(void);
void (g_dtls_connection_set_database)(GDtlsConnection * conn, GTlsDatabase * database);
GTlsDatabase * (g_dtls_connection_get_database)(GDtlsConnection * conn);
void (g_dtls_connection_set_certificate)(GDtlsConnection * conn, GTlsCertificate * certificate);
GTlsCertificate * (g_dtls_connection_get_certificate)(GDtlsConnection * conn);
void (g_dtls_connection_set_interaction)(GDtlsConnection * conn, GTlsInteraction * interaction);
GTlsInteraction * (g_dtls_connection_get_interaction)(GDtlsConnection * conn);
GTlsCertificate * (g_dtls_connection_get_peer_certificate)(GDtlsConnection * conn);
GTlsCertificateFlags (g_dtls_connection_get_peer_certificate_errors)(GDtlsConnection * conn);
void (g_dtls_connection_set_require_close_notify)(GDtlsConnection * conn, gboolean require_close_notify);
gboolean (g_dtls_connection_get_require_close_notify)(GDtlsConnection * conn);
void (g_dtls_connection_set_rehandshake_mode)(GDtlsConnection * conn, GTlsRehandshakeMode mode);
GTlsRehandshakeMode (g_dtls_connection_get_rehandshake_mode)(GDtlsConnection * conn);
gboolean (g_dtls_connection_handshake)(GDtlsConnection * conn, GCancellable * cancellable, GError * * error);
void (g_dtls_connection_handshake_async)(GDtlsConnection * conn, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dtls_connection_handshake_finish)(GDtlsConnection * conn, GAsyncResult * result, GError * * error);
gboolean (g_dtls_connection_shutdown)(GDtlsConnection * conn, gboolean shutdown_read, gboolean shutdown_write, GCancellable * cancellable, GError * * error);
void (g_dtls_connection_shutdown_async)(GDtlsConnection * conn, gboolean shutdown_read, gboolean shutdown_write, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dtls_connection_shutdown_finish)(GDtlsConnection * conn, GAsyncResult * result, GError * * error);
gboolean (g_dtls_connection_close)(GDtlsConnection * conn, GCancellable * cancellable, GError * * error);
void (g_dtls_connection_close_async)(GDtlsConnection * conn, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dtls_connection_close_finish)(GDtlsConnection * conn, GAsyncResult * result, GError * * error);
gboolean (g_dtls_connection_emit_accept_certificate)(GDtlsConnection * conn, GTlsCertificate * peer_cert, GTlsCertificateFlags errors);
void (g_dtls_connection_set_advertised_protocols)(GDtlsConnection * conn, const gchar * const * protocols);
const gchar * (g_dtls_connection_get_negotiated_protocol)(GDtlsConnection * conn);
gboolean (g_dtls_connection_get_channel_binding_data)(GDtlsConnection * conn, GTlsChannelBindingType type, GByteArray * data, GError * * error);
GTlsProtocolVersion (g_dtls_connection_get_protocol_version)(GDtlsConnection * conn);
gchar * (g_dtls_connection_get_ciphersuite_name)(GDtlsConnection * conn);
GType (g_dtls_client_connection_get_type)(void);
GDatagramBased * (g_dtls_client_connection_new)(GDatagramBased * base_socket, GSocketConnectable * server_identity, GError * * error);
GTlsCertificateFlags (g_dtls_client_connection_get_validation_flags)(GDtlsClientConnection * conn);
void (g_dtls_client_connection_set_validation_flags)(GDtlsClientConnection * conn, GTlsCertificateFlags flags);
GSocketConnectable * (g_dtls_client_connection_get_server_identity)(GDtlsClientConnection * conn);
void (g_dtls_client_connection_set_server_identity)(GDtlsClientConnection * conn, GSocketConnectable * identity);
GList * (g_dtls_client_connection_get_accepted_cas)(GDtlsClientConnection * conn);
GType (g_dtls_server_connection_get_type)(void);
GDatagramBased * (g_dtls_server_connection_new)(GDatagramBased * base_socket, GTlsCertificate * certificate, GError * * error);
GType (g_icon_get_type)(void);
guint (g_icon_hash)(gconstpointer icon);
gboolean (g_icon_equal)(GIcon * icon1, GIcon * icon2);
gchar * (g_icon_to_string)(GIcon * icon);
GIcon * (g_icon_new_for_string)(const gchar * str, GError * * error);
GVariant * (g_icon_serialize)(GIcon * icon);
GIcon * (g_icon_deserialize)(GVariant * value);
GType (g_emblem_get_type)(void);
GEmblem * (g_emblem_new)(GIcon * icon);
GEmblem * (g_emblem_new_with_origin)(GIcon * icon, GEmblemOrigin origin);
GIcon * (g_emblem_get_icon)(GEmblem * emblem);
GEmblemOrigin (g_emblem_get_origin)(GEmblem * emblem);
GType (g_emblemed_icon_get_type)(void);
GIcon * (g_emblemed_icon_new)(GIcon * icon, GEmblem * emblem);
GIcon * (g_emblemed_icon_get_icon)(GEmblemedIcon * emblemed);
GList * (g_emblemed_icon_get_emblems)(GEmblemedIcon * emblemed);
void (g_emblemed_icon_add_emblem)(GEmblemedIcon * emblemed, GEmblem * emblem);
void (g_emblemed_icon_clear_emblems)(GEmblemedIcon * emblemed);
GType (g_file_get_type)(void);
GFile * (g_file_new_for_path)(const char * path);
GFile * (g_file_new_for_uri)(const char * uri);
GFile * (g_file_new_for_commandline_arg)(const char * arg);
GFile * (g_file_new_for_commandline_arg_and_cwd)(const gchar * arg, const gchar * cwd);
GFile * (g_file_new_tmp)(const char * tmpl, GFileIOStream * * iostream, GError * * error);
void (g_file_new_tmp_async)(const char * tmpl, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (g_file_new_tmp_finish)(GAsyncResult * result, GFileIOStream * * iostream, GError * * error);
void (g_file_new_tmp_dir_async)(const char * tmpl, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (g_file_new_tmp_dir_finish)(GAsyncResult * result, GError * * error);
GFile * (g_file_parse_name)(const char * parse_name);
GFile * (g_file_new_build_filenamev)(const gchar * const * args);
GFile * (g_file_dup)(GFile * file);
guint (g_file_hash)(gconstpointer file);
gboolean (g_file_equal)(GFile * file1, GFile * file2);
char * (g_file_get_basename)(GFile * file);
char * (g_file_get_path)(GFile * file);
const char * (g_file_peek_path)(GFile * file);
char * (g_file_get_uri)(GFile * file);
char * (g_file_get_parse_name)(GFile * file);
GFile * (g_file_get_parent)(GFile * file);
gboolean (g_file_has_parent)(GFile * file, GFile * parent);
GFile * (g_file_get_child)(GFile * file, const char * name);
GFile * (g_file_get_child_for_display_name)(GFile * file, const char * display_name, GError * * error);
gboolean (g_file_has_prefix)(GFile * file, GFile * prefix);
char * (g_file_get_relative_path)(GFile * parent, GFile * descendant);
GFile * (g_file_resolve_relative_path)(GFile * file, const char * relative_path);
gboolean (g_file_is_native)(GFile * file);
gboolean (g_file_has_uri_scheme)(GFile * file, const char * uri_scheme);
char * (g_file_get_uri_scheme)(GFile * file);
GFileInputStream * (g_file_read)(GFile * file, GCancellable * cancellable, GError * * error);
void (g_file_read_async)(GFile * file, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInputStream * (g_file_read_finish)(GFile * file, GAsyncResult * res, GError * * error);
GFileOutputStream * (g_file_append_to)(GFile * file, GFileCreateFlags flags, GCancellable * cancellable, GError * * error);
GFileOutputStream * (g_file_create)(GFile * file, GFileCreateFlags flags, GCancellable * cancellable, GError * * error);
GFileOutputStream * (g_file_replace)(GFile * file, const char * etag, gboolean make_backup, GFileCreateFlags flags, GCancellable * cancellable, GError * * error);
void (g_file_append_to_async)(GFile * file, GFileCreateFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileOutputStream * (g_file_append_to_finish)(GFile * file, GAsyncResult * res, GError * * error);
void (g_file_create_async)(GFile * file, GFileCreateFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileOutputStream * (g_file_create_finish)(GFile * file, GAsyncResult * res, GError * * error);
void (g_file_replace_async)(GFile * file, const char * etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileOutputStream * (g_file_replace_finish)(GFile * file, GAsyncResult * res, GError * * error);
GFileIOStream * (g_file_open_readwrite)(GFile * file, GCancellable * cancellable, GError * * error);
void (g_file_open_readwrite_async)(GFile * file, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileIOStream * (g_file_open_readwrite_finish)(GFile * file, GAsyncResult * res, GError * * error);
GFileIOStream * (g_file_create_readwrite)(GFile * file, GFileCreateFlags flags, GCancellable * cancellable, GError * * error);
void (g_file_create_readwrite_async)(GFile * file, GFileCreateFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileIOStream * (g_file_create_readwrite_finish)(GFile * file, GAsyncResult * res, GError * * error);
GFileIOStream * (g_file_replace_readwrite)(GFile * file, const char * etag, gboolean make_backup, GFileCreateFlags flags, GCancellable * cancellable, GError * * error);
void (g_file_replace_readwrite_async)(GFile * file, const char * etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileIOStream * (g_file_replace_readwrite_finish)(GFile * file, GAsyncResult * res, GError * * error);
gboolean (g_file_query_exists)(GFile * file, GCancellable * cancellable);
GFileType (g_file_query_file_type)(GFile * file, GFileQueryInfoFlags flags, GCancellable * cancellable);
GFileInfo * (g_file_query_info)(GFile * file, const char * attributes, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
void (g_file_query_info_async)(GFile * file, const char * attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo * (g_file_query_info_finish)(GFile * file, GAsyncResult * res, GError * * error);
GFileInfo * (g_file_query_filesystem_info)(GFile * file, const char * attributes, GCancellable * cancellable, GError * * error);
void (g_file_query_filesystem_info_async)(GFile * file, const char * attributes, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo * (g_file_query_filesystem_info_finish)(GFile * file, GAsyncResult * res, GError * * error);
GMount * (g_file_find_enclosing_mount)(GFile * file, GCancellable * cancellable, GError * * error);
void (g_file_find_enclosing_mount_async)(GFile * file, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GMount * (g_file_find_enclosing_mount_finish)(GFile * file, GAsyncResult * res, GError * * error);
GFileEnumerator * (g_file_enumerate_children)(GFile * file, const char * attributes, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
void (g_file_enumerate_children_async)(GFile * file, const char * attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileEnumerator * (g_file_enumerate_children_finish)(GFile * file, GAsyncResult * res, GError * * error);
GFile * (g_file_set_display_name)(GFile * file, const char * display_name, GCancellable * cancellable, GError * * error);
void (g_file_set_display_name_async)(GFile * file, const char * display_name, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (g_file_set_display_name_finish)(GFile * file, GAsyncResult * res, GError * * error);
gboolean (g_file_delete)(GFile * file, GCancellable * cancellable, GError * * error);
void (g_file_delete_async)(GFile * file, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_delete_finish)(GFile * file, GAsyncResult * result, GError * * error);
gboolean (g_file_trash)(GFile * file, GCancellable * cancellable, GError * * error);
void (g_file_trash_async)(GFile * file, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_trash_finish)(GFile * file, GAsyncResult * result, GError * * error);
gboolean (g_file_copy)(GFile * source, GFile * destination, GFileCopyFlags flags, GCancellable * cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError * * error);
void (g_file_copy_async)(GFile * source, GFile * destination, GFileCopyFlags flags, int io_priority, GCancellable * cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data);
void (g_file_copy_async_with_closures)(GFile * source, GFile * destination, GFileCopyFlags flags, int io_priority, GCancellable * cancellable, GClosure * progress_callback_closure, GClosure * ready_callback_closure);
gboolean (g_file_copy_finish)(GFile * file, GAsyncResult * res, GError * * error);
gboolean (g_file_move)(GFile * source, GFile * destination, GFileCopyFlags flags, GCancellable * cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError * * error);
void (g_file_move_async)(GFile * source, GFile * destination, GFileCopyFlags flags, int io_priority, GCancellable * cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data);
void (g_file_move_async_with_closures)(GFile * source, GFile * destination, GFileCopyFlags flags, int io_priority, GCancellable * cancellable, GClosure * progress_callback_closure, GClosure * ready_callback_closure);
gboolean (g_file_move_finish)(GFile * file, GAsyncResult * result, GError * * error);
gboolean (g_file_make_directory)(GFile * file, GCancellable * cancellable, GError * * error);
void (g_file_make_directory_async)(GFile * file, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_make_directory_finish)(GFile * file, GAsyncResult * result, GError * * error);
gboolean (g_file_make_directory_with_parents)(GFile * file, GCancellable * cancellable, GError * * error);
gboolean (g_file_make_symbolic_link)(GFile * file, const char * symlink_value, GCancellable * cancellable, GError * * error);
void (g_file_make_symbolic_link_async)(GFile * file, const char * symlink_value, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_make_symbolic_link_finish)(GFile * file, GAsyncResult * result, GError * * error);
GFileAttributeInfoList * (g_file_query_settable_attributes)(GFile * file, GCancellable * cancellable, GError * * error);
GFileAttributeInfoList * (g_file_query_writable_namespaces)(GFile * file, GCancellable * cancellable, GError * * error);
gboolean (g_file_set_attribute)(GFile * file, const char * attribute, GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
gboolean (g_file_set_attributes_from_info)(GFile * file, GFileInfo * info, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
void (g_file_set_attributes_async)(GFile * file, GFileInfo * info, GFileQueryInfoFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_set_attributes_finish)(GFile * file, GAsyncResult * result, GFileInfo * * info, GError * * error);
gboolean (g_file_set_attribute_string)(GFile * file, const char * attribute, const char * value, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
gboolean (g_file_set_attribute_byte_string)(GFile * file, const char * attribute, const char * value, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
gboolean (g_file_set_attribute_uint32)(GFile * file, const char * attribute, guint32 value, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
gboolean (g_file_set_attribute_int32)(GFile * file, const char * attribute, gint32 value, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
gboolean (g_file_set_attribute_uint64)(GFile * file, const char * attribute, guint64 value, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
gboolean (g_file_set_attribute_int64)(GFile * file, const char * attribute, gint64 value, GFileQueryInfoFlags flags, GCancellable * cancellable, GError * * error);
void (g_file_mount_enclosing_volume)(GFile * location, GMountMountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_mount_enclosing_volume_finish)(GFile * location, GAsyncResult * result, GError * * error);
void (g_file_mount_mountable)(GFile * file, GMountMountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (g_file_mount_mountable_finish)(GFile * file, GAsyncResult * result, GError * * error);
void (g_file_unmount_mountable)(GFile * file, GMountUnmountFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_unmount_mountable_finish)(GFile * file, GAsyncResult * result, GError * * error);
void (g_file_unmount_mountable_with_operation)(GFile * file, GMountUnmountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_unmount_mountable_with_operation_finish)(GFile * file, GAsyncResult * result, GError * * error);
void (g_file_eject_mountable)(GFile * file, GMountUnmountFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_eject_mountable_finish)(GFile * file, GAsyncResult * result, GError * * error);
void (g_file_eject_mountable_with_operation)(GFile * file, GMountUnmountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_eject_mountable_with_operation_finish)(GFile * file, GAsyncResult * result, GError * * error);
char * (g_file_build_attribute_list_for_copy)(GFile * file, GFileCopyFlags flags, GCancellable * cancellable, GError * * error);
gboolean (g_file_copy_attributes)(GFile * source, GFile * destination, GFileCopyFlags flags, GCancellable * cancellable, GError * * error);
GFileMonitor * (g_file_monitor_directory)(GFile * file, GFileMonitorFlags flags, GCancellable * cancellable, GError * * error);
GFileMonitor * (g_file_monitor_file)(GFile * file, GFileMonitorFlags flags, GCancellable * cancellable, GError * * error);
GFileMonitor * (g_file_monitor)(GFile * file, GFileMonitorFlags flags, GCancellable * cancellable, GError * * error);
gboolean (g_file_measure_disk_usage)(GFile * file, GFileMeasureFlags flags, GCancellable * cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, guint64 * disk_usage, guint64 * num_dirs, guint64 * num_files, GError * * error);
void (g_file_measure_disk_usage_async)(GFile * file, GFileMeasureFlags flags, gint io_priority, GCancellable * cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_measure_disk_usage_finish)(GFile * file, GAsyncResult * result, guint64 * disk_usage, guint64 * num_dirs, guint64 * num_files, GError * * error);
void (g_file_start_mountable)(GFile * file, GDriveStartFlags flags, GMountOperation * start_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_start_mountable_finish)(GFile * file, GAsyncResult * result, GError * * error);
void (g_file_stop_mountable)(GFile * file, GMountUnmountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_stop_mountable_finish)(GFile * file, GAsyncResult * result, GError * * error);
void (g_file_poll_mountable)(GFile * file, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_poll_mountable_finish)(GFile * file, GAsyncResult * result, GError * * error);
GAppInfo * (g_file_query_default_handler)(GFile * file, GCancellable * cancellable, GError * * error);
void (g_file_query_default_handler_async)(GFile * file, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GAppInfo * (g_file_query_default_handler_finish)(GFile * file, GAsyncResult * result, GError * * error);
gboolean (g_file_load_contents)(GFile * file, GCancellable * cancellable, char * * contents, gsize * length, char * * etag_out, GError * * error);
void (g_file_load_contents_async)(GFile * file, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_load_contents_finish)(GFile * file, GAsyncResult * res, char * * contents, gsize * length, char * * etag_out, GError * * error);
void (g_file_load_partial_contents_async)(GFile * file, GCancellable * cancellable, GFileReadMoreCallback read_more_callback, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_load_partial_contents_finish)(GFile * file, GAsyncResult * res, char * * contents, gsize * length, char * * etag_out, GError * * error);
gboolean (g_file_replace_contents)(GFile * file, const char * contents, gsize length, const char * etag, gboolean make_backup, GFileCreateFlags flags, char * * new_etag, GCancellable * cancellable, GError * * error);
void (g_file_replace_contents_async)(GFile * file, const char * contents, gsize length, const char * etag, gboolean make_backup, GFileCreateFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void (g_file_replace_contents_bytes_async)(GFile * file, GBytes * contents, const char * etag, gboolean make_backup, GFileCreateFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_replace_contents_finish)(GFile * file, GAsyncResult * res, char * * new_etag, GError * * error);
gboolean (g_file_supports_thread_contexts)(GFile * file);
GBytes * (g_file_load_bytes)(GFile * file, GCancellable * cancellable, gchar * * etag_out, GError * * error);
void (g_file_load_bytes_async)(GFile * file, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GBytes * (g_file_load_bytes_finish)(GFile * file, GAsyncResult * result, gchar * * etag_out, GError * * error);
GType (g_file_attribute_info_list_get_type)(void);
GFileAttributeInfoList * (g_file_attribute_info_list_new)(void);
GFileAttributeInfoList * (g_file_attribute_info_list_ref)(GFileAttributeInfoList * list);
void (g_file_attribute_info_list_unref)(GFileAttributeInfoList * list);
GFileAttributeInfoList * (g_file_attribute_info_list_dup)(GFileAttributeInfoList * list);
const GFileAttributeInfo * (g_file_attribute_info_list_lookup)(GFileAttributeInfoList * list, const char * name);
void (g_file_attribute_info_list_add)(GFileAttributeInfoList * list, const char * name, GFileAttributeType type, GFileAttributeInfoFlags flags);
GType (g_file_enumerator_get_type)(void);
GFileInfo * (g_file_enumerator_next_file)(GFileEnumerator * enumerator, GCancellable * cancellable, GError * * error);
gboolean (g_file_enumerator_close)(GFileEnumerator * enumerator, GCancellable * cancellable, GError * * error);
void (g_file_enumerator_next_files_async)(GFileEnumerator * enumerator, int num_files, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList * (g_file_enumerator_next_files_finish)(GFileEnumerator * enumerator, GAsyncResult * result, GError * * error);
void (g_file_enumerator_close_async)(GFileEnumerator * enumerator, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_enumerator_close_finish)(GFileEnumerator * enumerator, GAsyncResult * result, GError * * error);
gboolean (g_file_enumerator_is_closed)(GFileEnumerator * enumerator);
gboolean (g_file_enumerator_has_pending)(GFileEnumerator * enumerator);
void (g_file_enumerator_set_pending)(GFileEnumerator * enumerator, gboolean pending);
GFile * (g_file_enumerator_get_container)(GFileEnumerator * enumerator);
GFile * (g_file_enumerator_get_child)(GFileEnumerator * enumerator, GFileInfo * info);
gboolean (g_file_enumerator_iterate)(GFileEnumerator * direnum, GFileInfo * * out_info, GFile * * out_child, GCancellable * cancellable, GError * * error);
GType (g_file_icon_get_type)(void);
GIcon * (g_file_icon_new)(GFile * file);
GFile * (g_file_icon_get_file)(GFileIcon * icon);
GType (g_file_info_get_type)(void);
GFileInfo * (g_file_info_new)(void);
GFileInfo * (g_file_info_dup)(GFileInfo * other);
void (g_file_info_copy_into)(GFileInfo * src_info, GFileInfo * dest_info);
gboolean (g_file_info_has_attribute)(GFileInfo * info, const char * attribute);
gboolean (g_file_info_has_namespace)(GFileInfo * info, const char * name_space);
char * * (g_file_info_list_attributes)(GFileInfo * info, const char * name_space);
gboolean (g_file_info_get_attribute_data)(GFileInfo * info, const char * attribute, GFileAttributeType * type, gpointer * value_pp, GFileAttributeStatus * status);
GFileAttributeType (g_file_info_get_attribute_type)(GFileInfo * info, const char * attribute);
void (g_file_info_remove_attribute)(GFileInfo * info, const char * attribute);
GFileAttributeStatus (g_file_info_get_attribute_status)(GFileInfo * info, const char * attribute);
gboolean (g_file_info_set_attribute_status)(GFileInfo * info, const char * attribute, GFileAttributeStatus status);
char * (g_file_info_get_attribute_as_string)(GFileInfo * info, const char * attribute);
const char * (g_file_info_get_attribute_string)(GFileInfo * info, const char * attribute);
const char * (g_file_info_get_attribute_byte_string)(GFileInfo * info, const char * attribute);
gboolean (g_file_info_get_attribute_boolean)(GFileInfo * info, const char * attribute);
guint32 (g_file_info_get_attribute_uint32)(GFileInfo * info, const char * attribute);
gint32 (g_file_info_get_attribute_int32)(GFileInfo * info, const char * attribute);
guint64 (g_file_info_get_attribute_uint64)(GFileInfo * info, const char * attribute);
gint64 (g_file_info_get_attribute_int64)(GFileInfo * info, const char * attribute);
GObject * (g_file_info_get_attribute_object)(GFileInfo * info, const char * attribute);
char * * (g_file_info_get_attribute_stringv)(GFileInfo * info, const char * attribute);
const char * (g_file_info_get_attribute_file_path)(GFileInfo * info, const char * attribute);
void (g_file_info_set_attribute)(GFileInfo * info, const char * attribute, GFileAttributeType type, gpointer value_p);
void (g_file_info_set_attribute_string)(GFileInfo * info, const char * attribute, const char * attr_value);
void (g_file_info_set_attribute_byte_string)(GFileInfo * info, const char * attribute, const char * attr_value);
void (g_file_info_set_attribute_boolean)(GFileInfo * info, const char * attribute, gboolean attr_value);
void (g_file_info_set_attribute_uint32)(GFileInfo * info, const char * attribute, guint32 attr_value);
void (g_file_info_set_attribute_int32)(GFileInfo * info, const char * attribute, gint32 attr_value);
void (g_file_info_set_attribute_uint64)(GFileInfo * info, const char * attribute, guint64 attr_value);
void (g_file_info_set_attribute_int64)(GFileInfo * info, const char * attribute, gint64 attr_value);
void (g_file_info_set_attribute_object)(GFileInfo * info, const char * attribute, GObject * attr_value);
void (g_file_info_set_attribute_stringv)(GFileInfo * info, const char * attribute, char * * attr_value);
void (g_file_info_set_attribute_file_path)(GFileInfo * info, const char * attribute, const char * attr_value);
void (g_file_info_clear_status)(GFileInfo * info);
GDateTime * (g_file_info_get_deletion_date)(GFileInfo * info);
GFileType (g_file_info_get_file_type)(GFileInfo * info);
gboolean (g_file_info_get_is_hidden)(GFileInfo * info);
gboolean (g_file_info_get_is_backup)(GFileInfo * info);
gboolean (g_file_info_get_is_symlink)(GFileInfo * info);
const char * (g_file_info_get_name)(GFileInfo * info);
const char * (g_file_info_get_display_name)(GFileInfo * info);
const char * (g_file_info_get_edit_name)(GFileInfo * info);
GIcon * (g_file_info_get_icon)(GFileInfo * info);
GIcon * (g_file_info_get_symbolic_icon)(GFileInfo * info);
const char * (g_file_info_get_content_type)(GFileInfo * info);
goffset (g_file_info_get_size)(GFileInfo * info);
void (g_file_info_get_modification_time)(GFileInfo * info, GTimeVal * result);
GDateTime * (g_file_info_get_modification_date_time)(GFileInfo * info);
GDateTime * (g_file_info_get_access_date_time)(GFileInfo * info);
GDateTime * (g_file_info_get_creation_date_time)(GFileInfo * info);
const char * (g_file_info_get_symlink_target)(GFileInfo * info);
const char * (g_file_info_get_etag)(GFileInfo * info);
gint32 (g_file_info_get_sort_order)(GFileInfo * info);
void (g_file_info_set_attribute_mask)(GFileInfo * info, GFileAttributeMatcher * mask);
void (g_file_info_unset_attribute_mask)(GFileInfo * info);
void (g_file_info_set_file_type)(GFileInfo * info, GFileType type);
void (g_file_info_set_is_hidden)(GFileInfo * info, gboolean is_hidden);
void (g_file_info_set_is_symlink)(GFileInfo * info, gboolean is_symlink);
void (g_file_info_set_name)(GFileInfo * info, const char * name);
void (g_file_info_set_display_name)(GFileInfo * info, const char * display_name);
void (g_file_info_set_edit_name)(GFileInfo * info, const char * edit_name);
void (g_file_info_set_icon)(GFileInfo * info, GIcon * icon);
void (g_file_info_set_symbolic_icon)(GFileInfo * info, GIcon * icon);
void (g_file_info_set_content_type)(GFileInfo * info, const char * content_type);
void (g_file_info_set_size)(GFileInfo * info, goffset size);
void (g_file_info_set_modification_time)(GFileInfo * info, GTimeVal * mtime);
void (g_file_info_set_modification_date_time)(GFileInfo * info, GDateTime * mtime);
void (g_file_info_set_access_date_time)(GFileInfo * info, GDateTime * atime);
void (g_file_info_set_creation_date_time)(GFileInfo * info, GDateTime * creation_time);
void (g_file_info_set_symlink_target)(GFileInfo * info, const char * symlink_target);
void (g_file_info_set_sort_order)(GFileInfo * info, gint32 sort_order);
GType (g_file_attribute_matcher_get_type)(void);
GFileAttributeMatcher * (g_file_attribute_matcher_new)(const char * attributes);
GFileAttributeMatcher * (g_file_attribute_matcher_ref)(GFileAttributeMatcher * matcher);
void (g_file_attribute_matcher_unref)(GFileAttributeMatcher * matcher);
GFileAttributeMatcher * (g_file_attribute_matcher_subtract)(GFileAttributeMatcher * matcher, GFileAttributeMatcher * subtract);
gboolean (g_file_attribute_matcher_matches)(GFileAttributeMatcher * matcher, const char * attribute);
gboolean (g_file_attribute_matcher_matches_only)(GFileAttributeMatcher * matcher, const char * attribute);
gboolean (g_file_attribute_matcher_enumerate_namespace)(GFileAttributeMatcher * matcher, const char * ns);
const char * (g_file_attribute_matcher_enumerate_next)(GFileAttributeMatcher * matcher);
char * (g_file_attribute_matcher_to_string)(GFileAttributeMatcher * matcher);
GType (g_file_input_stream_get_type)(void);
GFileInfo * (g_file_input_stream_query_info)(GFileInputStream * stream, const char * attributes, GCancellable * cancellable, GError * * error);
void (g_file_input_stream_query_info_async)(GFileInputStream * stream, const char * attributes, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo * (g_file_input_stream_query_info_finish)(GFileInputStream * stream, GAsyncResult * result, GError * * error);
GQuark (g_io_error_quark)(void);
GIOErrorEnum (g_io_error_from_errno)(gint err_no);
GIOErrorEnum (g_io_error_from_file_error)(GFileError file_error);
GType (g_io_stream_get_type)(void);
GInputStream * (g_io_stream_get_input_stream)(GIOStream * stream);
GOutputStream * (g_io_stream_get_output_stream)(GIOStream * stream);
void (g_io_stream_splice_async)(GIOStream * stream1, GIOStream * stream2, GIOStreamSpliceFlags flags, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_io_stream_splice_finish)(GAsyncResult * result, GError * * error);
gboolean (g_io_stream_close)(GIOStream * stream, GCancellable * cancellable, GError * * error);
void (g_io_stream_close_async)(GIOStream * stream, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_io_stream_close_finish)(GIOStream * stream, GAsyncResult * result, GError * * error);
gboolean (g_io_stream_is_closed)(GIOStream * stream);
gboolean (g_io_stream_has_pending)(GIOStream * stream);
gboolean (g_io_stream_set_pending)(GIOStream * stream, GError * * error);
void (g_io_stream_clear_pending)(GIOStream * stream);
GType (g_file_io_stream_get_type)(void);
GFileInfo * (g_file_io_stream_query_info)(GFileIOStream * stream, const char * attributes, GCancellable * cancellable, GError * * error);
void (g_file_io_stream_query_info_async)(GFileIOStream * stream, const char * attributes, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo * (g_file_io_stream_query_info_finish)(GFileIOStream * stream, GAsyncResult * result, GError * * error);
char * (g_file_io_stream_get_etag)(GFileIOStream * stream);
GType (g_file_monitor_get_type)(void);
gboolean (g_file_monitor_cancel)(GFileMonitor * monitor);
gboolean (g_file_monitor_is_cancelled)(GFileMonitor * monitor);
void (g_file_monitor_set_rate_limit)(GFileMonitor * monitor, gint limit_msecs);
void (g_file_monitor_emit_event)(GFileMonitor * monitor, GFile * child, GFile * other_file, GFileMonitorEvent event_type);
GType (g_filename_completer_get_type)(void);
GFilenameCompleter * (g_filename_completer_new)(void);
char * (g_filename_completer_get_completion_suffix)(GFilenameCompleter * completer, const char * initial_text);
char * * (g_filename_completer_get_completions)(GFilenameCompleter * completer, const char * initial_text);
void (g_filename_completer_set_dirs_only)(GFilenameCompleter * completer, gboolean dirs_only);
GType (g_file_output_stream_get_type)(void);
GFileInfo * (g_file_output_stream_query_info)(GFileOutputStream * stream, const char * attributes, GCancellable * cancellable, GError * * error);
void (g_file_output_stream_query_info_async)(GFileOutputStream * stream, const char * attributes, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo * (g_file_output_stream_query_info_finish)(GFileOutputStream * stream, GAsyncResult * result, GError * * error);
char * (g_file_output_stream_get_etag)(GFileOutputStream * stream);
GType (g_inet_address_get_type)(void);
GInetAddress * (g_inet_address_new_from_string)(const gchar * string);
GInetAddress * (g_inet_address_new_from_bytes)(const guint8 * bytes, GSocketFamily family);
GInetAddress * (g_inet_address_new_loopback)(GSocketFamily family);
GInetAddress * (g_inet_address_new_any)(GSocketFamily family);
gboolean (g_inet_address_equal)(GInetAddress * address, GInetAddress * other_address);
gchar * (g_inet_address_to_string)(GInetAddress * address);
const guint8 * (g_inet_address_to_bytes)(GInetAddress * address);
gsize (g_inet_address_get_native_size)(GInetAddress * address);
GSocketFamily (g_inet_address_get_family)(GInetAddress * address);
gboolean (g_inet_address_get_is_any)(GInetAddress * address);
gboolean (g_inet_address_get_is_loopback)(GInetAddress * address);
gboolean (g_inet_address_get_is_link_local)(GInetAddress * address);
gboolean (g_inet_address_get_is_site_local)(GInetAddress * address);
gboolean (g_inet_address_get_is_multicast)(GInetAddress * address);
gboolean (g_inet_address_get_is_mc_global)(GInetAddress * address);
gboolean (g_inet_address_get_is_mc_link_local)(GInetAddress * address);
gboolean (g_inet_address_get_is_mc_node_local)(GInetAddress * address);
gboolean (g_inet_address_get_is_mc_org_local)(GInetAddress * address);
gboolean (g_inet_address_get_is_mc_site_local)(GInetAddress * address);
GType (g_inet_address_mask_get_type)(void);
GInetAddressMask * (g_inet_address_mask_new)(GInetAddress * addr, guint length, GError * * error);
GInetAddressMask * (g_inet_address_mask_new_from_string)(const gchar * mask_string, GError * * error);
gchar * (g_inet_address_mask_to_string)(GInetAddressMask * mask);
GSocketFamily (g_inet_address_mask_get_family)(GInetAddressMask * mask);
GInetAddress * (g_inet_address_mask_get_address)(GInetAddressMask * mask);
guint (g_inet_address_mask_get_length)(GInetAddressMask * mask);
gboolean (g_inet_address_mask_matches)(GInetAddressMask * mask, GInetAddress * address);
gboolean (g_inet_address_mask_equal)(GInetAddressMask * mask, GInetAddressMask * mask2);
GType (g_socket_address_get_type)(void);
GSocketFamily (g_socket_address_get_family)(GSocketAddress * address);
GSocketAddress * (g_socket_address_new_from_native)(gpointer native, gsize len);
gboolean (g_socket_address_to_native)(GSocketAddress * address, gpointer dest, gsize destlen, GError * * error);
gssize (g_socket_address_get_native_size)(GSocketAddress * address);
GType (g_inet_socket_address_get_type)(void);
GSocketAddress * (g_inet_socket_address_new)(GInetAddress * address, guint16 port);
GSocketAddress * (g_inet_socket_address_new_from_string)(const char * address, guint port);
GInetAddress * (g_inet_socket_address_get_address)(GInetSocketAddress * address);
guint16 (g_inet_socket_address_get_port)(GInetSocketAddress * address);
guint32 (g_inet_socket_address_get_flowinfo)(GInetSocketAddress * address);
guint32 (g_inet_socket_address_get_scope_id)(GInetSocketAddress * address);
GType (g_app_info_create_flags_get_type)(void);
GType (g_converter_flags_get_type)(void);
GType (g_converter_result_get_type)(void);
GType (g_data_stream_byte_order_get_type)(void);
GType (g_data_stream_newline_type_get_type)(void);
GType (g_file_attribute_type_get_type)(void);
GType (g_file_attribute_info_flags_get_type)(void);
GType (g_file_attribute_status_get_type)(void);
GType (g_file_query_info_flags_get_type)(void);
GType (g_file_create_flags_get_type)(void);
GType (g_file_measure_flags_get_type)(void);
GType (g_mount_mount_flags_get_type)(void);
GType (g_mount_unmount_flags_get_type)(void);
GType (g_drive_start_flags_get_type)(void);
GType (g_drive_start_stop_type_get_type)(void);
GType (g_file_copy_flags_get_type)(void);
GType (g_file_monitor_flags_get_type)(void);
GType (g_file_type_get_type)(void);
GType (g_filesystem_preview_type_get_type)(void);
GType (g_file_monitor_event_get_type)(void);
GType (g_io_error_enum_get_type)(void);
GType (g_ask_password_flags_get_type)(void);
GType (g_password_save_get_type)(void);
GType (g_mount_operation_result_get_type)(void);
GType (g_output_stream_splice_flags_get_type)(void);
GType (g_io_stream_splice_flags_get_type)(void);
GType (g_emblem_origin_get_type)(void);
GType (g_resolver_error_get_type)(void);
GType (g_resolver_record_type_get_type)(void);
GType (g_resource_error_get_type)(void);
GType (g_resource_flags_get_type)(void);
GType (g_resource_lookup_flags_get_type)(void);
GType (g_socket_family_get_type)(void);
GType (g_socket_type_get_type)(void);
GType (g_socket_msg_flags_get_type)(void);
GType (g_socket_protocol_get_type)(void);
GType (g_zlib_compressor_format_get_type)(void);
GType (g_unix_socket_address_type_get_type)(void);
GType (g_bus_type_get_type)(void);
GType (g_bus_name_owner_flags_get_type)(void);
GType (g_bus_name_watcher_flags_get_type)(void);
GType (g_dbus_proxy_flags_get_type)(void);
GType (g_dbus_error_get_type)(void);
GType (g_dbus_connection_flags_get_type)(void);
GType (g_dbus_capability_flags_get_type)(void);
GType (g_dbus_call_flags_get_type)(void);
GType (g_dbus_message_type_get_type)(void);
GType (g_dbus_message_flags_get_type)(void);
GType (g_dbus_message_header_field_get_type)(void);
GType (g_dbus_property_info_flags_get_type)(void);
GType (g_dbus_subtree_flags_get_type)(void);
GType (g_dbus_server_flags_get_type)(void);
GType (g_dbus_signal_flags_get_type)(void);
GType (g_dbus_send_message_flags_get_type)(void);
GType (g_credentials_type_get_type)(void);
GType (g_dbus_message_byte_order_get_type)(void);
GType (g_application_flags_get_type)(void);
GType (g_tls_error_get_type)(void);
GType (g_tls_certificate_flags_get_type)(void);
GType (g_tls_authentication_mode_get_type)(void);
GType (g_tls_channel_binding_type_get_type)(void);
GType (g_tls_channel_binding_error_get_type)(void);
GType (g_tls_rehandshake_mode_get_type)(void);
GType (g_tls_password_flags_get_type)(void);
GType (g_tls_interaction_result_get_type)(void);
GType (g_dbus_interface_skeleton_flags_get_type)(void);
GType (g_dbus_object_manager_client_flags_get_type)(void);
GType (g_tls_database_verify_flags_get_type)(void);
GType (g_tls_database_lookup_flags_get_type)(void);
GType (g_tls_certificate_request_flags_get_type)(void);
GType (g_tls_protocol_version_get_type)(void);
GType (g_io_module_scope_flags_get_type)(void);
GType (g_socket_client_event_get_type)(void);
GType (g_socket_listener_event_get_type)(void);
GType (g_test_dbus_flags_get_type)(void);
GType (g_subprocess_flags_get_type)(void);
GType (g_notification_priority_get_type)(void);
GType (g_network_connectivity_get_type)(void);
GType (g_pollable_return_get_type)(void);
GType (g_memory_monitor_warning_level_get_type)(void);
GType (g_resolver_name_lookup_flags_get_type)(void);
GType (g_settings_bind_flags_get_type)(void);
GIOModuleScope * (g_io_module_scope_new)(GIOModuleScopeFlags flags);
void (g_io_module_scope_free)(GIOModuleScope * scope);
void (g_io_module_scope_block)(GIOModuleScope * scope, const gchar * basename);
GType (g_io_module_get_type)(void);
GIOModule * (g_io_module_new)(const gchar * filename);
void (g_io_modules_scan_all_in_directory)(const char * dirname);
GList * (g_io_modules_load_all_in_directory)(const gchar * dirname);
void (g_io_modules_scan_all_in_directory_with_scope)(const gchar * dirname, GIOModuleScope * scope);
GList * (g_io_modules_load_all_in_directory_with_scope)(const gchar * dirname, GIOModuleScope * scope);
GIOExtensionPoint * (g_io_extension_point_register)(const char * name);
GIOExtensionPoint * (g_io_extension_point_lookup)(const char * name);
void (g_io_extension_point_set_required_type)(GIOExtensionPoint * extension_point, GType type);
GType (g_io_extension_point_get_required_type)(GIOExtensionPoint * extension_point);
GList * (g_io_extension_point_get_extensions)(GIOExtensionPoint * extension_point);
GIOExtension * (g_io_extension_point_get_extension_by_name)(GIOExtensionPoint * extension_point, const char * name);
GIOExtension * (g_io_extension_point_implement)(const char * extension_point_name, GType type, const char * extension_name, gint priority);
GType (g_io_extension_get_type)(GIOExtension * extension);
const char * (g_io_extension_get_name)(GIOExtension * extension);
gint (g_io_extension_get_priority)(GIOExtension * extension);
GTypeClass * (g_io_extension_ref_class)(GIOExtension * extension);
void (g_io_module_load)(GIOModule * module);
void (g_io_module_unload)(GIOModule * module);
char * * (g_io_module_query)(void);
void (g_io_scheduler_push_job)(GIOSchedulerJobFunc job_func, gpointer user_data, GDestroyNotify notify, gint io_priority, GCancellable * cancellable);
void (g_io_scheduler_cancel_all_jobs)(void);
gboolean (g_io_scheduler_job_send_to_mainloop)(GIOSchedulerJob * job, GSourceFunc func, gpointer user_data, GDestroyNotify notify);
void (g_io_scheduler_job_send_to_mainloop_async)(GIOSchedulerJob * job, GSourceFunc func, gpointer user_data, GDestroyNotify notify);
GType (g_list_model_get_type)(void);
GType (g_list_model_get_item_type)(GListModel * list);
guint (g_list_model_get_n_items)(GListModel * list);
gpointer (g_list_model_get_item)(GListModel * list, guint position);
GObject * (g_list_model_get_object)(GListModel * list, guint position);
void (g_list_model_items_changed)(GListModel * list, guint position, guint removed, guint added);
GType (g_list_store_get_type)(void);
GListStore * (g_list_store_new)(GType item_type);
void (g_list_store_insert)(GListStore * store, guint position, gpointer item);
guint (g_list_store_insert_sorted)(GListStore * store, gpointer item, GCompareDataFunc compare_func, gpointer user_data);
void (g_list_store_sort)(GListStore * store, GCompareDataFunc compare_func, gpointer user_data);
void (g_list_store_append)(GListStore * store, gpointer item);
void (g_list_store_remove)(GListStore * store, guint position);
void (g_list_store_remove_all)(GListStore * store);
void (g_list_store_splice)(GListStore * store, guint position, guint n_removals, gpointer * additions, guint n_additions);
gboolean (g_list_store_find)(GListStore * store, gpointer item, guint * position);
gboolean (g_list_store_find_with_equal_func)(GListStore * store, gpointer item, GEqualFunc equal_func, guint * position);
gboolean (g_list_store_find_with_equal_func_full)(GListStore * store, gpointer item, GEqualFuncFull equal_func, gpointer user_data, guint * position);
GType (g_loadable_icon_get_type)(void);
GInputStream * (g_loadable_icon_load)(GLoadableIcon * icon, int size, char * * type, GCancellable * cancellable, GError * * error);
void (g_loadable_icon_load_async)(GLoadableIcon * icon, int size, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GInputStream * (g_loadable_icon_load_finish)(GLoadableIcon * icon, GAsyncResult * res, char * * type, GError * * error);
GType (g_memory_input_stream_get_type)(void);
GInputStream * (g_memory_input_stream_new)(void);
GInputStream * (g_memory_input_stream_new_from_data)(const void * data, gssize len, GDestroyNotify destroy);
GInputStream * (g_memory_input_stream_new_from_bytes)(GBytes * bytes);
void (g_memory_input_stream_add_data)(GMemoryInputStream * stream, const void * data, gssize len, GDestroyNotify destroy);
void (g_memory_input_stream_add_bytes)(GMemoryInputStream * stream, GBytes * bytes);
GType (g_memory_monitor_get_type)(void);
GMemoryMonitor * (g_memory_monitor_dup_default)(void);
GType (g_memory_output_stream_get_type)(void);
GOutputStream * (g_memory_output_stream_new)(gpointer data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function);
GOutputStream * (g_memory_output_stream_new_resizable)(void);
gpointer (g_memory_output_stream_get_data)(GMemoryOutputStream * ostream);
gsize (g_memory_output_stream_get_size)(GMemoryOutputStream * ostream);
gsize (g_memory_output_stream_get_data_size)(GMemoryOutputStream * ostream);
gpointer (g_memory_output_stream_steal_data)(GMemoryOutputStream * ostream);
GBytes * (g_memory_output_stream_steal_as_bytes)(GMemoryOutputStream * ostream);
GType (g_menu_model_get_type)(void);
gboolean (g_menu_model_is_mutable)(GMenuModel * model);
gint (g_menu_model_get_n_items)(GMenuModel * model);
GMenuAttributeIter * (g_menu_model_iterate_item_attributes)(GMenuModel * model, gint item_index);
GVariant * (g_menu_model_get_item_attribute_value)(GMenuModel * model, gint item_index, const gchar * attribute, const GVariantType * expected_type);
GMenuLinkIter * (g_menu_model_iterate_item_links)(GMenuModel * model, gint item_index);
GMenuModel * (g_menu_model_get_item_link)(GMenuModel * model, gint item_index, const gchar * link);
void (g_menu_model_items_changed)(GMenuModel * model, gint position, gint removed, gint added);
GType (g_menu_attribute_iter_get_type)(void);
gboolean (g_menu_attribute_iter_get_next)(GMenuAttributeIter * iter, const gchar * * out_name, GVariant * * value);
gboolean (g_menu_attribute_iter_next)(GMenuAttributeIter * iter);
const gchar * (g_menu_attribute_iter_get_name)(GMenuAttributeIter * iter);
GVariant * (g_menu_attribute_iter_get_value)(GMenuAttributeIter * iter);
GType (g_menu_link_iter_get_type)(void);
gboolean (g_menu_link_iter_get_next)(GMenuLinkIter * iter, const gchar * * out_link, GMenuModel * * value);
gboolean (g_menu_link_iter_next)(GMenuLinkIter * iter);
const gchar * (g_menu_link_iter_get_name)(GMenuLinkIter * iter);
GMenuModel * (g_menu_link_iter_get_value)(GMenuLinkIter * iter);
GType (g_menu_get_type)(void);
GMenu * (g_menu_new)(void);
void (g_menu_freeze)(GMenu * menu);
void (g_menu_insert_item)(GMenu * menu, gint position, GMenuItem * item);
void (g_menu_prepend_item)(GMenu * menu, GMenuItem * item);
void (g_menu_append_item)(GMenu * menu, GMenuItem * item);
void (g_menu_remove)(GMenu * menu, gint position);
void (g_menu_remove_all)(GMenu * menu);
void (g_menu_insert)(GMenu * menu, gint position, const gchar * label, const gchar * detailed_action);
void (g_menu_prepend)(GMenu * menu, const gchar * label, const gchar * detailed_action);
void (g_menu_append)(GMenu * menu, const gchar * label, const gchar * detailed_action);
void (g_menu_insert_section)(GMenu * menu, gint position, const gchar * label, GMenuModel * section);
void (g_menu_prepend_section)(GMenu * menu, const gchar * label, GMenuModel * section);
void (g_menu_append_section)(GMenu * menu, const gchar * label, GMenuModel * section);
void (g_menu_insert_submenu)(GMenu * menu, gint position, const gchar * label, GMenuModel * submenu);
void (g_menu_prepend_submenu)(GMenu * menu, const gchar * label, GMenuModel * submenu);
void (g_menu_append_submenu)(GMenu * menu, const gchar * label, GMenuModel * submenu);
GType (g_menu_item_get_type)(void);
GMenuItem * (g_menu_item_new)(const gchar * label, const gchar * detailed_action);
GMenuItem * (g_menu_item_new_from_model)(GMenuModel * model, gint item_index);
GMenuItem * (g_menu_item_new_submenu)(const gchar * label, GMenuModel * submenu);
GMenuItem * (g_menu_item_new_section)(const gchar * label, GMenuModel * section);
GVariant * (g_menu_item_get_attribute_value)(GMenuItem * menu_item, const gchar * attribute, const GVariantType * expected_type);
GMenuModel * (g_menu_item_get_link)(GMenuItem * menu_item, const gchar * link);
void (g_menu_item_set_attribute_value)(GMenuItem * menu_item, const gchar * attribute, GVariant * value);
void (g_menu_item_set_link)(GMenuItem * menu_item, const gchar * link, GMenuModel * model);
void (g_menu_item_set_label)(GMenuItem * menu_item, const gchar * label);
void (g_menu_item_set_submenu)(GMenuItem * menu_item, GMenuModel * submenu);
void (g_menu_item_set_section)(GMenuItem * menu_item, GMenuModel * section);
void (g_menu_item_set_action_and_target_value)(GMenuItem * menu_item, const gchar * action, GVariant * target_value);
void (g_menu_item_set_detailed_action)(GMenuItem * menu_item, const gchar * detailed_action);
void (g_menu_item_set_icon)(GMenuItem * menu_item, GIcon * icon);
guint (g_dbus_connection_export_menu_model)(GDBusConnection * connection, const gchar * object_path, GMenuModel * menu, GError * * error);
void (g_dbus_connection_unexport_menu_model)(GDBusConnection * connection, guint export_id);
GType (g_mount_get_type)(void);
GFile * (g_mount_get_root)(GMount * mount);
GFile * (g_mount_get_default_location)(GMount * mount);
char * (g_mount_get_name)(GMount * mount);
GIcon * (g_mount_get_icon)(GMount * mount);
GIcon * (g_mount_get_symbolic_icon)(GMount * mount);
char * (g_mount_get_uuid)(GMount * mount);
GVolume * (g_mount_get_volume)(GMount * mount);
GDrive * (g_mount_get_drive)(GMount * mount);
gboolean (g_mount_can_unmount)(GMount * mount);
gboolean (g_mount_can_eject)(GMount * mount);
void (g_mount_unmount)(GMount * mount, GMountUnmountFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_unmount_finish)(GMount * mount, GAsyncResult * result, GError * * error);
void (g_mount_eject)(GMount * mount, GMountUnmountFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_eject_finish)(GMount * mount, GAsyncResult * result, GError * * error);
void (g_mount_remount)(GMount * mount, GMountMountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_remount_finish)(GMount * mount, GAsyncResult * result, GError * * error);
void (g_mount_guess_content_type)(GMount * mount, gboolean force_rescan, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gchar * * (g_mount_guess_content_type_finish)(GMount * mount, GAsyncResult * result, GError * * error);
gchar * * (g_mount_guess_content_type_sync)(GMount * mount, gboolean force_rescan, GCancellable * cancellable, GError * * error);
gboolean (g_mount_is_shadowed)(GMount * mount);
void (g_mount_shadow)(GMount * mount);
void (g_mount_unshadow)(GMount * mount);
void (g_mount_unmount_with_operation)(GMount * mount, GMountUnmountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_unmount_with_operation_finish)(GMount * mount, GAsyncResult * result, GError * * error);
void (g_mount_eject_with_operation)(GMount * mount, GMountUnmountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_eject_with_operation_finish)(GMount * mount, GAsyncResult * result, GError * * error);
const gchar * (g_mount_get_sort_key)(GMount * mount);
GType (g_mount_operation_get_type)(void);
GMountOperation * (g_mount_operation_new)(void);
const char * (g_mount_operation_get_username)(GMountOperation * op);
void (g_mount_operation_set_username)(GMountOperation * op, const char * username);
const char * (g_mount_operation_get_password)(GMountOperation * op);
void (g_mount_operation_set_password)(GMountOperation * op, const char * password);
gboolean (g_mount_operation_get_anonymous)(GMountOperation * op);
void (g_mount_operation_set_anonymous)(GMountOperation * op, gboolean anonymous);
const char * (g_mount_operation_get_domain)(GMountOperation * op);
void (g_mount_operation_set_domain)(GMountOperation * op, const char * domain);
GPasswordSave (g_mount_operation_get_password_save)(GMountOperation * op);
void (g_mount_operation_set_password_save)(GMountOperation * op, GPasswordSave save);
int (g_mount_operation_get_choice)(GMountOperation * op);
void (g_mount_operation_set_choice)(GMountOperation * op, int choice);
void (g_mount_operation_reply)(GMountOperation * op, GMountOperationResult result);
gboolean (g_mount_operation_get_is_tcrypt_hidden_volume)(GMountOperation * op);
void (g_mount_operation_set_is_tcrypt_hidden_volume)(GMountOperation * op, gboolean hidden_volume);
gboolean (g_mount_operation_get_is_tcrypt_system_volume)(GMountOperation * op);
void (g_mount_operation_set_is_tcrypt_system_volume)(GMountOperation * op, gboolean system_volume);
guint (g_mount_operation_get_pim)(GMountOperation * op);
void (g_mount_operation_set_pim)(GMountOperation * op, guint pim);
GType (g_native_socket_address_get_type)(void);
GSocketAddress * (g_native_socket_address_new)(gpointer native, gsize len);
GType (g_volume_monitor_get_type)(void);
GVolumeMonitor * (g_volume_monitor_get)(void);
GList * (g_volume_monitor_get_connected_drives)(GVolumeMonitor * volume_monitor);
GList * (g_volume_monitor_get_volumes)(GVolumeMonitor * volume_monitor);
GList * (g_volume_monitor_get_mounts)(GVolumeMonitor * volume_monitor);
GVolume * (g_volume_monitor_get_volume_for_uuid)(GVolumeMonitor * volume_monitor, const char * uuid);
GMount * (g_volume_monitor_get_mount_for_uuid)(GVolumeMonitor * volume_monitor, const char * uuid);
GVolume * (g_volume_monitor_adopt_orphan_mount)(GMount * mount);
GType (g_native_volume_monitor_get_type)(void);
GType (g_network_address_get_type)(void);
GSocketConnectable * (g_network_address_new)(const gchar * hostname, guint16 port);
GSocketConnectable * (g_network_address_new_loopback)(guint16 port);
GSocketConnectable * (g_network_address_parse)(const gchar * host_and_port, guint16 default_port, GError * * error);
GSocketConnectable * (g_network_address_parse_uri)(const gchar * uri, guint16 default_port, GError * * error);
const gchar * (g_network_address_get_hostname)(GNetworkAddress * addr);
guint16 (g_network_address_get_port)(GNetworkAddress * addr);
const gchar * (g_network_address_get_scheme)(GNetworkAddress * addr);
GType (g_network_monitor_get_type)(void);
GNetworkMonitor * (g_network_monitor_get_default)(void);
gboolean (g_network_monitor_get_network_available)(GNetworkMonitor * monitor);
gboolean (g_network_monitor_get_network_metered)(GNetworkMonitor * monitor);
GNetworkConnectivity (g_network_monitor_get_connectivity)(GNetworkMonitor * monitor);
gboolean (g_network_monitor_can_reach)(GNetworkMonitor * monitor, GSocketConnectable * connectable, GCancellable * cancellable, GError * * error);
void (g_network_monitor_can_reach_async)(GNetworkMonitor * monitor, GSocketConnectable * connectable, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_network_monitor_can_reach_finish)(GNetworkMonitor * monitor, GAsyncResult * result, GError * * error);
GType (g_network_service_get_type)(void);
GSocketConnectable * (g_network_service_new)(const gchar * service, const gchar * protocol, const gchar * domain);
const gchar * (g_network_service_get_service)(GNetworkService * srv);
const gchar * (g_network_service_get_protocol)(GNetworkService * srv);
const gchar * (g_network_service_get_domain)(GNetworkService * srv);
const gchar * (g_network_service_get_scheme)(GNetworkService * srv);
void (g_network_service_set_scheme)(GNetworkService * srv, const gchar * scheme);
GType (g_notification_get_type)(void);
GNotification * (g_notification_new)(const gchar * title);
void (g_notification_set_title)(GNotification * notification, const gchar * title);
void (g_notification_set_body)(GNotification * notification, const gchar * body);
void (g_notification_set_icon)(GNotification * notification, GIcon * icon);
void (g_notification_set_urgent)(GNotification * notification, gboolean urgent);
void (g_notification_set_priority)(GNotification * notification, GNotificationPriority priority);
void (g_notification_set_category)(GNotification * notification, const gchar * category);
void (g_notification_add_button)(GNotification * notification, const gchar * label, const gchar * detailed_action);
void (g_notification_add_button_with_target_value)(GNotification * notification, const gchar * label, const gchar * action, GVariant * target);
void (g_notification_set_default_action)(GNotification * notification, const gchar * detailed_action);
void (g_notification_set_default_action_and_target_value)(GNotification * notification, const gchar * action, GVariant * target);
GType (g_permission_get_type)(void);
gboolean (g_permission_acquire)(GPermission * permission, GCancellable * cancellable, GError * * error);
void (g_permission_acquire_async)(GPermission * permission, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_permission_acquire_finish)(GPermission * permission, GAsyncResult * result, GError * * error);
gboolean (g_permission_release)(GPermission * permission, GCancellable * cancellable, GError * * error);
void (g_permission_release_async)(GPermission * permission, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_permission_release_finish)(GPermission * permission, GAsyncResult * result, GError * * error);
gboolean (g_permission_get_allowed)(GPermission * permission);
gboolean (g_permission_get_can_acquire)(GPermission * permission);
gboolean (g_permission_get_can_release)(GPermission * permission);
void (g_permission_impl_update)(GPermission * permission, gboolean allowed, gboolean can_acquire, gboolean can_release);
GType (g_pollable_input_stream_get_type)(void);
gboolean (g_pollable_input_stream_can_poll)(GPollableInputStream * stream);
gboolean (g_pollable_input_stream_is_readable)(GPollableInputStream * stream);
GSource * (g_pollable_input_stream_create_source)(GPollableInputStream * stream, GCancellable * cancellable);
gssize (g_pollable_input_stream_read_nonblocking)(GPollableInputStream * stream, void * buffer, gsize count, GCancellable * cancellable, GError * * error);
GType (g_pollable_output_stream_get_type)(void);
gboolean (g_pollable_output_stream_can_poll)(GPollableOutputStream * stream);
gboolean (g_pollable_output_stream_is_writable)(GPollableOutputStream * stream);
GSource * (g_pollable_output_stream_create_source)(GPollableOutputStream * stream, GCancellable * cancellable);
gssize (g_pollable_output_stream_write_nonblocking)(GPollableOutputStream * stream, const void * buffer, gsize count, GCancellable * cancellable, GError * * error);
GPollableReturn (g_pollable_output_stream_writev_nonblocking)(GPollableOutputStream * stream, const GOutputVector * vectors, gsize n_vectors, gsize * bytes_written, GCancellable * cancellable, GError * * error);
GSource * (g_pollable_source_new)(GObject * pollable_stream);
GSource * (g_pollable_source_new_full)(gpointer pollable_stream, GSource * child_source, GCancellable * cancellable);
gssize (g_pollable_stream_read)(GInputStream * stream, void * buffer, gsize count, gboolean blocking, GCancellable * cancellable, GError * * error);
gssize (g_pollable_stream_write)(GOutputStream * stream, const void * buffer, gsize count, gboolean blocking, GCancellable * cancellable, GError * * error);
gboolean (g_pollable_stream_write_all)(GOutputStream * stream, const void * buffer, gsize count, gboolean blocking, gsize * bytes_written, GCancellable * cancellable, GError * * error);
GType (g_power_profile_monitor_get_type)(void);
GPowerProfileMonitor * (g_power_profile_monitor_dup_default)(void);
gboolean (g_power_profile_monitor_get_power_saver_enabled)(GPowerProfileMonitor * monitor);
GType (g_property_action_get_type)(void);
GPropertyAction * (g_property_action_new)(const gchar * name, gpointer object, const gchar * property_name);
GType (g_proxy_get_type)(void);
GProxy * (g_proxy_get_default_for_protocol)(const gchar * protocol);
GIOStream * (g_proxy_connect)(GProxy * proxy, GIOStream * connection, GProxyAddress * proxy_address, GCancellable * cancellable, GError * * error);
void (g_proxy_connect_async)(GProxy * proxy, GIOStream * connection, GProxyAddress * proxy_address, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GIOStream * (g_proxy_connect_finish)(GProxy * proxy, GAsyncResult * result, GError * * error);
gboolean (g_proxy_supports_hostname)(GProxy * proxy);
GType (g_proxy_address_get_type)(void);
GSocketAddress * (g_proxy_address_new)(GInetAddress * inetaddr, guint16 port, const gchar * protocol, const gchar * dest_hostname, guint16 dest_port, const gchar * username, const gchar * password);
const gchar * (g_proxy_address_get_protocol)(GProxyAddress * proxy);
const gchar * (g_proxy_address_get_destination_protocol)(GProxyAddress * proxy);
const gchar * (g_proxy_address_get_destination_hostname)(GProxyAddress * proxy);
guint16 (g_proxy_address_get_destination_port)(GProxyAddress * proxy);
const gchar * (g_proxy_address_get_username)(GProxyAddress * proxy);
const gchar * (g_proxy_address_get_password)(GProxyAddress * proxy);
const gchar * (g_proxy_address_get_uri)(GProxyAddress * proxy);
GType (g_socket_address_enumerator_get_type)(void);
GSocketAddress * (g_socket_address_enumerator_next)(GSocketAddressEnumerator * enumerator, GCancellable * cancellable, GError * * error);
void (g_socket_address_enumerator_next_async)(GSocketAddressEnumerator * enumerator, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketAddress * (g_socket_address_enumerator_next_finish)(GSocketAddressEnumerator * enumerator, GAsyncResult * result, GError * * error);
GType (g_proxy_address_enumerator_get_type)(void);
GType (g_proxy_resolver_get_type)(void);
GProxyResolver * (g_proxy_resolver_get_default)(void);
gboolean (g_proxy_resolver_is_supported)(GProxyResolver * resolver);
gchar * * (g_proxy_resolver_lookup)(GProxyResolver * resolver, const gchar * uri, GCancellable * cancellable, GError * * error);
void (g_proxy_resolver_lookup_async)(GProxyResolver * resolver, const gchar * uri, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gchar * * (g_proxy_resolver_lookup_finish)(GProxyResolver * resolver, GAsyncResult * result, GError * * error);
GType (g_remote_action_group_get_type)(void);
void (g_remote_action_group_activate_action_full)(GRemoteActionGroup * remote, const gchar * action_name, GVariant * parameter, GVariant * platform_data);
void (g_remote_action_group_change_action_state_full)(GRemoteActionGroup * remote, const gchar * action_name, GVariant * value, GVariant * platform_data);
GType (g_resolver_get_type)(void);
GResolver * (g_resolver_get_default)(void);
void (g_resolver_set_default)(GResolver * resolver);
GList * (g_resolver_lookup_by_name)(GResolver * resolver, const gchar * hostname, GCancellable * cancellable, GError * * error);
void (g_resolver_lookup_by_name_async)(GResolver * resolver, const gchar * hostname, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList * (g_resolver_lookup_by_name_finish)(GResolver * resolver, GAsyncResult * result, GError * * error);
void (g_resolver_lookup_by_name_with_flags_async)(GResolver * resolver, const gchar * hostname, GResolverNameLookupFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList * (g_resolver_lookup_by_name_with_flags_finish)(GResolver * resolver, GAsyncResult * result, GError * * error);
GList * (g_resolver_lookup_by_name_with_flags)(GResolver * resolver, const gchar * hostname, GResolverNameLookupFlags flags, GCancellable * cancellable, GError * * error);
void (g_resolver_free_addresses)(GList * addresses);
gchar * (g_resolver_lookup_by_address)(GResolver * resolver, GInetAddress * address, GCancellable * cancellable, GError * * error);
void (g_resolver_lookup_by_address_async)(GResolver * resolver, GInetAddress * address, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gchar * (g_resolver_lookup_by_address_finish)(GResolver * resolver, GAsyncResult * result, GError * * error);
GList * (g_resolver_lookup_service)(GResolver * resolver, const gchar * service, const gchar * protocol, const gchar * domain, GCancellable * cancellable, GError * * error);
void (g_resolver_lookup_service_async)(GResolver * resolver, const gchar * service, const gchar * protocol, const gchar * domain, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList * (g_resolver_lookup_service_finish)(GResolver * resolver, GAsyncResult * result, GError * * error);
GList * (g_resolver_lookup_records)(GResolver * resolver, const gchar * rrname, GResolverRecordType record_type, GCancellable * cancellable, GError * * error);
void (g_resolver_lookup_records_async)(GResolver * resolver, const gchar * rrname, GResolverRecordType record_type, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList * (g_resolver_lookup_records_finish)(GResolver * resolver, GAsyncResult * result, GError * * error);
void (g_resolver_free_targets)(GList * targets);
unsigned int (g_resolver_get_timeout)(GResolver * resolver);
void (g_resolver_set_timeout)(GResolver * resolver, unsigned int timeout_ms);
GQuark (g_resolver_error_quark)(void);
GQuark (g_resource_error_quark)(void);
GType (g_resource_get_type)(void);
GResource * (g_resource_new_from_data)(GBytes * data, GError * * error);
GResource * (g_resource_ref)(GResource * resource);
void (g_resource_unref)(GResource * resource);
GResource * (g_resource_load)(const gchar * filename, GError * * error);
GInputStream * (g_resource_open_stream)(GResource * resource, const char * path, GResourceLookupFlags lookup_flags, GError * * error);
GBytes * (g_resource_lookup_data)(GResource * resource, const char * path, GResourceLookupFlags lookup_flags, GError * * error);
char * * (g_resource_enumerate_children)(GResource * resource, const char * path, GResourceLookupFlags lookup_flags, GError * * error);
gboolean (g_resource_get_info)(GResource * resource, const char * path, GResourceLookupFlags lookup_flags, gsize * size, guint32 * flags, GError * * error);
void (g_resources_register)(GResource * resource);
void (g_resources_unregister)(GResource * resource);
GInputStream * (g_resources_open_stream)(const char * path, GResourceLookupFlags lookup_flags, GError * * error);
GBytes * (g_resources_lookup_data)(const char * path, GResourceLookupFlags lookup_flags, GError * * error);
char * * (g_resources_enumerate_children)(const char * path, GResourceLookupFlags lookup_flags, GError * * error);
gboolean (g_resources_get_info)(const char * path, GResourceLookupFlags lookup_flags, gsize * size, guint32 * flags, GError * * error);
void (g_static_resource_init)(GStaticResource * static_resource);
void (g_static_resource_fini)(GStaticResource * static_resource);
GResource * (g_static_resource_get_resource)(GStaticResource * static_resource);
GType (g_seekable_get_type)(void);
goffset (g_seekable_tell)(GSeekable * seekable);
gboolean (g_seekable_can_seek)(GSeekable * seekable);
gboolean (g_seekable_seek)(GSeekable * seekable, goffset offset, GSeekType type, GCancellable * cancellable, GError * * error);
gboolean (g_seekable_can_truncate)(GSeekable * seekable);
gboolean (g_seekable_truncate)(GSeekable * seekable, goffset offset, GCancellable * cancellable, GError * * error);
GType (g_settings_schema_source_get_type)(void);
GSettingsSchemaSource * (g_settings_schema_source_get_default)(void);
GSettingsSchemaSource * (g_settings_schema_source_ref)(GSettingsSchemaSource * source);
void (g_settings_schema_source_unref)(GSettingsSchemaSource * source);
GSettingsSchemaSource * (g_settings_schema_source_new_from_directory)(const gchar * directory, GSettingsSchemaSource * parent, gboolean trusted, GError * * error);
GSettingsSchema * (g_settings_schema_source_lookup)(GSettingsSchemaSource * source, const gchar * schema_id, gboolean recursive);
void (g_settings_schema_source_list_schemas)(GSettingsSchemaSource * source, gboolean recursive, gchar * * * non_relocatable, gchar * * * relocatable);
GType (g_settings_schema_get_type)(void);
GSettingsSchema * (g_settings_schema_ref)(GSettingsSchema * schema);
void (g_settings_schema_unref)(GSettingsSchema * schema);
const gchar * (g_settings_schema_get_id)(GSettingsSchema * schema);
const gchar * (g_settings_schema_get_path)(GSettingsSchema * schema);
GSettingsSchemaKey * (g_settings_schema_get_key)(GSettingsSchema * schema, const gchar * name);
gboolean (g_settings_schema_has_key)(GSettingsSchema * schema, const gchar * name);
gchar * * (g_settings_schema_list_keys)(GSettingsSchema * schema);
gchar * * (g_settings_schema_list_children)(GSettingsSchema * schema);
GType (g_settings_schema_key_get_type)(void);
GSettingsSchemaKey * (g_settings_schema_key_ref)(GSettingsSchemaKey * key);
void (g_settings_schema_key_unref)(GSettingsSchemaKey * key);
const GVariantType * (g_settings_schema_key_get_value_type)(GSettingsSchemaKey * key);
GVariant * (g_settings_schema_key_get_default_value)(GSettingsSchemaKey * key);
GVariant * (g_settings_schema_key_get_range)(GSettingsSchemaKey * key);
gboolean (g_settings_schema_key_range_check)(GSettingsSchemaKey * key, GVariant * value);
const gchar * (g_settings_schema_key_get_name)(GSettingsSchemaKey * key);
const gchar * (g_settings_schema_key_get_summary)(GSettingsSchemaKey * key);
const gchar * (g_settings_schema_key_get_description)(GSettingsSchemaKey * key);
GType (g_settings_get_type)(void);
const gchar * const * (g_settings_list_schemas)(void);
const gchar * const * (g_settings_list_relocatable_schemas)(void);
GSettings * (g_settings_new)(const gchar * schema_id);
GSettings * (g_settings_new_with_path)(const gchar * schema_id, const gchar * path);
GSettings * (g_settings_new_with_backend)(const gchar * schema_id, GSettingsBackend * backend);
GSettings * (g_settings_new_with_backend_and_path)(const gchar * schema_id, GSettingsBackend * backend, const gchar * path);
GSettings * (g_settings_new_full)(GSettingsSchema * schema, GSettingsBackend * backend, const gchar * path);
gchar * * (g_settings_list_children)(GSettings * settings);
gchar * * (g_settings_list_keys)(GSettings * settings);
GVariant * (g_settings_get_range)(GSettings * settings, const gchar * key);
gboolean (g_settings_range_check)(GSettings * settings, const gchar * key, GVariant * value);
gboolean (g_settings_set_value)(GSettings * settings, const gchar * key, GVariant * value);
GVariant * (g_settings_get_value)(GSettings * settings, const gchar * key);
GVariant * (g_settings_get_user_value)(GSettings * settings, const gchar * key);
GVariant * (g_settings_get_default_value)(GSettings * settings, const gchar * key);
void (g_settings_reset)(GSettings * settings, const gchar * key);
gint (g_settings_get_int)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_int)(GSettings * settings, const gchar * key, gint value);
gint64 (g_settings_get_int64)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_int64)(GSettings * settings, const gchar * key, gint64 value);
guint (g_settings_get_uint)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_uint)(GSettings * settings, const gchar * key, guint value);
guint64 (g_settings_get_uint64)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_uint64)(GSettings * settings, const gchar * key, guint64 value);
gchar * (g_settings_get_string)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_string)(GSettings * settings, const gchar * key, const gchar * value);
gboolean (g_settings_get_boolean)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_boolean)(GSettings * settings, const gchar * key, gboolean value);
gdouble (g_settings_get_double)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_double)(GSettings * settings, const gchar * key, gdouble value);
gchar * * (g_settings_get_strv)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_strv)(GSettings * settings, const gchar * key, const gchar * const * value);
gint (g_settings_get_enum)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_enum)(GSettings * settings, const gchar * key, gint value);
guint (g_settings_get_flags)(GSettings * settings, const gchar * key);
gboolean (g_settings_set_flags)(GSettings * settings, const gchar * key, guint value);
GSettings * (g_settings_get_child)(GSettings * settings, const gchar * name);
gboolean (g_settings_is_writable)(GSettings * settings, const gchar * name);
void (g_settings_delay)(GSettings * settings);
void (g_settings_apply)(GSettings * settings);
void (g_settings_revert)(GSettings * settings);
gboolean (g_settings_get_has_unapplied)(GSettings * settings);
void (g_settings_sync)(void);
void (g_settings_bind)(GSettings * settings, const gchar * key, gpointer object, const gchar * property, GSettingsBindFlags flags);
void (g_settings_bind_with_mapping)(GSettings * settings, const gchar * key, gpointer object, const gchar * property, GSettingsBindFlags flags, GSettingsBindGetMapping get_mapping, GSettingsBindSetMapping set_mapping, gpointer user_data, GDestroyNotify destroy);
void (g_settings_bind_with_mapping_closures)(GSettings * settings, const char * key, GObject * object, const char * property, GSettingsBindFlags flags, GClosure * get_mapping, GClosure * set_mapping);
void (g_settings_bind_writable)(GSettings * settings, const gchar * key, gpointer object, const gchar * property, gboolean inverted);
void (g_settings_unbind)(gpointer object, const gchar * property);
GAction * (g_settings_create_action)(GSettings * settings, const gchar * key);
gpointer (g_settings_get_mapped)(GSettings * settings, const gchar * key, GSettingsGetMapping mapping, gpointer user_data);
GType (g_simple_action_get_type)(void);
GSimpleAction * (g_simple_action_new)(const gchar * name, const GVariantType * parameter_type);
GSimpleAction * (g_simple_action_new_stateful)(const gchar * name, const GVariantType * parameter_type, GVariant * state);
void (g_simple_action_set_enabled)(GSimpleAction * simple, gboolean enabled);
void (g_simple_action_set_state)(GSimpleAction * simple, GVariant * value);
void (g_simple_action_set_state_hint)(GSimpleAction * simple, GVariant * state_hint);
GType (g_simple_action_group_get_type)(void);
GSimpleActionGroup * (g_simple_action_group_new)(void);
GAction * (g_simple_action_group_lookup)(GSimpleActionGroup * simple, const gchar * action_name);
void (g_simple_action_group_insert)(GSimpleActionGroup * simple, GAction * action);
void (g_simple_action_group_remove)(GSimpleActionGroup * simple, const gchar * action_name);
void (g_simple_action_group_add_entries)(GSimpleActionGroup * simple, const GActionEntry * entries, gint n_entries, gpointer user_data);
GType (g_simple_async_result_get_type)(void);
GSimpleAsyncResult * (g_simple_async_result_new)(GObject * source_object, GAsyncReadyCallback callback, gpointer user_data, gpointer source_tag);
GSimpleAsyncResult * (g_simple_async_result_new_from_error)(GObject * source_object, GAsyncReadyCallback callback, gpointer user_data, const GError * error);
GSimpleAsyncResult * (g_simple_async_result_new_take_error)(GObject * source_object, GAsyncReadyCallback callback, gpointer user_data, GError * error);
void (g_simple_async_result_set_op_res_gpointer)(GSimpleAsyncResult * simple, gpointer op_res, GDestroyNotify destroy_op_res);
gpointer (g_simple_async_result_get_op_res_gpointer)(GSimpleAsyncResult * simple);
void (g_simple_async_result_set_op_res_gssize)(GSimpleAsyncResult * simple, gssize op_res);
gssize (g_simple_async_result_get_op_res_gssize)(GSimpleAsyncResult * simple);
void (g_simple_async_result_set_op_res_gboolean)(GSimpleAsyncResult * simple, gboolean op_res);
gboolean (g_simple_async_result_get_op_res_gboolean)(GSimpleAsyncResult * simple);
void (g_simple_async_result_set_check_cancellable)(GSimpleAsyncResult * simple, GCancellable * check_cancellable);
gpointer (g_simple_async_result_get_source_tag)(GSimpleAsyncResult * simple);
void (g_simple_async_result_set_handle_cancellation)(GSimpleAsyncResult * simple, gboolean handle_cancellation);
void (g_simple_async_result_complete)(GSimpleAsyncResult * simple);
void (g_simple_async_result_complete_in_idle)(GSimpleAsyncResult * simple);
void (g_simple_async_result_run_in_thread)(GSimpleAsyncResult * simple, GSimpleAsyncThreadFunc func, int io_priority, GCancellable * cancellable);
void (g_simple_async_result_set_from_error)(GSimpleAsyncResult * simple, const GError * error);
void (g_simple_async_result_take_error)(GSimpleAsyncResult * simple, GError * error);
gboolean (g_simple_async_result_propagate_error)(GSimpleAsyncResult * simple, GError * * dest);
void (g_simple_async_result_set_error)(GSimpleAsyncResult * simple, GQuark domain, gint code, const char * format, ...);
void (g_simple_async_result_set_error_va)(GSimpleAsyncResult * simple, GQuark domain, gint code, const char * format, va_list args);
gboolean (g_simple_async_result_is_valid)(GAsyncResult * result, GObject * source, gpointer source_tag);
void (g_simple_async_report_gerror_in_idle)(GObject * object, GAsyncReadyCallback callback, gpointer user_data, const GError * error);
void (g_simple_async_report_take_gerror_in_idle)(GObject * object, GAsyncReadyCallback callback, gpointer user_data, GError * error);
GType (g_simple_io_stream_get_type)(void);
GIOStream * (g_simple_io_stream_new)(GInputStream * input_stream, GOutputStream * output_stream);
GType (g_simple_permission_get_type)(void);
GPermission * (g_simple_permission_new)(gboolean allowed);
GType (g_simple_proxy_resolver_get_type)(void);
GProxyResolver * (g_simple_proxy_resolver_new)(const gchar * default_proxy, gchar * * ignore_hosts);
void (g_simple_proxy_resolver_set_default_proxy)(GSimpleProxyResolver * resolver, const gchar * default_proxy);
void (g_simple_proxy_resolver_set_ignore_hosts)(GSimpleProxyResolver * resolver, gchar * * ignore_hosts);
void (g_simple_proxy_resolver_set_uri_proxy)(GSimpleProxyResolver * resolver, const gchar * uri_scheme, const gchar * proxy);
GType (g_socket_get_type)(void);
GSocket * (g_socket_new)(GSocketFamily family, GSocketType type, GSocketProtocol protocol, GError * * error);
GSocket * (g_socket_new_from_fd)(gint fd, GError * * error);
int (g_socket_get_fd)(GSocket * socket);
GSocketFamily (g_socket_get_family)(GSocket * socket);
GSocketType (g_socket_get_socket_type)(GSocket * socket);
GSocketProtocol (g_socket_get_protocol)(GSocket * socket);
GSocketAddress * (g_socket_get_local_address)(GSocket * socket, GError * * error);
GSocketAddress * (g_socket_get_remote_address)(GSocket * socket, GError * * error);
void (g_socket_set_blocking)(GSocket * socket, gboolean blocking);
gboolean (g_socket_get_blocking)(GSocket * socket);
void (g_socket_set_keepalive)(GSocket * socket, gboolean keepalive);
gboolean (g_socket_get_keepalive)(GSocket * socket);
gint (g_socket_get_listen_backlog)(GSocket * socket);
void (g_socket_set_listen_backlog)(GSocket * socket, gint backlog);
guint (g_socket_get_timeout)(GSocket * socket);
void (g_socket_set_timeout)(GSocket * socket, guint timeout);
guint (g_socket_get_ttl)(GSocket * socket);
void (g_socket_set_ttl)(GSocket * socket, guint ttl);
gboolean (g_socket_get_broadcast)(GSocket * socket);
void (g_socket_set_broadcast)(GSocket * socket, gboolean broadcast);
gboolean (g_socket_get_multicast_loopback)(GSocket * socket);
void (g_socket_set_multicast_loopback)(GSocket * socket, gboolean loopback);
guint (g_socket_get_multicast_ttl)(GSocket * socket);
void (g_socket_set_multicast_ttl)(GSocket * socket, guint ttl);
gboolean (g_socket_is_connected)(GSocket * socket);
gboolean (g_socket_bind)(GSocket * socket, GSocketAddress * address, gboolean allow_reuse, GError * * error);
gboolean (g_socket_join_multicast_group)(GSocket * socket, GInetAddress * group, gboolean source_specific, const gchar * iface, GError * * error);
gboolean (g_socket_leave_multicast_group)(GSocket * socket, GInetAddress * group, gboolean source_specific, const gchar * iface, GError * * error);
gboolean (g_socket_join_multicast_group_ssm)(GSocket * socket, GInetAddress * group, GInetAddress * source_specific, const gchar * iface, GError * * error);
gboolean (g_socket_leave_multicast_group_ssm)(GSocket * socket, GInetAddress * group, GInetAddress * source_specific, const gchar * iface, GError * * error);
gboolean (g_socket_connect)(GSocket * socket, GSocketAddress * address, GCancellable * cancellable, GError * * error);
gboolean (g_socket_check_connect_result)(GSocket * socket, GError * * error);
gssize (g_socket_get_available_bytes)(GSocket * socket);
GIOCondition (g_socket_condition_check)(GSocket * socket, GIOCondition condition);
gboolean (g_socket_condition_wait)(GSocket * socket, GIOCondition condition, GCancellable * cancellable, GError * * error);
gboolean (g_socket_condition_timed_wait)(GSocket * socket, GIOCondition condition, gint64 timeout_us, GCancellable * cancellable, GError * * error);
GSocket * (g_socket_accept)(GSocket * socket, GCancellable * cancellable, GError * * error);
gboolean (g_socket_listen)(GSocket * socket, GError * * error);
gssize (g_socket_receive)(GSocket * socket, gchar * buffer, gsize size, GCancellable * cancellable, GError * * error);
GBytes * (g_socket_receive_bytes)(GSocket * socket, gsize size, gint64 timeout_us, GCancellable * cancellable, GError * * error);
gssize (g_socket_receive_from)(GSocket * socket, GSocketAddress * * address, gchar * buffer, gsize size, GCancellable * cancellable, GError * * error);
GBytes * (g_socket_receive_bytes_from)(GSocket * socket, GSocketAddress * * address, gsize size, gint64 timeout_us, GCancellable * cancellable, GError * * error);
gssize (g_socket_send)(GSocket * socket, const gchar * buffer, gsize size, GCancellable * cancellable, GError * * error);
gssize (g_socket_send_to)(GSocket * socket, GSocketAddress * address, const gchar * buffer, gsize size, GCancellable * cancellable, GError * * error);
gssize (g_socket_receive_message)(GSocket * socket, GSocketAddress * * address, GInputVector * vectors, gint num_vectors, GSocketControlMessage * * * messages, gint * num_messages, gint * flags, GCancellable * cancellable, GError * * error);
gssize (g_socket_send_message)(GSocket * socket, GSocketAddress * address, GOutputVector * vectors, gint num_vectors, GSocketControlMessage * * messages, gint num_messages, gint flags, GCancellable * cancellable, GError * * error);
gint (g_socket_receive_messages)(GSocket * socket, GInputMessage * messages, guint num_messages, gint flags, GCancellable * cancellable, GError * * error);
gint (g_socket_send_messages)(GSocket * socket, GOutputMessage * messages, guint num_messages, gint flags, GCancellable * cancellable, GError * * error);
gboolean (g_socket_close)(GSocket * socket, GError * * error);
gboolean (g_socket_shutdown)(GSocket * socket, gboolean shutdown_read, gboolean shutdown_write, GError * * error);
gboolean (g_socket_is_closed)(GSocket * socket);
GSource * (g_socket_create_source)(GSocket * socket, GIOCondition condition, GCancellable * cancellable);
gboolean (g_socket_speaks_ipv4)(GSocket * socket);
GCredentials * (g_socket_get_credentials)(GSocket * socket, GError * * error);
gssize (g_socket_receive_with_blocking)(GSocket * socket, gchar * buffer, gsize size, gboolean blocking, GCancellable * cancellable, GError * * error);
gssize (g_socket_send_with_blocking)(GSocket * socket, const gchar * buffer, gsize size, gboolean blocking, GCancellable * cancellable, GError * * error);
GPollableReturn (g_socket_send_message_with_timeout)(GSocket * socket, GSocketAddress * address, const GOutputVector * vectors, gint num_vectors, GSocketControlMessage * * messages, gint num_messages, gint flags, gint64 timeout_us, gsize * bytes_written, GCancellable * cancellable, GError * * error);
gboolean (g_socket_get_option)(GSocket * socket, gint level, gint optname, gint * value, GError * * error);
gboolean (g_socket_set_option)(GSocket * socket, gint level, gint optname, gint value, GError * * error);
GType (g_socket_client_get_type)(void);
GSocketClient * (g_socket_client_new)(void);
GSocketFamily (g_socket_client_get_family)(GSocketClient * client);
void (g_socket_client_set_family)(GSocketClient * client, GSocketFamily family);
GSocketType (g_socket_client_get_socket_type)(GSocketClient * client);
void (g_socket_client_set_socket_type)(GSocketClient * client, GSocketType type);
GSocketProtocol (g_socket_client_get_protocol)(GSocketClient * client);
void (g_socket_client_set_protocol)(GSocketClient * client, GSocketProtocol protocol);
GSocketAddress * (g_socket_client_get_local_address)(GSocketClient * client);
void (g_socket_client_set_local_address)(GSocketClient * client, GSocketAddress * address);
guint (g_socket_client_get_timeout)(GSocketClient * client);
void (g_socket_client_set_timeout)(GSocketClient * client, guint timeout);
gboolean (g_socket_client_get_enable_proxy)(GSocketClient * client);
void (g_socket_client_set_enable_proxy)(GSocketClient * client, gboolean enable);
gboolean (g_socket_client_get_tls)(GSocketClient * client);
void (g_socket_client_set_tls)(GSocketClient * client, gboolean tls);
GTlsCertificateFlags (g_socket_client_get_tls_validation_flags)(GSocketClient * client);
void (g_socket_client_set_tls_validation_flags)(GSocketClient * client, GTlsCertificateFlags flags);
GProxyResolver * (g_socket_client_get_proxy_resolver)(GSocketClient * client);
void (g_socket_client_set_proxy_resolver)(GSocketClient * client, GProxyResolver * proxy_resolver);
GSocketConnection * (g_socket_client_connect)(GSocketClient * client, GSocketConnectable * connectable, GCancellable * cancellable, GError * * error);
GSocketConnection * (g_socket_client_connect_to_host)(GSocketClient * client, const gchar * host_and_port, guint16 default_port, GCancellable * cancellable, GError * * error);
GSocketConnection * (g_socket_client_connect_to_service)(GSocketClient * client, const gchar * domain, const gchar * service, GCancellable * cancellable, GError * * error);
GSocketConnection * (g_socket_client_connect_to_uri)(GSocketClient * client, const gchar * uri, guint16 default_port, GCancellable * cancellable, GError * * error);
void (g_socket_client_connect_async)(GSocketClient * client, GSocketConnectable * connectable, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_client_connect_finish)(GSocketClient * client, GAsyncResult * result, GError * * error);
void (g_socket_client_connect_to_host_async)(GSocketClient * client, const gchar * host_and_port, guint16 default_port, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_client_connect_to_host_finish)(GSocketClient * client, GAsyncResult * result, GError * * error);
void (g_socket_client_connect_to_service_async)(GSocketClient * client, const gchar * domain, const gchar * service, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_client_connect_to_service_finish)(GSocketClient * client, GAsyncResult * result, GError * * error);
void (g_socket_client_connect_to_uri_async)(GSocketClient * client, const gchar * uri, guint16 default_port, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_client_connect_to_uri_finish)(GSocketClient * client, GAsyncResult * result, GError * * error);
void (g_socket_client_add_application_proxy)(GSocketClient * client, const gchar * protocol);
GType (g_socket_connectable_get_type)(void);
GSocketAddressEnumerator * (g_socket_connectable_enumerate)(GSocketConnectable * connectable);
GSocketAddressEnumerator * (g_socket_connectable_proxy_enumerate)(GSocketConnectable * connectable);
gchar * (g_socket_connectable_to_string)(GSocketConnectable * connectable);
GType (g_socket_connection_get_type)(void);
gboolean (g_socket_connection_is_connected)(GSocketConnection * connection);
gboolean (g_socket_connection_connect)(GSocketConnection * connection, GSocketAddress * address, GCancellable * cancellable, GError * * error);
void (g_socket_connection_connect_async)(GSocketConnection * connection, GSocketAddress * address, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_socket_connection_connect_finish)(GSocketConnection * connection, GAsyncResult * result, GError * * error);
GSocket * (g_socket_connection_get_socket)(GSocketConnection * connection);
GSocketAddress * (g_socket_connection_get_local_address)(GSocketConnection * connection, GError * * error);
GSocketAddress * (g_socket_connection_get_remote_address)(GSocketConnection * connection, GError * * error);
void (g_socket_connection_factory_register_type)(GType g_type, GSocketFamily family, GSocketType type, gint protocol);
GType (g_socket_connection_factory_lookup_type)(GSocketFamily family, GSocketType type, gint protocol_id);
GSocketConnection * (g_socket_connection_factory_create_connection)(GSocket * socket);
GType (g_socket_control_message_get_type)(void);
gsize (g_socket_control_message_get_size)(GSocketControlMessage * message);
int (g_socket_control_message_get_level)(GSocketControlMessage * message);
int (g_socket_control_message_get_msg_type)(GSocketControlMessage * message);
void (g_socket_control_message_serialize)(GSocketControlMessage * message, gpointer data);
GSocketControlMessage * (g_socket_control_message_deserialize)(int level, int type, gsize size, gpointer data);
GType (g_socket_listener_get_type)(void);
GSocketListener * (g_socket_listener_new)(void);
void (g_socket_listener_set_backlog)(GSocketListener * listener, int listen_backlog);
gboolean (g_socket_listener_add_socket)(GSocketListener * listener, GSocket * socket, GObject * source_object, GError * * error);
gboolean (g_socket_listener_add_address)(GSocketListener * listener, GSocketAddress * address, GSocketType type, GSocketProtocol protocol, GObject * source_object, GSocketAddress * * effective_address, GError * * error);
gboolean (g_socket_listener_add_inet_port)(GSocketListener * listener, guint16 port, GObject * source_object, GError * * error);
guint16 (g_socket_listener_add_any_inet_port)(GSocketListener * listener, GObject * source_object, GError * * error);
GSocket * (g_socket_listener_accept_socket)(GSocketListener * listener, GObject * * source_object, GCancellable * cancellable, GError * * error);
void (g_socket_listener_accept_socket_async)(GSocketListener * listener, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocket * (g_socket_listener_accept_socket_finish)(GSocketListener * listener, GAsyncResult * result, GObject * * source_object, GError * * error);
GSocketConnection * (g_socket_listener_accept)(GSocketListener * listener, GObject * * source_object, GCancellable * cancellable, GError * * error);
void (g_socket_listener_accept_async)(GSocketListener * listener, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_listener_accept_finish)(GSocketListener * listener, GAsyncResult * result, GObject * * source_object, GError * * error);
void (g_socket_listener_close)(GSocketListener * listener);
GType (g_socket_service_get_type)(void);
GSocketService * (g_socket_service_new)(void);
void (g_socket_service_start)(GSocketService * service);
void (g_socket_service_stop)(GSocketService * service);
gboolean (g_socket_service_is_active)(GSocketService * service);
GType (g_srv_target_get_type)(void);
GSrvTarget * (g_srv_target_new)(const gchar * hostname, guint16 port, guint16 priority, guint16 weight);
GSrvTarget * (g_srv_target_copy)(GSrvTarget * target);
void (g_srv_target_free)(GSrvTarget * target);
const gchar * (g_srv_target_get_hostname)(GSrvTarget * target);
guint16 (g_srv_target_get_port)(GSrvTarget * target);
guint16 (g_srv_target_get_priority)(GSrvTarget * target);
guint16 (g_srv_target_get_weight)(GSrvTarget * target);
GList * (g_srv_target_list_sort)(GList * targets);
GType (g_subprocess_get_type)(void);
GSubprocess * (g_subprocess_newv)(const gchar * const * argv, GSubprocessFlags flags, GError * * error);
GOutputStream * (g_subprocess_get_stdin_pipe)(GSubprocess * subprocess);
GInputStream * (g_subprocess_get_stdout_pipe)(GSubprocess * subprocess);
GInputStream * (g_subprocess_get_stderr_pipe)(GSubprocess * subprocess);
const gchar * (g_subprocess_get_identifier)(GSubprocess * subprocess);
void (g_subprocess_send_signal)(GSubprocess * subprocess, gint signal_num);
void (g_subprocess_force_exit)(GSubprocess * subprocess);
gboolean (g_subprocess_wait)(GSubprocess * subprocess, GCancellable * cancellable, GError * * error);
void (g_subprocess_wait_async)(GSubprocess * subprocess, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_subprocess_wait_finish)(GSubprocess * subprocess, GAsyncResult * result, GError * * error);
gboolean (g_subprocess_wait_check)(GSubprocess * subprocess, GCancellable * cancellable, GError * * error);
void (g_subprocess_wait_check_async)(GSubprocess * subprocess, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_subprocess_wait_check_finish)(GSubprocess * subprocess, GAsyncResult * result, GError * * error);
gint (g_subprocess_get_status)(GSubprocess * subprocess);
gboolean (g_subprocess_get_successful)(GSubprocess * subprocess);
gboolean (g_subprocess_get_if_exited)(GSubprocess * subprocess);
gint (g_subprocess_get_exit_status)(GSubprocess * subprocess);
gboolean (g_subprocess_get_if_signaled)(GSubprocess * subprocess);
gint (g_subprocess_get_term_sig)(GSubprocess * subprocess);
gboolean (g_subprocess_communicate)(GSubprocess * subprocess, GBytes * stdin_buf, GCancellable * cancellable, GBytes * * stdout_buf, GBytes * * stderr_buf, GError * * error);
void (g_subprocess_communicate_async)(GSubprocess * subprocess, GBytes * stdin_buf, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_subprocess_communicate_finish)(GSubprocess * subprocess, GAsyncResult * result, GBytes * * stdout_buf, GBytes * * stderr_buf, GError * * error);
gboolean (g_subprocess_communicate_utf8)(GSubprocess * subprocess, const char * stdin_buf, GCancellable * cancellable, char * * stdout_buf, char * * stderr_buf, GError * * error);
void (g_subprocess_communicate_utf8_async)(GSubprocess * subprocess, const char * stdin_buf, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_subprocess_communicate_utf8_finish)(GSubprocess * subprocess, GAsyncResult * result, char * * stdout_buf, char * * stderr_buf, GError * * error);
GType (g_subprocess_launcher_get_type)(void);
GSubprocessLauncher * (g_subprocess_launcher_new)(GSubprocessFlags flags);
GSubprocess * (g_subprocess_launcher_spawnv)(GSubprocessLauncher * self, const gchar * const * argv, GError * * error);
void (g_subprocess_launcher_set_environ)(GSubprocessLauncher * self, gchar * * env);
void (g_subprocess_launcher_setenv)(GSubprocessLauncher * self, const gchar * variable, const gchar * value, gboolean overwrite);
void (g_subprocess_launcher_unsetenv)(GSubprocessLauncher * self, const gchar * variable);
const gchar * (g_subprocess_launcher_getenv)(GSubprocessLauncher * self, const gchar * variable);
void (g_subprocess_launcher_set_cwd)(GSubprocessLauncher * self, const gchar * cwd);
void (g_subprocess_launcher_set_flags)(GSubprocessLauncher * self, GSubprocessFlags flags);
void (g_subprocess_launcher_set_stdin_file_path)(GSubprocessLauncher * self, const gchar * path);
void (g_subprocess_launcher_take_stdin_fd)(GSubprocessLauncher * self, gint fd);
void (g_subprocess_launcher_set_stdout_file_path)(GSubprocessLauncher * self, const gchar * path);
void (g_subprocess_launcher_take_stdout_fd)(GSubprocessLauncher * self, gint fd);
void (g_subprocess_launcher_set_stderr_file_path)(GSubprocessLauncher * self, const gchar * path);
void (g_subprocess_launcher_take_stderr_fd)(GSubprocessLauncher * self, gint fd);
void (g_subprocess_launcher_take_fd)(GSubprocessLauncher * self, gint source_fd, gint target_fd);
void (g_subprocess_launcher_close)(GSubprocessLauncher * self);
void (g_subprocess_launcher_set_child_setup)(GSubprocessLauncher * self, GSpawnChildSetupFunc child_setup, gpointer user_data, GDestroyNotify destroy_notify);
GType (g_task_get_type)(void);
GTask * (g_task_new)(gpointer source_object, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer callback_data);
void (g_task_report_error)(gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GError * error);
void (g_task_set_task_data)(GTask * task, gpointer task_data, GDestroyNotify task_data_destroy);
void (g_task_set_priority)(GTask * task, gint priority);
void (g_task_set_check_cancellable)(GTask * task, gboolean check_cancellable);
void (g_task_set_source_tag)(GTask * task, gpointer source_tag);
void (g_task_set_name)(GTask * task, const gchar * name);
void (g_task_set_static_name)(GTask * task, const gchar * name);
gpointer (g_task_get_source_object)(GTask * task);
gpointer (g_task_get_task_data)(GTask * task);
gint (g_task_get_priority)(GTask * task);
GMainContext * (g_task_get_context)(GTask * task);
GCancellable * (g_task_get_cancellable)(GTask * task);
gboolean (g_task_get_check_cancellable)(GTask * task);
gpointer (g_task_get_source_tag)(GTask * task);
const gchar * (g_task_get_name)(GTask * task);
gboolean (g_task_is_valid)(gpointer result, gpointer source_object);
void (g_task_run_in_thread)(GTask * task, GTaskThreadFunc task_func);
void (g_task_run_in_thread_sync)(GTask * task, GTaskThreadFunc task_func);
gboolean (g_task_set_return_on_cancel)(GTask * task, gboolean return_on_cancel);
gboolean (g_task_get_return_on_cancel)(GTask * task);
void (g_task_attach_source)(GTask * task, GSource * source, GSourceFunc callback);
void (g_task_return_pointer)(GTask * task, gpointer result, GDestroyNotify result_destroy);
void (g_task_return_boolean)(GTask * task, gboolean result);
void (g_task_return_int)(GTask * task, gssize result);
void (g_task_return_error)(GTask * task, GError * error);
void (g_task_return_new_error_literal)(GTask * task, GQuark domain, gint code, const char * message);
void (g_task_return_value)(GTask * task, GValue * result);
gboolean (g_task_return_error_if_cancelled)(GTask * task);
gpointer (g_task_propagate_pointer)(GTask * task, GError * * error);
gboolean (g_task_propagate_boolean)(GTask * task, GError * * error);
gssize (g_task_propagate_int)(GTask * task, GError * * error);
gboolean (g_task_propagate_value)(GTask * task, GValue * value, GError * * error);
gboolean (g_task_had_error)(GTask * task);
gboolean (g_task_get_completed)(GTask * task);
void (g_task_print_alive_tasks)(void);
GType (g_tcp_connection_get_type)(void);
void (g_tcp_connection_set_graceful_disconnect)(GTcpConnection * connection, gboolean graceful_disconnect);
gboolean (g_tcp_connection_get_graceful_disconnect)(GTcpConnection * connection);
GType (g_tcp_wrapper_connection_get_type)(void);
GSocketConnection * (g_tcp_wrapper_connection_new)(GIOStream * base_io_stream, GSocket * socket);
GIOStream * (g_tcp_wrapper_connection_get_base_io_stream)(GTcpWrapperConnection * conn);
GType (g_test_dbus_get_type)(void);
GTestDBus * (g_test_dbus_new)(GTestDBusFlags flags);
GTestDBusFlags (g_test_dbus_get_flags)(GTestDBus * self);
const gchar * (g_test_dbus_get_bus_address)(GTestDBus * self);
void (g_test_dbus_add_service_dir)(GTestDBus * self, const gchar * path);
void (g_test_dbus_up)(GTestDBus * self);
void (g_test_dbus_stop)(GTestDBus * self);
void (g_test_dbus_down)(GTestDBus * self);
void (g_test_dbus_unset)(void);
GType (g_themed_icon_get_type)(void);
GIcon * (g_themed_icon_new)(const char * iconname);
GIcon * (g_themed_icon_new_with_default_fallbacks)(const char * iconname);
GIcon * (g_themed_icon_new_from_names)(char * * iconnames, int len);
void (g_themed_icon_prepend_name)(GThemedIcon * icon, const char * iconname);
void (g_themed_icon_append_name)(GThemedIcon * icon, const char * iconname);
const gchar * const * (g_themed_icon_get_names)(GThemedIcon * icon);
GType (g_threaded_socket_service_get_type)(void);
GSocketService * (g_threaded_socket_service_new)(int max_threads);
GType (g_tls_backend_get_type)(void);
GTlsBackend * (g_tls_backend_get_default)(void);
GTlsDatabase * (g_tls_backend_get_default_database)(GTlsBackend * backend);
void (g_tls_backend_set_default_database)(GTlsBackend * backend, GTlsDatabase * database);
gboolean (g_tls_backend_supports_tls)(GTlsBackend * backend);
gboolean (g_tls_backend_supports_dtls)(GTlsBackend * backend);
GType (g_tls_backend_get_certificate_type)(GTlsBackend * backend);
GType (g_tls_backend_get_client_connection_type)(GTlsBackend * backend);
GType (g_tls_backend_get_server_connection_type)(GTlsBackend * backend);
GType (g_tls_backend_get_file_database_type)(GTlsBackend * backend);
GType (g_tls_backend_get_dtls_client_connection_type)(GTlsBackend * backend);
GType (g_tls_backend_get_dtls_server_connection_type)(GTlsBackend * backend);
GType (g_tls_certificate_get_type)(void);
GTlsCertificate * (g_tls_certificate_new_from_pem)(const gchar * data, gssize length, GError * * error);
GTlsCertificate * (g_tls_certificate_new_from_pkcs12)(const guint8 * data, gsize length, const gchar * password, GError * * error);
GTlsCertificate * (g_tls_certificate_new_from_file_with_password)(const gchar * file, const gchar * password, GError * * error);
GTlsCertificate * (g_tls_certificate_new_from_file)(const gchar * file, GError * * error);
GTlsCertificate * (g_tls_certificate_new_from_files)(const gchar * cert_file, const gchar * key_file, GError * * error);
GTlsCertificate * (g_tls_certificate_new_from_pkcs11_uris)(const gchar * pkcs11_uri, const gchar * private_key_pkcs11_uri, GError * * error);
GList * (g_tls_certificate_list_new_from_file)(const gchar * file, GError * * error);
GTlsCertificate * (g_tls_certificate_get_issuer)(GTlsCertificate * cert);
GTlsCertificateFlags (g_tls_certificate_verify)(GTlsCertificate * cert, GSocketConnectable * identity, GTlsCertificate * trusted_ca);
gboolean (g_tls_certificate_is_same)(GTlsCertificate * cert_one, GTlsCertificate * cert_two);
GDateTime * (g_tls_certificate_get_not_valid_before)(GTlsCertificate * cert);
GDateTime * (g_tls_certificate_get_not_valid_after)(GTlsCertificate * cert);
gchar * (g_tls_certificate_get_subject_name)(GTlsCertificate * cert);
gchar * (g_tls_certificate_get_issuer_name)(GTlsCertificate * cert);
GPtrArray * (g_tls_certificate_get_dns_names)(GTlsCertificate * cert);
GPtrArray * (g_tls_certificate_get_ip_addresses)(GTlsCertificate * cert);
GType (g_tls_connection_get_type)(void);
void (g_tls_connection_set_use_system_certdb)(GTlsConnection * conn, gboolean use_system_certdb);
gboolean (g_tls_connection_get_use_system_certdb)(GTlsConnection * conn);
void (g_tls_connection_set_database)(GTlsConnection * conn, GTlsDatabase * database);
GTlsDatabase * (g_tls_connection_get_database)(GTlsConnection * conn);
void (g_tls_connection_set_certificate)(GTlsConnection * conn, GTlsCertificate * certificate);
GTlsCertificate * (g_tls_connection_get_certificate)(GTlsConnection * conn);
void (g_tls_connection_set_interaction)(GTlsConnection * conn, GTlsInteraction * interaction);
GTlsInteraction * (g_tls_connection_get_interaction)(GTlsConnection * conn);
GTlsCertificate * (g_tls_connection_get_peer_certificate)(GTlsConnection * conn);
GTlsCertificateFlags (g_tls_connection_get_peer_certificate_errors)(GTlsConnection * conn);
void (g_tls_connection_set_require_close_notify)(GTlsConnection * conn, gboolean require_close_notify);
gboolean (g_tls_connection_get_require_close_notify)(GTlsConnection * conn);
void (g_tls_connection_set_rehandshake_mode)(GTlsConnection * conn, GTlsRehandshakeMode mode);
GTlsRehandshakeMode (g_tls_connection_get_rehandshake_mode)(GTlsConnection * conn);
void (g_tls_connection_set_advertised_protocols)(GTlsConnection * conn, const gchar * const * protocols);
const gchar * (g_tls_connection_get_negotiated_protocol)(GTlsConnection * conn);
gboolean (g_tls_connection_get_channel_binding_data)(GTlsConnection * conn, GTlsChannelBindingType type, GByteArray * data, GError * * error);
gboolean (g_tls_connection_handshake)(GTlsConnection * conn, GCancellable * cancellable, GError * * error);
void (g_tls_connection_handshake_async)(GTlsConnection * conn, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_tls_connection_handshake_finish)(GTlsConnection * conn, GAsyncResult * result, GError * * error);
GTlsProtocolVersion (g_tls_connection_get_protocol_version)(GTlsConnection * conn);
gchar * (g_tls_connection_get_ciphersuite_name)(GTlsConnection * conn);
GQuark (g_tls_error_quark)(void);
GQuark (g_tls_channel_binding_error_quark)(void);
gboolean (g_tls_connection_emit_accept_certificate)(GTlsConnection * conn, GTlsCertificate * peer_cert, GTlsCertificateFlags errors);
GType (g_tls_client_connection_get_type)(void);
GIOStream * (g_tls_client_connection_new)(GIOStream * base_io_stream, GSocketConnectable * server_identity, GError * * error);
GTlsCertificateFlags (g_tls_client_connection_get_validation_flags)(GTlsClientConnection * conn);
void (g_tls_client_connection_set_validation_flags)(GTlsClientConnection * conn, GTlsCertificateFlags flags);
GSocketConnectable * (g_tls_client_connection_get_server_identity)(GTlsClientConnection * conn);
void (g_tls_client_connection_set_server_identity)(GTlsClientConnection * conn, GSocketConnectable * identity);
gboolean (g_tls_client_connection_get_use_ssl3)(GTlsClientConnection * conn);
void (g_tls_client_connection_set_use_ssl3)(GTlsClientConnection * conn, gboolean use_ssl3);
GList * (g_tls_client_connection_get_accepted_cas)(GTlsClientConnection * conn);
void (g_tls_client_connection_copy_session_state)(GTlsClientConnection * conn, GTlsClientConnection * source);
GType (g_tls_database_get_type)(void);
GTlsCertificateFlags (g_tls_database_verify_chain)(GTlsDatabase * self, GTlsCertificate * chain, const gchar * purpose, GSocketConnectable * identity, GTlsInteraction * interaction, GTlsDatabaseVerifyFlags flags, GCancellable * cancellable, GError * * error);
void (g_tls_database_verify_chain_async)(GTlsDatabase * self, GTlsCertificate * chain, const gchar * purpose, GSocketConnectable * identity, GTlsInteraction * interaction, GTlsDatabaseVerifyFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsCertificateFlags (g_tls_database_verify_chain_finish)(GTlsDatabase * self, GAsyncResult * result, GError * * error);
gchar * (g_tls_database_create_certificate_handle)(GTlsDatabase * self, GTlsCertificate * certificate);
GTlsCertificate * (g_tls_database_lookup_certificate_for_handle)(GTlsDatabase * self, const gchar * handle, GTlsInteraction * interaction, GTlsDatabaseLookupFlags flags, GCancellable * cancellable, GError * * error);
void (g_tls_database_lookup_certificate_for_handle_async)(GTlsDatabase * self, const gchar * handle, GTlsInteraction * interaction, GTlsDatabaseLookupFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsCertificate * (g_tls_database_lookup_certificate_for_handle_finish)(GTlsDatabase * self, GAsyncResult * result, GError * * error);
GTlsCertificate * (g_tls_database_lookup_certificate_issuer)(GTlsDatabase * self, GTlsCertificate * certificate, GTlsInteraction * interaction, GTlsDatabaseLookupFlags flags, GCancellable * cancellable, GError * * error);
void (g_tls_database_lookup_certificate_issuer_async)(GTlsDatabase * self, GTlsCertificate * certificate, GTlsInteraction * interaction, GTlsDatabaseLookupFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsCertificate * (g_tls_database_lookup_certificate_issuer_finish)(GTlsDatabase * self, GAsyncResult * result, GError * * error);
GList * (g_tls_database_lookup_certificates_issued_by)(GTlsDatabase * self, GByteArray * issuer_raw_dn, GTlsInteraction * interaction, GTlsDatabaseLookupFlags flags, GCancellable * cancellable, GError * * error);
void (g_tls_database_lookup_certificates_issued_by_async)(GTlsDatabase * self, GByteArray * issuer_raw_dn, GTlsInteraction * interaction, GTlsDatabaseLookupFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList * (g_tls_database_lookup_certificates_issued_by_finish)(GTlsDatabase * self, GAsyncResult * result, GError * * error);
GType (g_tls_file_database_get_type)(void);
GTlsDatabase * (g_tls_file_database_new)(const gchar * anchors, GError * * error);
GType (g_tls_interaction_get_type)(void);
GTlsInteractionResult (g_tls_interaction_invoke_ask_password)(GTlsInteraction * interaction, GTlsPassword * password, GCancellable * cancellable, GError * * error);
GTlsInteractionResult (g_tls_interaction_ask_password)(GTlsInteraction * interaction, GTlsPassword * password, GCancellable * cancellable, GError * * error);
void (g_tls_interaction_ask_password_async)(GTlsInteraction * interaction, GTlsPassword * password, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsInteractionResult (g_tls_interaction_ask_password_finish)(GTlsInteraction * interaction, GAsyncResult * result, GError * * error);
GTlsInteractionResult (g_tls_interaction_invoke_request_certificate)(GTlsInteraction * interaction, GTlsConnection * connection, GTlsCertificateRequestFlags flags, GCancellable * cancellable, GError * * error);
GTlsInteractionResult (g_tls_interaction_request_certificate)(GTlsInteraction * interaction, GTlsConnection * connection, GTlsCertificateRequestFlags flags, GCancellable * cancellable, GError * * error);
void (g_tls_interaction_request_certificate_async)(GTlsInteraction * interaction, GTlsConnection * connection, GTlsCertificateRequestFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsInteractionResult (g_tls_interaction_request_certificate_finish)(GTlsInteraction * interaction, GAsyncResult * result, GError * * error);
GType (g_tls_password_get_type)(void);
GTlsPassword * (g_tls_password_new)(GTlsPasswordFlags flags, const gchar * description);
const guchar * (g_tls_password_get_value)(GTlsPassword * password, gsize * length);
void (g_tls_password_set_value)(GTlsPassword * password, const guchar * value, gssize length);
void (g_tls_password_set_value_full)(GTlsPassword * password, guchar * value, gssize length, GDestroyNotify destroy);
GTlsPasswordFlags (g_tls_password_get_flags)(GTlsPassword * password);
void (g_tls_password_set_flags)(GTlsPassword * password, GTlsPasswordFlags flags);
const gchar * (g_tls_password_get_description)(GTlsPassword * password);
void (g_tls_password_set_description)(GTlsPassword * password, const gchar * description);
const gchar * (g_tls_password_get_warning)(GTlsPassword * password);
void (g_tls_password_set_warning)(GTlsPassword * password, const gchar * warning);
GType (g_tls_server_connection_get_type)(void);
GIOStream * (g_tls_server_connection_new)(GIOStream * base_io_stream, GTlsCertificate * certificate, GError * * error);
GType (g_unix_connection_get_type)(void);
gboolean (g_unix_connection_send_fd)(GUnixConnection * connection, gint fd, GCancellable * cancellable, GError * * error);
gint (g_unix_connection_receive_fd)(GUnixConnection * connection, GCancellable * cancellable, GError * * error);
gboolean (g_unix_connection_send_credentials)(GUnixConnection * connection, GCancellable * cancellable, GError * * error);
void (g_unix_connection_send_credentials_async)(GUnixConnection * connection, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_unix_connection_send_credentials_finish)(GUnixConnection * connection, GAsyncResult * result, GError * * error);
GCredentials * (g_unix_connection_receive_credentials)(GUnixConnection * connection, GCancellable * cancellable, GError * * error);
void (g_unix_connection_receive_credentials_async)(GUnixConnection * connection, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GCredentials * (g_unix_connection_receive_credentials_finish)(GUnixConnection * connection, GAsyncResult * result, GError * * error);
GType (g_unix_credentials_message_get_type)(void);
GSocketControlMessage * (g_unix_credentials_message_new)(void);
GSocketControlMessage * (g_unix_credentials_message_new_with_credentials)(GCredentials * credentials);
GCredentials * (g_unix_credentials_message_get_credentials)(GUnixCredentialsMessage * message);
gboolean (g_unix_credentials_message_is_supported)(void);
GType (g_unix_fd_list_get_type)(void);
GUnixFDList * (g_unix_fd_list_new)(void);
GUnixFDList * (g_unix_fd_list_new_from_array)(const gint * fds, gint n_fds);
gint (g_unix_fd_list_append)(GUnixFDList * list, gint fd, GError * * error);
gint (g_unix_fd_list_get_length)(GUnixFDList * list);
gint (g_unix_fd_list_get)(GUnixFDList * list, gint index_, GError * * error);
const gint * (g_unix_fd_list_peek_fds)(GUnixFDList * list, gint * length);
gint * (g_unix_fd_list_steal_fds)(GUnixFDList * list, gint * length);
GType (g_unix_socket_address_get_type)(void);
GSocketAddress * (g_unix_socket_address_new)(const gchar * path);
GSocketAddress * (g_unix_socket_address_new_abstract)(const gchar * path, gint path_len);
GSocketAddress * (g_unix_socket_address_new_with_type)(const gchar * path, gint path_len, GUnixSocketAddressType type);
const char * (g_unix_socket_address_get_path)(GUnixSocketAddress * address);
gsize (g_unix_socket_address_get_path_len)(GUnixSocketAddress * address);
GUnixSocketAddressType (g_unix_socket_address_get_address_type)(GUnixSocketAddress * address);
gboolean (g_unix_socket_address_get_is_abstract)(GUnixSocketAddress * address);
gboolean (g_unix_socket_address_abstract_names_supported)(void);
GType (g_vfs_get_type)(void);
gboolean (g_vfs_is_active)(GVfs * vfs);
GFile * (g_vfs_get_file_for_path)(GVfs * vfs, const char * path);
GFile * (g_vfs_get_file_for_uri)(GVfs * vfs, const char * uri);
const gchar * const * (g_vfs_get_supported_uri_schemes)(GVfs * vfs);
GFile * (g_vfs_parse_name)(GVfs * vfs, const char * parse_name);
GVfs * (g_vfs_get_default)(void);
GVfs * (g_vfs_get_local)(void);
gboolean (g_vfs_register_uri_scheme)(GVfs * vfs, const char * scheme, GVfsFileLookupFunc uri_func, gpointer uri_data, GDestroyNotify uri_destroy, GVfsFileLookupFunc parse_name_func, gpointer parse_name_data, GDestroyNotify parse_name_destroy);
gboolean (g_vfs_unregister_uri_scheme)(GVfs * vfs, const char * scheme);
GType (g_volume_get_type)(void);
char * (g_volume_get_name)(GVolume * volume);
GIcon * (g_volume_get_icon)(GVolume * volume);
GIcon * (g_volume_get_symbolic_icon)(GVolume * volume);
char * (g_volume_get_uuid)(GVolume * volume);
GDrive * (g_volume_get_drive)(GVolume * volume);
GMount * (g_volume_get_mount)(GVolume * volume);
gboolean (g_volume_can_mount)(GVolume * volume);
gboolean (g_volume_can_eject)(GVolume * volume);
gboolean (g_volume_should_automount)(GVolume * volume);
void (g_volume_mount)(GVolume * volume, GMountMountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_volume_mount_finish)(GVolume * volume, GAsyncResult * result, GError * * error);
void (g_volume_eject)(GVolume * volume, GMountUnmountFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_volume_eject_finish)(GVolume * volume, GAsyncResult * result, GError * * error);
char * (g_volume_get_identifier)(GVolume * volume, const char * kind);
char * * (g_volume_enumerate_identifiers)(GVolume * volume);
GFile * (g_volume_get_activation_root)(GVolume * volume);
void (g_volume_eject_with_operation)(GVolume * volume, GMountUnmountFlags flags, GMountOperation * mount_operation, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_volume_eject_with_operation_finish)(GVolume * volume, GAsyncResult * result, GError * * error);
const gchar * (g_volume_get_sort_key)(GVolume * volume);
GType (g_zlib_compressor_get_type)(void);
GZlibCompressor * (g_zlib_compressor_new)(GZlibCompressorFormat format, int level);
GFileInfo * (g_zlib_compressor_get_file_info)(GZlibCompressor * compressor);
void (g_zlib_compressor_set_file_info)(GZlibCompressor * compressor, GFileInfo * file_info);
GType (g_zlib_decompressor_get_type)(void);
GZlibDecompressor * (g_zlib_decompressor_new)(GZlibCompressorFormat format);
GFileInfo * (g_zlib_decompressor_get_file_info)(GZlibDecompressor * decompressor);