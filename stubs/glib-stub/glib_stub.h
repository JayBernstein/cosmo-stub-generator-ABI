#include "../stub.h"
#include "glib.h"
#include "glib-unix.h"

void initialize_glib(void);
void close_glib(void);

GArray * (g_array_new)(gboolean zero_terminated, gboolean clear_, guint element_size);
GArray * (g_array_new_take)(gpointer data, gsize len, gboolean clear, gsize element_size);
GArray * (g_array_new_take_zero_terminated)(gpointer data, gboolean clear, gsize element_size);
gpointer (g_array_steal)(GArray * array, gsize * len);
GArray * (g_array_sized_new)(gboolean zero_terminated, gboolean clear_, guint element_size, guint reserved_size);
GArray * (g_array_copy)(GArray * array);
gchar * (g_array_free)(GArray * array, gboolean free_segment);
GArray * (g_array_ref)(GArray * array);
void (g_array_unref)(GArray * array);
guint (g_array_get_element_size)(GArray * array);
GArray * (g_array_append_vals)(GArray * array, gconstpointer data, guint len);
GArray * (g_array_prepend_vals)(GArray * array, gconstpointer data, guint len);
GArray * (g_array_insert_vals)(GArray * array, guint index_, gconstpointer data, guint len);
GArray * (g_array_set_size)(GArray * array, guint length);
GArray * (g_array_remove_index)(GArray * array, guint index_);
GArray * (g_array_remove_index_fast)(GArray * array, guint index_);
GArray * (g_array_remove_range)(GArray * array, guint index_, guint length);
void (g_array_sort)(GArray * array, GCompareFunc compare_func);
void (g_array_sort_with_data)(GArray * array, GCompareDataFunc compare_func, gpointer user_data);
gboolean (g_array_binary_search)(GArray * array, gconstpointer target, GCompareFunc compare_func, guint * out_match_index);
void (g_array_set_clear_func)(GArray * array, GDestroyNotify clear_func);
GPtrArray * (g_ptr_array_new)(void);
GPtrArray * (g_ptr_array_new_with_free_func)(GDestroyNotify element_free_func);
GPtrArray * (g_ptr_array_new_take)(gpointer * data, gsize len, GDestroyNotify element_free_func);
GPtrArray * (g_ptr_array_new_from_array)(gpointer * data, gsize len, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func);
gpointer * (g_ptr_array_steal)(GPtrArray * array, gsize * len);
GPtrArray * (g_ptr_array_copy)(GPtrArray * array, GCopyFunc func, gpointer user_data);
GPtrArray * (g_ptr_array_sized_new)(guint reserved_size);
GPtrArray * (g_ptr_array_new_full)(guint reserved_size, GDestroyNotify element_free_func);
GPtrArray * (g_ptr_array_new_null_terminated)(guint reserved_size, GDestroyNotify element_free_func, gboolean null_terminated);
GPtrArray * (g_ptr_array_new_take_null_terminated)(gpointer * data, GDestroyNotify element_free_func);
GPtrArray * (g_ptr_array_new_from_null_terminated_array)(gpointer * data, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func);
gpointer * (g_ptr_array_free)(GPtrArray * array, gboolean free_seg);
GPtrArray * (g_ptr_array_ref)(GPtrArray * array);
void (g_ptr_array_unref)(GPtrArray * array);
void (g_ptr_array_set_free_func)(GPtrArray * array, GDestroyNotify element_free_func);
void (g_ptr_array_set_size)(GPtrArray * array, gint length);
gpointer (g_ptr_array_remove_index)(GPtrArray * array, guint index_);
gpointer (g_ptr_array_remove_index_fast)(GPtrArray * array, guint index_);
gpointer (g_ptr_array_steal_index)(GPtrArray * array, guint index_);
gpointer (g_ptr_array_steal_index_fast)(GPtrArray * array, guint index_);
gboolean (g_ptr_array_remove)(GPtrArray * array, gpointer data);
gboolean (g_ptr_array_remove_fast)(GPtrArray * array, gpointer data);
GPtrArray * (g_ptr_array_remove_range)(GPtrArray * array, guint index_, guint length);
void (g_ptr_array_add)(GPtrArray * array, gpointer data);
void (g_ptr_array_extend)(GPtrArray * array_to_extend, GPtrArray * array, GCopyFunc func, gpointer user_data);
void (g_ptr_array_extend_and_steal)(GPtrArray * array_to_extend, GPtrArray * array);
void (g_ptr_array_insert)(GPtrArray * array, gint index_, gpointer data);
void (g_ptr_array_sort)(GPtrArray * array, GCompareFunc compare_func);
void (g_ptr_array_sort_with_data)(GPtrArray * array, GCompareDataFunc compare_func, gpointer user_data);
void (g_ptr_array_sort_values)(GPtrArray * array, GCompareFunc compare_func);
void (g_ptr_array_sort_values_with_data)(GPtrArray * array, GCompareDataFunc compare_func, gpointer user_data);
void (g_ptr_array_foreach)(GPtrArray * array, GFunc func, gpointer user_data);
gboolean (g_ptr_array_find)(GPtrArray * haystack, gconstpointer needle, guint * index_);
gboolean (g_ptr_array_find_with_equal_func)(GPtrArray * haystack, gconstpointer needle, GEqualFunc equal_func, guint * index_);
gboolean (g_ptr_array_is_null_terminated)(GPtrArray * array);
GByteArray * (g_byte_array_new)(void);
GByteArray * (g_byte_array_new_take)(guint8 * data, gsize len);
guint8 * (g_byte_array_steal)(GByteArray * array, gsize * len);
GByteArray * (g_byte_array_sized_new)(guint reserved_size);
guint8 * (g_byte_array_free)(GByteArray * array, gboolean free_segment);
GBytes * (g_byte_array_free_to_bytes)(GByteArray * array);
GByteArray * (g_byte_array_ref)(GByteArray * array);
void (g_byte_array_unref)(GByteArray * array);
GByteArray * (g_byte_array_append)(GByteArray * array, const guint8 * data, guint len);
GByteArray * (g_byte_array_prepend)(GByteArray * array, const guint8 * data, guint len);
GByteArray * (g_byte_array_set_size)(GByteArray * array, guint length);
GByteArray * (g_byte_array_remove_index)(GByteArray * array, guint index_);
GByteArray * (g_byte_array_remove_index_fast)(GByteArray * array, guint index_);
GByteArray * (g_byte_array_remove_range)(GByteArray * array, guint index_, guint length);
void (g_byte_array_sort)(GByteArray * array, GCompareFunc compare_func);
void (g_byte_array_sort_with_data)(GByteArray * array, GCompareDataFunc compare_func, gpointer user_data);
gint (g_atomic_int_get)(const volatile gint * atomic);
void (g_atomic_int_set)(volatile gint * atomic, gint newval);
void (g_atomic_int_inc)(volatile gint * atomic);
gboolean (g_atomic_int_dec_and_test)(volatile gint * atomic);
gboolean (g_atomic_int_compare_and_exchange)(volatile gint * atomic, gint oldval, gint newval);
gboolean (g_atomic_int_compare_and_exchange_full)(gint * atomic, gint oldval, gint newval, gint * preval);
gint (g_atomic_int_exchange)(gint * atomic, gint newval);
gint (g_atomic_int_add)(volatile gint * atomic, gint val);
guint (g_atomic_int_and)(volatile guint * atomic, guint val);
guint (g_atomic_int_or)(volatile guint * atomic, guint val);
guint (g_atomic_int_xor)(volatile guint * atomic, guint val);
gpointer (g_atomic_pointer_get)(const volatile void * atomic);
void (g_atomic_pointer_set)(volatile void * atomic, gpointer newval);
gboolean (g_atomic_pointer_compare_and_exchange)(volatile void * atomic, gpointer oldval, gpointer newval);
gboolean (g_atomic_pointer_compare_and_exchange_full)(void * atomic, gpointer oldval, gpointer newval, void * preval);
gpointer (g_atomic_pointer_exchange)(void * atomic, gpointer newval);
gintptr (g_atomic_pointer_add)(volatile void * atomic, gssize val);
guintptr (g_atomic_pointer_and)(volatile void * atomic, gsize val);
guintptr (g_atomic_pointer_or)(volatile void * atomic, gsize val);
guintptr (g_atomic_pointer_xor)(volatile void * atomic, gsize val);
gint (g_atomic_int_exchange_and_add)(volatile gint * atomic, gint val);
GQuark (g_quark_try_string)(const gchar * string);
GQuark (g_quark_from_static_string)(const gchar * string);
GQuark (g_quark_from_string)(const gchar * string);
const gchar * (g_quark_to_string)(GQuark quark);
const gchar * (g_intern_string)(const gchar * string);
const gchar * (g_intern_static_string)(const gchar * string);
GQuark (g_error_domain_register_static)(const char * error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear);
GQuark (g_error_domain_register)(const char * error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear);
GError * (g_error_new)(GQuark domain, gint code, const gchar * format, ...);
GError * (g_error_new_literal)(GQuark domain, gint code, const gchar * message);
GError * (g_error_new_valist)(GQuark domain, gint code, const gchar * format, va_list args);
void (g_error_free)(GError * error);
GError * (g_error_copy)(const GError * error);
gboolean (g_error_matches)(const GError * error, GQuark domain, gint code);
void (g_set_error_literal)(GError * * err, GQuark domain, gint code, const gchar * message);
void (g_propagate_error)(GError * * dest, GError * src);
void (g_clear_error)(GError * * err);
void (g_prefix_error_literal)(GError * * err, const gchar * prefix);
const gchar * (g_get_user_name)(void);
const gchar * (g_get_real_name)(void);
const gchar * (g_get_home_dir)(void);
const gchar * (g_get_tmp_dir)(void);
const gchar * (g_get_host_name)(void);
const gchar * (g_get_prgname)(void);
void (g_set_prgname)(const gchar * prgname);
const gchar * (g_get_application_name)(void);
void (g_set_application_name)(const gchar * application_name);
gchar * (g_get_os_info)(const gchar * key_name);
void (g_reload_user_special_dirs_cache)(void);
const gchar * (g_get_user_data_dir)(void);
const gchar * (g_get_user_config_dir)(void);
const gchar * (g_get_user_cache_dir)(void);
const gchar * (g_get_user_state_dir)(void);
const gchar * const * (g_get_system_data_dirs)(void);
const gchar * const * (g_get_system_config_dirs)(void);
const gchar * (g_get_user_runtime_dir)(void);
const gchar * (g_get_user_special_dir)(GUserDirectory directory);
guint (g_parse_debug_string)(const gchar * string, const GDebugKey * keys, guint nkeys);
gint (g_snprintf)(gchar * string, gulong n, const gchar * format, ...);
gint (g_vsnprintf)(gchar * string, gulong n, const gchar * format, va_list args);
void (g_nullify_pointer)(gpointer * nullify_location);
gchar * (g_format_size_full)(guint64 size, GFormatSizeFlags flags);
gchar * (g_format_size)(guint64 size);
gchar * (g_format_size_for_display)(goffset size);
void (g_atexit)(GVoidFunc func);
gchar * (g_find_program_in_path)(const gchar * program);
gint (g_bit_nth_lsf)(gulong mask, gint nth_bit);
gint (g_bit_nth_msf)(gulong mask, gint nth_bit);
guint (g_bit_storage)(gulong number);
GQuark (g_thread_error_quark)(void);
GThread * (g_thread_ref)(GThread * thread);
void (g_thread_unref)(GThread * thread);
GThread * (g_thread_new)(const gchar * name, GThreadFunc func, gpointer data);
GThread * (g_thread_try_new)(const gchar * name, GThreadFunc func, gpointer data, GError * * error);
GThread * (g_thread_self)(void);
void (g_thread_exit)(gpointer retval);
gpointer (g_thread_join)(GThread * thread);
void (g_thread_yield)(void);
void (g_mutex_init)(GMutex * mutex);
void (g_mutex_clear)(GMutex * mutex);
void (g_mutex_lock)(GMutex * mutex);
gboolean (g_mutex_trylock)(GMutex * mutex);
void (g_mutex_unlock)(GMutex * mutex);
void (g_rw_lock_init)(GRWLock * rw_lock);
void (g_rw_lock_clear)(GRWLock * rw_lock);
void (g_rw_lock_writer_lock)(GRWLock * rw_lock);
gboolean (g_rw_lock_writer_trylock)(GRWLock * rw_lock);
void (g_rw_lock_writer_unlock)(GRWLock * rw_lock);
void (g_rw_lock_reader_lock)(GRWLock * rw_lock);
gboolean (g_rw_lock_reader_trylock)(GRWLock * rw_lock);
void (g_rw_lock_reader_unlock)(GRWLock * rw_lock);
void (g_rec_mutex_init)(GRecMutex * rec_mutex);
void (g_rec_mutex_clear)(GRecMutex * rec_mutex);
void (g_rec_mutex_lock)(GRecMutex * rec_mutex);
gboolean (g_rec_mutex_trylock)(GRecMutex * rec_mutex);
void (g_rec_mutex_unlock)(GRecMutex * rec_mutex);
void (g_cond_init)(GCond * cond);
void (g_cond_clear)(GCond * cond);
void (g_cond_wait)(GCond * cond, GMutex * mutex);
void (g_cond_signal)(GCond * cond);
void (g_cond_broadcast)(GCond * cond);
gboolean (g_cond_wait_until)(GCond * cond, GMutex * mutex, gint64 end_time);
gpointer (g_private_get)(GPrivate * key);
void (g_private_set)(GPrivate * key, gpointer value);
void (g_private_replace)(GPrivate * key, gpointer value);
gpointer (g_once_impl)(GOnce * once, GThreadFunc func, gpointer arg);
gboolean (g_once_init_enter)(volatile void * location);
void (g_once_init_leave)(volatile void * location, gsize result);
gboolean (g_once_init_enter_pointer)(void * location);
void (g_once_init_leave_pointer)(void * location, gpointer result);
guint (g_get_num_processors)(void);
GAsyncQueue * (g_async_queue_new)(void);
GAsyncQueue * (g_async_queue_new_full)(GDestroyNotify item_free_func);
void (g_async_queue_lock)(GAsyncQueue * queue);
void (g_async_queue_unlock)(GAsyncQueue * queue);
GAsyncQueue * (g_async_queue_ref)(GAsyncQueue * queue);
void (g_async_queue_unref)(GAsyncQueue * queue);
void (g_async_queue_ref_unlocked)(GAsyncQueue * queue);
void (g_async_queue_unref_and_unlock)(GAsyncQueue * queue);
void (g_async_queue_push)(GAsyncQueue * queue, gpointer data);
void (g_async_queue_push_unlocked)(GAsyncQueue * queue, gpointer data);
void (g_async_queue_push_sorted)(GAsyncQueue * queue, gpointer data, GCompareDataFunc func, gpointer user_data);
void (g_async_queue_push_sorted_unlocked)(GAsyncQueue * queue, gpointer data, GCompareDataFunc func, gpointer user_data);
gpointer (g_async_queue_pop)(GAsyncQueue * queue);
gpointer (g_async_queue_pop_unlocked)(GAsyncQueue * queue);
gpointer (g_async_queue_try_pop)(GAsyncQueue * queue);
gpointer (g_async_queue_try_pop_unlocked)(GAsyncQueue * queue);
gpointer (g_async_queue_timeout_pop)(GAsyncQueue * queue, guint64 timeout);
gpointer (g_async_queue_timeout_pop_unlocked)(GAsyncQueue * queue, guint64 timeout);
gint (g_async_queue_length)(GAsyncQueue * queue);
gint (g_async_queue_length_unlocked)(GAsyncQueue * queue);
void (g_async_queue_sort)(GAsyncQueue * queue, GCompareDataFunc func, gpointer user_data);
void (g_async_queue_sort_unlocked)(GAsyncQueue * queue, GCompareDataFunc func, gpointer user_data);
gboolean (g_async_queue_remove)(GAsyncQueue * queue, gpointer item);
gboolean (g_async_queue_remove_unlocked)(GAsyncQueue * queue, gpointer item);
void (g_async_queue_push_front)(GAsyncQueue * queue, gpointer item);
void (g_async_queue_push_front_unlocked)(GAsyncQueue * queue, gpointer item);
gpointer (g_async_queue_timed_pop)(GAsyncQueue * queue, GTimeVal * end_time);
gpointer (g_async_queue_timed_pop_unlocked)(GAsyncQueue * queue, GTimeVal * end_time);
void (g_on_error_query)(const gchar * prg_name);
void (g_on_error_stack_trace)(const gchar * prg_name);
gsize (g_base64_encode_step)(const guchar * in, gsize len, gboolean break_lines, gchar * out, gint * state, gint * save);
gsize (g_base64_encode_close)(gboolean break_lines, gchar * out, gint * state, gint * save);
gchar * (g_base64_encode)(const guchar * data, gsize len);
gsize (g_base64_decode_step)(const gchar * in, gsize len, guchar * out, gint * state, guint * save);
guchar * (g_base64_decode)(const gchar * text, gsize * out_len);
guchar * (g_base64_decode_inplace)(gchar * text, gsize * out_len);
void (g_bit_lock)(volatile gint * address, gint lock_bit);
gboolean (g_bit_trylock)(volatile gint * address, gint lock_bit);
void (g_bit_unlock)(volatile gint * address, gint lock_bit);
void (g_pointer_bit_lock)(volatile void * address, gint lock_bit);
void (g_pointer_bit_lock_and_get)(gpointer address, guint lock_bit, guintptr * out_ptr);
gboolean (g_pointer_bit_trylock)(volatile void * address, gint lock_bit);
void (g_pointer_bit_unlock)(volatile void * address, gint lock_bit);
gpointer (g_pointer_bit_lock_mask_ptr)(gpointer ptr, guint lock_bit, gboolean set, guintptr preserve_mask, gpointer preserve_ptr);
void (g_pointer_bit_unlock_and_set)(void * address, guint lock_bit, gpointer ptr, guintptr preserve_mask);
GTimeZone * (g_time_zone_new)(const gchar * identifier);
GTimeZone * (g_time_zone_new_identifier)(const gchar * identifier);
GTimeZone * (g_time_zone_new_utc)(void);
GTimeZone * (g_time_zone_new_local)(void);
GTimeZone * (g_time_zone_new_offset)(gint32 seconds);
GTimeZone * (g_time_zone_ref)(GTimeZone * tz);
void (g_time_zone_unref)(GTimeZone * tz);
gint (g_time_zone_find_interval)(GTimeZone * tz, GTimeType type, gint64 time_);
gint (g_time_zone_adjust_time)(GTimeZone * tz, GTimeType type, gint64 * time_);
const gchar * (g_time_zone_get_abbreviation)(GTimeZone * tz, gint interval);
gint32 (g_time_zone_get_offset)(GTimeZone * tz, gint interval);
gboolean (g_time_zone_is_dst)(GTimeZone * tz, gint interval);
const gchar * (g_time_zone_get_identifier)(GTimeZone * tz);
void (g_date_time_unref)(GDateTime * datetime);
GDateTime * (g_date_time_ref)(GDateTime * datetime);
GDateTime * (g_date_time_new_now)(GTimeZone * tz);
GDateTime * (g_date_time_new_now_local)(void);
GDateTime * (g_date_time_new_now_utc)(void);
GDateTime * (g_date_time_new_from_unix_local)(gint64 t);
GDateTime * (g_date_time_new_from_unix_utc)(gint64 t);
GDateTime * (g_date_time_new_from_unix_local_usec)(gint64 usecs);
GDateTime * (g_date_time_new_from_unix_utc_usec)(gint64 usecs);
GDateTime * (g_date_time_new_from_timeval_local)(const GTimeVal * tv);
GDateTime * (g_date_time_new_from_timeval_utc)(const GTimeVal * tv);
GDateTime * (g_date_time_new_from_iso8601)(const gchar * text, GTimeZone * default_tz);
GDateTime * (g_date_time_new)(GTimeZone * tz, gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);
GDateTime * (g_date_time_new_local)(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);
GDateTime * (g_date_time_new_utc)(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);
GDateTime * (g_date_time_add)(GDateTime * datetime, GTimeSpan timespan);
GDateTime * (g_date_time_add_years)(GDateTime * datetime, gint years);
GDateTime * (g_date_time_add_months)(GDateTime * datetime, gint months);
GDateTime * (g_date_time_add_weeks)(GDateTime * datetime, gint weeks);
GDateTime * (g_date_time_add_days)(GDateTime * datetime, gint days);
GDateTime * (g_date_time_add_hours)(GDateTime * datetime, gint hours);
GDateTime * (g_date_time_add_minutes)(GDateTime * datetime, gint minutes);
GDateTime * (g_date_time_add_seconds)(GDateTime * datetime, gdouble seconds);
GDateTime * (g_date_time_add_full)(GDateTime * datetime, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds);
gint (g_date_time_compare)(gconstpointer dt1, gconstpointer dt2);
GTimeSpan (g_date_time_difference)(GDateTime * end, GDateTime * begin);
guint (g_date_time_hash)(gconstpointer datetime);
gboolean (g_date_time_equal)(gconstpointer dt1, gconstpointer dt2);
void (g_date_time_get_ymd)(GDateTime * datetime, gint * year, gint * month, gint * day);
gint (g_date_time_get_year)(GDateTime * datetime);
gint (g_date_time_get_month)(GDateTime * datetime);
gint (g_date_time_get_day_of_month)(GDateTime * datetime);
gint (g_date_time_get_week_numbering_year)(GDateTime * datetime);
gint (g_date_time_get_week_of_year)(GDateTime * datetime);
gint (g_date_time_get_day_of_week)(GDateTime * datetime);
gint (g_date_time_get_day_of_year)(GDateTime * datetime);
gint (g_date_time_get_hour)(GDateTime * datetime);
gint (g_date_time_get_minute)(GDateTime * datetime);
gint (g_date_time_get_second)(GDateTime * datetime);
gint (g_date_time_get_microsecond)(GDateTime * datetime);
gdouble (g_date_time_get_seconds)(GDateTime * datetime);
gint64 (g_date_time_to_unix)(GDateTime * datetime);
gint64 (g_date_time_to_unix_usec)(GDateTime * datetime);
gboolean (g_date_time_to_timeval)(GDateTime * datetime, GTimeVal * tv);
GTimeSpan (g_date_time_get_utc_offset)(GDateTime * datetime);
GTimeZone * (g_date_time_get_timezone)(GDateTime * datetime);
const gchar * (g_date_time_get_timezone_abbreviation)(GDateTime * datetime);
gboolean (g_date_time_is_daylight_savings)(GDateTime * datetime);
GDateTime * (g_date_time_to_timezone)(GDateTime * datetime, GTimeZone * tz);
GDateTime * (g_date_time_to_local)(GDateTime * datetime);
GDateTime * (g_date_time_to_utc)(GDateTime * datetime);
gchar * (g_date_time_format)(GDateTime * datetime, const gchar * format);
gchar * (g_date_time_format_iso8601)(GDateTime * datetime);
GQuark (g_bookmark_file_error_quark)(void);
GBookmarkFile * (g_bookmark_file_new)(void);
void (g_bookmark_file_free)(GBookmarkFile * bookmark);
GBookmarkFile * (g_bookmark_file_copy)(GBookmarkFile * bookmark);
gboolean (g_bookmark_file_load_from_file)(GBookmarkFile * bookmark, const gchar * filename, GError * * error);
gboolean (g_bookmark_file_load_from_data)(GBookmarkFile * bookmark, const gchar * data, gsize length, GError * * error);
gboolean (g_bookmark_file_load_from_data_dirs)(GBookmarkFile * bookmark, const gchar * file, gchar * * full_path, GError * * error);
gchar * (g_bookmark_file_to_data)(GBookmarkFile * bookmark, gsize * length, GError * * error);
gboolean (g_bookmark_file_to_file)(GBookmarkFile * bookmark, const gchar * filename, GError * * error);
void (g_bookmark_file_set_title)(GBookmarkFile * bookmark, const gchar * uri, const gchar * title);
gchar * (g_bookmark_file_get_title)(GBookmarkFile * bookmark, const gchar * uri, GError * * error);
void (g_bookmark_file_set_description)(GBookmarkFile * bookmark, const gchar * uri, const gchar * description);
gchar * (g_bookmark_file_get_description)(GBookmarkFile * bookmark, const gchar * uri, GError * * error);
void (g_bookmark_file_set_mime_type)(GBookmarkFile * bookmark, const gchar * uri, const gchar * mime_type);
gchar * (g_bookmark_file_get_mime_type)(GBookmarkFile * bookmark, const gchar * uri, GError * * error);
void (g_bookmark_file_set_groups)(GBookmarkFile * bookmark, const gchar * uri, const gchar * * groups, gsize length);
void (g_bookmark_file_add_group)(GBookmarkFile * bookmark, const gchar * uri, const gchar * group);
gboolean (g_bookmark_file_has_group)(GBookmarkFile * bookmark, const gchar * uri, const gchar * group, GError * * error);
gchar * * (g_bookmark_file_get_groups)(GBookmarkFile * bookmark, const gchar * uri, gsize * length, GError * * error);
void (g_bookmark_file_add_application)(GBookmarkFile * bookmark, const gchar * uri, const gchar * name, const gchar * exec);
gboolean (g_bookmark_file_has_application)(GBookmarkFile * bookmark, const gchar * uri, const gchar * name, GError * * error);
gchar * * (g_bookmark_file_get_applications)(GBookmarkFile * bookmark, const gchar * uri, gsize * length, GError * * error);
gboolean (g_bookmark_file_set_app_info)(GBookmarkFile * bookmark, const gchar * uri, const gchar * name, const gchar * exec, gint count, time_t stamp, GError * * error);
gboolean (g_bookmark_file_set_application_info)(GBookmarkFile * bookmark, const char * uri, const char * name, const char * exec, int count, GDateTime * stamp, GError * * error);
gboolean (g_bookmark_file_get_app_info)(GBookmarkFile * bookmark, const gchar * uri, const gchar * name, gchar * * exec, guint * count, time_t * stamp, GError * * error);
gboolean (g_bookmark_file_get_application_info)(GBookmarkFile * bookmark, const char * uri, const char * name, char * * exec, unsigned int * count, GDateTime * * stamp, GError * * error);
void (g_bookmark_file_set_is_private)(GBookmarkFile * bookmark, const gchar * uri, gboolean is_private);
gboolean (g_bookmark_file_get_is_private)(GBookmarkFile * bookmark, const gchar * uri, GError * * error);
void (g_bookmark_file_set_icon)(GBookmarkFile * bookmark, const gchar * uri, const gchar * href, const gchar * mime_type);
gboolean (g_bookmark_file_get_icon)(GBookmarkFile * bookmark, const gchar * uri, gchar * * href, gchar * * mime_type, GError * * error);
void (g_bookmark_file_set_added)(GBookmarkFile * bookmark, const gchar * uri, time_t added);
void (g_bookmark_file_set_added_date_time)(GBookmarkFile * bookmark, const char * uri, GDateTime * added);
time_t (g_bookmark_file_get_added)(GBookmarkFile * bookmark, const gchar * uri, GError * * error);
GDateTime * (g_bookmark_file_get_added_date_time)(GBookmarkFile * bookmark, const char * uri, GError * * error);
void (g_bookmark_file_set_modified)(GBookmarkFile * bookmark, const gchar * uri, time_t modified);
void (g_bookmark_file_set_modified_date_time)(GBookmarkFile * bookmark, const char * uri, GDateTime * modified);
time_t (g_bookmark_file_get_modified)(GBookmarkFile * bookmark, const gchar * uri, GError * * error);
GDateTime * (g_bookmark_file_get_modified_date_time)(GBookmarkFile * bookmark, const char * uri, GError * * error);
void (g_bookmark_file_set_visited)(GBookmarkFile * bookmark, const gchar * uri, time_t visited);
void (g_bookmark_file_set_visited_date_time)(GBookmarkFile * bookmark, const char * uri, GDateTime * visited);
time_t (g_bookmark_file_get_visited)(GBookmarkFile * bookmark, const gchar * uri, GError * * error);
GDateTime * (g_bookmark_file_get_visited_date_time)(GBookmarkFile * bookmark, const char * uri, GError * * error);
gboolean (g_bookmark_file_has_item)(GBookmarkFile * bookmark, const gchar * uri);
gint (g_bookmark_file_get_size)(GBookmarkFile * bookmark);
gchar * * (g_bookmark_file_get_uris)(GBookmarkFile * bookmark, gsize * length);
gboolean (g_bookmark_file_remove_group)(GBookmarkFile * bookmark, const gchar * uri, const gchar * group, GError * * error);
gboolean (g_bookmark_file_remove_application)(GBookmarkFile * bookmark, const gchar * uri, const gchar * name, GError * * error);
gboolean (g_bookmark_file_remove_item)(GBookmarkFile * bookmark, const gchar * uri, GError * * error);
gboolean (g_bookmark_file_move_item)(GBookmarkFile * bookmark, const gchar * old_uri, const gchar * new_uri, GError * * error);
GBytes * (g_bytes_new)(gconstpointer data, gsize size);
GBytes * (g_bytes_new_take)(gpointer data, gsize size);
GBytes * (g_bytes_new_static)(gconstpointer data, gsize size);
GBytes * (g_bytes_new_with_free_func)(gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data);
GBytes * (g_bytes_new_from_bytes)(GBytes * bytes, gsize offset, gsize length);
gconstpointer (g_bytes_get_data)(GBytes * bytes, gsize * size);
gsize (g_bytes_get_size)(GBytes * bytes);
GBytes * (g_bytes_ref)(GBytes * bytes);
void (g_bytes_unref)(GBytes * bytes);
gpointer (g_bytes_unref_to_data)(GBytes * bytes, gsize * size);
GByteArray * (g_bytes_unref_to_array)(GBytes * bytes);
guint (g_bytes_hash)(gconstpointer bytes);
gboolean (g_bytes_equal)(gconstpointer bytes1, gconstpointer bytes2);
gint (g_bytes_compare)(gconstpointer bytes1, gconstpointer bytes2);
gconstpointer (g_bytes_get_region)(GBytes * bytes, gsize element_size, gsize offset, gsize n_elements);
gboolean (g_get_charset)(const char * * charset);
gchar * (g_get_codeset)(void);
gboolean (g_get_console_charset)(const char * * charset);
const gchar * const * (g_get_language_names)(void);
const gchar * const * (g_get_language_names_with_category)(const gchar * category_name);
gchar * * (g_get_locale_variants)(const gchar * locale);
gssize (g_checksum_type_get_length)(GChecksumType checksum_type);
GChecksum * (g_checksum_new)(GChecksumType checksum_type);
void (g_checksum_reset)(GChecksum * checksum);
GChecksum * (g_checksum_copy)(const GChecksum * checksum);
void (g_checksum_free)(GChecksum * checksum);
void (g_checksum_update)(GChecksum * checksum, const guchar * data, gssize length);
const gchar * (g_checksum_get_string)(GChecksum * checksum);
void (g_checksum_get_digest)(GChecksum * checksum, guint8 * buffer, gsize * digest_len);
gchar * (g_compute_checksum_for_data)(GChecksumType checksum_type, const guchar * data, gsize length);
gchar * (g_compute_checksum_for_string)(GChecksumType checksum_type, const gchar * str, gssize length);
gchar * (g_compute_checksum_for_bytes)(GChecksumType checksum_type, GBytes * data);
GQuark (g_convert_error_quark)(void);
GIConv (g_iconv_open)(const gchar * to_codeset, const gchar * from_codeset);
gsize (g_iconv)(GIConv converter, gchar * * inbuf, gsize * inbytes_left, gchar * * outbuf, gsize * outbytes_left);
gint (g_iconv_close)(GIConv converter);
gchar * (g_convert)(const gchar * str, gssize len, const gchar * to_codeset, const gchar * from_codeset, gsize * bytes_read, gsize * bytes_written, GError * * error);
gchar * (g_convert_with_iconv)(const gchar * str, gssize len, GIConv converter, gsize * bytes_read, gsize * bytes_written, GError * * error);
gchar * (g_convert_with_fallback)(const gchar * str, gssize len, const gchar * to_codeset, const gchar * from_codeset, const gchar * fallback, gsize * bytes_read, gsize * bytes_written, GError * * error);
gchar * (g_locale_to_utf8)(const gchar * opsysstring, gssize len, gsize * bytes_read, gsize * bytes_written, GError * * error);
gchar * (g_locale_from_utf8)(const gchar * utf8string, gssize len, gsize * bytes_read, gsize * bytes_written, GError * * error);
gchar * (g_filename_to_utf8)(const gchar * opsysstring, gssize len, gsize * bytes_read, gsize * bytes_written, GError * * error);
gchar * (g_filename_from_utf8)(const gchar * utf8string, gssize len, gsize * bytes_read, gsize * bytes_written, GError * * error);
gchar * (g_filename_from_uri)(const gchar * uri, gchar * * hostname, GError * * error);
gchar * (g_filename_to_uri)(const gchar * filename, const gchar * hostname, GError * * error);
gchar * (g_filename_display_name)(const gchar * filename);
gboolean (g_get_filename_charsets)(const gchar * * * filename_charsets);
gchar * (g_filename_display_basename)(const gchar * filename);
gchar * * (g_uri_list_extract_uris)(const gchar * uri_list);
void (g_datalist_init)(GData * * datalist);
void (g_datalist_clear)(GData * * datalist);
gpointer (g_datalist_id_get_data)(GData * * datalist, GQuark key_id);
void (g_datalist_id_set_data_full)(GData * * datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func);
void (g_datalist_id_remove_multiple)(GData * * datalist, GQuark * keys, gsize n_keys);
gpointer (g_datalist_id_dup_data)(GData * * datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data);
gboolean (g_datalist_id_replace_data)(GData * * datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify * old_destroy);
gpointer (g_datalist_id_remove_no_notify)(GData * * datalist, GQuark key_id);
void (g_datalist_foreach)(GData * * datalist, GDataForeachFunc func, gpointer user_data);
void (g_datalist_set_flags)(GData * * datalist, guint flags);
void (g_datalist_unset_flags)(GData * * datalist, guint flags);
guint (g_datalist_get_flags)(GData * * datalist);
void (g_dataset_destroy)(gconstpointer dataset_location);
gpointer (g_dataset_id_get_data)(gconstpointer dataset_location, GQuark key_id);
gpointer (g_datalist_get_data)(GData * * datalist, const gchar * key);
void (g_dataset_id_set_data_full)(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func);
gpointer (g_dataset_id_remove_no_notify)(gconstpointer dataset_location, GQuark key_id);
void (g_dataset_foreach)(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data);
GDate * (g_date_new)(void);
GDate * (g_date_new_dmy)(GDateDay day, GDateMonth month, GDateYear year);
GDate * (g_date_new_julian)(guint32 julian_day);
void (g_date_free)(GDate * date);
GDate * (g_date_copy)(const GDate * date);
gboolean (g_date_valid)(const GDate * date);
gboolean (g_date_valid_day)(GDateDay day);
gboolean (g_date_valid_month)(GDateMonth month);
gboolean (g_date_valid_year)(GDateYear year);
gboolean (g_date_valid_weekday)(GDateWeekday weekday);
gboolean (g_date_valid_julian)(guint32 julian_date);
gboolean (g_date_valid_dmy)(GDateDay day, GDateMonth month, GDateYear year);
GDateWeekday (g_date_get_weekday)(const GDate * date);
GDateMonth (g_date_get_month)(const GDate * date);
GDateYear (g_date_get_year)(const GDate * date);
GDateDay (g_date_get_day)(const GDate * date);
guint32 (g_date_get_julian)(const GDate * date);
guint (g_date_get_day_of_year)(const GDate * date);
guint (g_date_get_monday_week_of_year)(const GDate * date);
guint (g_date_get_sunday_week_of_year)(const GDate * date);
guint (g_date_get_iso8601_week_of_year)(const GDate * date);
void (g_date_clear)(GDate * date, guint n_dates);
void (g_date_set_parse)(GDate * date, const gchar * str);
void (g_date_set_time_t)(GDate * date, time_t timet);
void (g_date_set_time_val)(GDate * date, GTimeVal * timeval);
void (g_date_set_time)(GDate * date, GTime time_);
void (g_date_set_month)(GDate * date, GDateMonth month);
void (g_date_set_day)(GDate * date, GDateDay day);
void (g_date_set_year)(GDate * date, GDateYear year);
void (g_date_set_dmy)(GDate * date, GDateDay day, GDateMonth month, GDateYear y);
void (g_date_set_julian)(GDate * date, guint32 julian_date);
gboolean (g_date_is_first_of_month)(const GDate * date);
gboolean (g_date_is_last_of_month)(const GDate * date);
void (g_date_add_days)(GDate * date, guint n_days);
void (g_date_subtract_days)(GDate * date, guint n_days);
void (g_date_add_months)(GDate * date, guint n_months);
void (g_date_subtract_months)(GDate * date, guint n_months);
void (g_date_add_years)(GDate * date, guint n_years);
void (g_date_subtract_years)(GDate * date, guint n_years);
gboolean (g_date_is_leap_year)(GDateYear year);
guint8 (g_date_get_days_in_month)(GDateMonth month, GDateYear year);
guint8 (g_date_get_monday_weeks_in_year)(GDateYear year);
guint8 (g_date_get_sunday_weeks_in_year)(GDateYear year);
gint (g_date_days_between)(const GDate * date1, const GDate * date2);
gint (g_date_compare)(const GDate * lhs, const GDate * rhs);
void (g_date_to_struct_tm)(const GDate * date, struct tm * tm);
void (g_date_clamp)(GDate * date, const GDate * min_date, const GDate * max_date);
void (g_date_order)(GDate * date1, GDate * date2);
gsize (g_date_strftime)(gchar * s, gsize slen, const gchar * format, const GDate * date);
GDir * (g_dir_open)(const gchar * path, guint flags, GError * * error);
const gchar * (g_dir_read_name)(GDir * dir);
void (g_dir_rewind)(GDir * dir);
void (g_dir_close)(GDir * dir);
GDir * (g_dir_ref)(GDir * dir);
void (g_dir_unref)(GDir * dir);
const gchar * (g_getenv)(const gchar * variable);
gboolean (g_setenv)(const gchar * variable, const gchar * value, gboolean overwrite);
void (g_unsetenv)(const gchar * variable);
gchar * * (g_listenv)(void);
gchar * * (g_get_environ)(void);
const gchar * (g_environ_getenv)(gchar * * envp, const gchar * variable);
gchar * * (g_environ_setenv)(gchar * * envp, const gchar * variable, const gchar * value, gboolean overwrite);
gchar * * (g_environ_unsetenv)(gchar * * envp, const gchar * variable);
GQuark (g_file_error_quark)(void);
GFileError (g_file_error_from_errno)(gint err_no);
gboolean (g_file_test)(const gchar * filename, GFileTest test);
gboolean (g_file_get_contents)(const gchar * filename, gchar * * contents, gsize * length, GError * * error);
gboolean (g_file_set_contents)(const gchar * filename, const gchar * contents, gssize length, GError * * error);
gboolean (g_file_set_contents_full)(const gchar * filename, const gchar * contents, gssize length, GFileSetContentsFlags flags, int mode, GError * * error);
gchar * (g_file_read_link)(const gchar * filename, GError * * error);
gchar * (g_mkdtemp)(gchar * tmpl);
gchar * (g_mkdtemp_full)(gchar * tmpl, gint mode);
gint (g_mkstemp)(gchar * tmpl);
gint (g_mkstemp_full)(gchar * tmpl, gint flags, gint mode);
gint (g_file_open_tmp)(const gchar * tmpl, gchar * * name_used, GError * * error);
gchar * (g_dir_make_tmp)(const gchar * tmpl, GError * * error);
gchar * (g_build_pathv)(const gchar * separator, gchar * * args);
gchar * (g_build_filename)(const gchar * first_element, ...);
gchar * (g_build_filenamev)(gchar * * args);
gchar * (g_build_filename_valist)(const gchar * first_element, va_list * args);
gint (g_mkdir_with_parents)(const gchar * pathname, gint mode);
gboolean (g_path_is_absolute)(const gchar * file_name);
const gchar * (g_path_skip_root)(const gchar * file_name);
const gchar * (g_basename)(const gchar * file_name);
gchar * (g_get_current_dir)(void);
gchar * (g_path_get_basename)(const gchar * file_name);
gchar * (g_path_get_dirname)(const gchar * file_name);
gchar * (g_canonicalize_filename)(const gchar * filename, const gchar * relative_to);
const gchar * (g_strip_context)(const gchar * msgid, const gchar * msgval);
const gchar * (g_dgettext)(const gchar * domain, const gchar * msgid);
const gchar * (g_dcgettext)(const gchar * domain, const gchar * msgid, gint category);
const gchar * (g_dngettext)(const gchar * domain, const gchar * msgid, const gchar * msgid_plural, gulong n);
const gchar * (g_dpgettext)(const gchar * domain, const gchar * msgctxtid, gsize msgidoffset);
const gchar * (g_dpgettext2)(const gchar * domain, const gchar * context, const gchar * msgid);
void (g_free)(gpointer mem);
void (g_free_sized)(gpointer mem, size_t size);
void (g_clear_pointer)(gpointer * pp, GDestroyNotify destroy);
gpointer (g_malloc)(gsize n_bytes);
gpointer (g_malloc0)(gsize n_bytes);
gpointer (g_realloc)(gpointer mem, gsize n_bytes);
gpointer (g_try_malloc)(gsize n_bytes);
gpointer (g_try_malloc0)(gsize n_bytes);
gpointer (g_try_realloc)(gpointer mem, gsize n_bytes);
gpointer (g_malloc_n)(gsize n_blocks, gsize n_block_bytes);
gpointer (g_malloc0_n)(gsize n_blocks, gsize n_block_bytes);
gpointer (g_realloc_n)(gpointer mem, gsize n_blocks, gsize n_block_bytes);
gpointer (g_try_malloc_n)(gsize n_blocks, gsize n_block_bytes);
gpointer (g_try_malloc0_n)(gsize n_blocks, gsize n_block_bytes);
gpointer (g_try_realloc_n)(gpointer mem, gsize n_blocks, gsize n_block_bytes);
gpointer (g_aligned_alloc)(gsize n_blocks, gsize n_block_bytes, gsize alignment);
gpointer (g_aligned_alloc0)(gsize n_blocks, gsize n_block_bytes, gsize alignment);
void (g_aligned_free)(gpointer mem);
void (g_aligned_free_sized)(gpointer mem, size_t alignment, size_t size);
void (g_mem_set_vtable)(GMemVTable * vtable);
gboolean (g_mem_is_system_malloc)(void);
void (g_mem_profile)(void);
GNode * (g_node_new)(gpointer data);
void (g_node_destroy)(GNode * root);
void (g_node_unlink)(GNode * node);
GNode * (g_node_copy_deep)(GNode * node, GCopyFunc copy_func, gpointer data);
GNode * (g_node_copy)(GNode * node);
GNode * (g_node_insert)(GNode * parent, gint position, GNode * node);
GNode * (g_node_insert_before)(GNode * parent, GNode * sibling, GNode * node);
GNode * (g_node_insert_after)(GNode * parent, GNode * sibling, GNode * node);
GNode * (g_node_prepend)(GNode * parent, GNode * node);
guint (g_node_n_nodes)(GNode * root, GTraverseFlags flags);
GNode * (g_node_get_root)(GNode * node);
gboolean (g_node_is_ancestor)(GNode * node, GNode * descendant);
guint (g_node_depth)(GNode * node);
GNode * (g_node_find)(GNode * root, GTraverseType order, GTraverseFlags flags, gpointer data);
void (g_node_traverse)(GNode * root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data);
guint (g_node_max_height)(GNode * root);
void (g_node_children_foreach)(GNode * node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data);
void (g_node_reverse_children)(GNode * node);
guint (g_node_n_children)(GNode * node);
GNode * (g_node_nth_child)(GNode * node, guint n);
GNode * (g_node_last_child)(GNode * node);
GNode * (g_node_find_child)(GNode * node, GTraverseFlags flags, gpointer data);
gint (g_node_child_position)(GNode * node, GNode * child);
gint (g_node_child_index)(GNode * node, gpointer data);
GNode * (g_node_first_sibling)(GNode * node);
GNode * (g_node_last_sibling)(GNode * node);
GList * (g_list_alloc)(void);
void (g_list_free)(GList * list);
void (g_list_free_1)(GList * list);
void (g_list_free_full)(GList * list, GDestroyNotify free_func);
GList * (g_list_append)(GList * list, gpointer data);
GList * (g_list_prepend)(GList * list, gpointer data);
GList * (g_list_insert)(GList * list, gpointer data, gint position);
GList * (g_list_insert_sorted)(GList * list, gpointer data, GCompareFunc func);
GList * (g_list_insert_sorted_with_data)(GList * list, gpointer data, GCompareDataFunc func, gpointer user_data);
GList * (g_list_insert_before)(GList * list, GList * sibling, gpointer data);
GList * (g_list_insert_before_link)(GList * list, GList * sibling, GList * link_);
GList * (g_list_concat)(GList * list1, GList * list2);
GList * (g_list_remove)(GList * list, gconstpointer data);
GList * (g_list_remove_all)(GList * list, gconstpointer data);
GList * (g_list_remove_link)(GList * list, GList * llink);
GList * (g_list_delete_link)(GList * list, GList * link_);
GList * (g_list_reverse)(GList * list);
GList * (g_list_copy)(GList * list);
GList * (g_list_copy_deep)(GList * list, GCopyFunc func, gpointer user_data);
GList * (g_list_nth)(GList * list, guint n);
GList * (g_list_nth_prev)(GList * list, guint n);
GList * (g_list_find)(GList * list, gconstpointer data);
GList * (g_list_find_custom)(GList * list, gconstpointer data, GCompareFunc func);
gint (g_list_position)(GList * list, GList * llink);
gint (g_list_index)(GList * list, gconstpointer data);
GList * (g_list_last)(GList * list);
GList * (g_list_first)(GList * list);
guint (g_list_length)(GList * list);
void (g_list_foreach)(GList * list, GFunc func, gpointer user_data);
GList * (g_list_sort)(GList * list, GCompareFunc compare_func);
GList * (g_list_sort_with_data)(GList * list, GCompareDataFunc compare_func, gpointer user_data);
gpointer (g_list_nth_data)(GList * list, guint n);
void (g_clear_list)(GList * * list_ptr, GDestroyNotify destroy);
GHashTable * (g_hash_table_new)(GHashFunc hash_func, GEqualFunc key_equal_func);
GHashTable * (g_hash_table_new_full)(GHashFunc hash_func, GEqualFunc key_equal_func, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);
GHashTable * (g_hash_table_new_similar)(GHashTable * other_hash_table);
void (g_hash_table_destroy)(GHashTable * hash_table);
gboolean (g_hash_table_insert)(GHashTable * hash_table, gpointer key, gpointer value);
gboolean (g_hash_table_replace)(GHashTable * hash_table, gpointer key, gpointer value);
gboolean (g_hash_table_add)(GHashTable * hash_table, gpointer key);
gboolean (g_hash_table_remove)(GHashTable * hash_table, gconstpointer key);
void (g_hash_table_remove_all)(GHashTable * hash_table);
gboolean (g_hash_table_steal)(GHashTable * hash_table, gconstpointer key);
gboolean (g_hash_table_steal_extended)(GHashTable * hash_table, gconstpointer lookup_key, gpointer * stolen_key, gpointer * stolen_value);
void (g_hash_table_steal_all)(GHashTable * hash_table);
GPtrArray * (g_hash_table_steal_all_keys)(GHashTable * hash_table);
GPtrArray * (g_hash_table_steal_all_values)(GHashTable * hash_table);
gpointer (g_hash_table_lookup)(GHashTable * hash_table, gconstpointer key);
gboolean (g_hash_table_contains)(GHashTable * hash_table, gconstpointer key);
gboolean (g_hash_table_lookup_extended)(GHashTable * hash_table, gconstpointer lookup_key, gpointer * orig_key, gpointer * value);
void (g_hash_table_foreach)(GHashTable * hash_table, GHFunc func, gpointer user_data);
gpointer (g_hash_table_find)(GHashTable * hash_table, GHRFunc predicate, gpointer user_data);
guint (g_hash_table_foreach_remove)(GHashTable * hash_table, GHRFunc func, gpointer user_data);
guint (g_hash_table_foreach_steal)(GHashTable * hash_table, GHRFunc func, gpointer user_data);
guint (g_hash_table_size)(GHashTable * hash_table);
GList * (g_hash_table_get_keys)(GHashTable * hash_table);
GList * (g_hash_table_get_values)(GHashTable * hash_table);
gpointer * (g_hash_table_get_keys_as_array)(GHashTable * hash_table, guint * length);
GPtrArray * (g_hash_table_get_keys_as_ptr_array)(GHashTable * hash_table);
GPtrArray * (g_hash_table_get_values_as_ptr_array)(GHashTable * hash_table);
void (g_hash_table_iter_init)(GHashTableIter * iter, GHashTable * hash_table);
gboolean (g_hash_table_iter_next)(GHashTableIter * iter, gpointer * key, gpointer * value);
GHashTable * (g_hash_table_iter_get_hash_table)(GHashTableIter * iter);
void (g_hash_table_iter_remove)(GHashTableIter * iter);
void (g_hash_table_iter_replace)(GHashTableIter * iter, gpointer value);
void (g_hash_table_iter_steal)(GHashTableIter * iter);
GHashTable * (g_hash_table_ref)(GHashTable * hash_table);
void (g_hash_table_unref)(GHashTable * hash_table);
gboolean (g_str_equal)(gconstpointer v1, gconstpointer v2);
guint (g_str_hash)(gconstpointer v);
gboolean (g_int_equal)(gconstpointer v1, gconstpointer v2);
guint (g_int_hash)(gconstpointer v);
gboolean (g_int64_equal)(gconstpointer v1, gconstpointer v2);
guint (g_int64_hash)(gconstpointer v);
gboolean (g_double_equal)(gconstpointer v1, gconstpointer v2);
guint (g_double_hash)(gconstpointer v);
guint (g_direct_hash)(gconstpointer v);
gboolean (g_direct_equal)(gconstpointer v1, gconstpointer v2);
GHmac * (g_hmac_new)(GChecksumType digest_type, const guchar * key, gsize key_len);
GHmac * (g_hmac_copy)(const GHmac * hmac);
GHmac * (g_hmac_ref)(GHmac * hmac);
void (g_hmac_unref)(GHmac * hmac);
void (g_hmac_update)(GHmac * hmac, const guchar * data, gssize length);
const gchar * (g_hmac_get_string)(GHmac * hmac);
void (g_hmac_get_digest)(GHmac * hmac, guint8 * buffer, gsize * digest_len);
gchar * (g_compute_hmac_for_data)(GChecksumType digest_type, const guchar * key, gsize key_len, const guchar * data, gsize length);
gchar * (g_compute_hmac_for_string)(GChecksumType digest_type, const guchar * key, gsize key_len, const gchar * str, gssize length);
gchar * (g_compute_hmac_for_bytes)(GChecksumType digest_type, GBytes * key, GBytes * data);
void (g_hook_list_init)(GHookList * hook_list, guint hook_size);
void (g_hook_list_clear)(GHookList * hook_list);
GHook * (g_hook_alloc)(GHookList * hook_list);
void (g_hook_free)(GHookList * hook_list, GHook * hook);
GHook * (g_hook_ref)(GHookList * hook_list, GHook * hook);
void (g_hook_unref)(GHookList * hook_list, GHook * hook);
gboolean (g_hook_destroy)(GHookList * hook_list, gulong hook_id);
void (g_hook_destroy_link)(GHookList * hook_list, GHook * hook);
void (g_hook_prepend)(GHookList * hook_list, GHook * hook);
void (g_hook_insert_before)(GHookList * hook_list, GHook * sibling, GHook * hook);
void (g_hook_insert_sorted)(GHookList * hook_list, GHook * hook, GHookCompareFunc func);
GHook * (g_hook_get)(GHookList * hook_list, gulong hook_id);
GHook * (g_hook_find)(GHookList * hook_list, gboolean need_valids, GHookFindFunc func, gpointer data);
GHook * (g_hook_find_data)(GHookList * hook_list, gboolean need_valids, gpointer data);
GHook * (g_hook_find_func)(GHookList * hook_list, gboolean need_valids, gpointer func);
GHook * (g_hook_find_func_data)(GHookList * hook_list, gboolean need_valids, gpointer func, gpointer data);
GHook * (g_hook_first_valid)(GHookList * hook_list, gboolean may_be_in_call);
GHook * (g_hook_next_valid)(GHookList * hook_list, GHook * hook, gboolean may_be_in_call);
gint (g_hook_compare_ids)(GHook * new_hook, GHook * sibling);
void (g_hook_list_invoke)(GHookList * hook_list, gboolean may_recurse);
void (g_hook_list_invoke_check)(GHookList * hook_list, gboolean may_recurse);
void (g_hook_list_marshal)(GHookList * hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data);
void (g_hook_list_marshal_check)(GHookList * hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data);
gboolean (g_hostname_is_non_ascii)(const gchar * hostname);
gboolean (g_hostname_is_ascii_encoded)(const gchar * hostname);
gboolean (g_hostname_is_ip_address)(const gchar * hostname);
gchar * (g_hostname_to_ascii)(const gchar * hostname);
gchar * (g_hostname_to_unicode)(const gchar * hostname);
gint (g_poll)(GPollFD * fds, guint nfds, gint timeout);
GSList * (g_slist_alloc)(void);
void (g_slist_free)(GSList * list);
void (g_slist_free_1)(GSList * list);
void (g_slist_free_full)(GSList * list, GDestroyNotify free_func);
GSList * (g_slist_append)(GSList * list, gpointer data);
GSList * (g_slist_prepend)(GSList * list, gpointer data);
GSList * (g_slist_insert)(GSList * list, gpointer data, gint position);
GSList * (g_slist_insert_sorted)(GSList * list, gpointer data, GCompareFunc func);
GSList * (g_slist_insert_sorted_with_data)(GSList * list, gpointer data, GCompareDataFunc func, gpointer user_data);
GSList * (g_slist_insert_before)(GSList * slist, GSList * sibling, gpointer data);
GSList * (g_slist_concat)(GSList * list1, GSList * list2);
GSList * (g_slist_remove)(GSList * list, gconstpointer data);
GSList * (g_slist_remove_all)(GSList * list, gconstpointer data);
GSList * (g_slist_remove_link)(GSList * list, GSList * link_);
GSList * (g_slist_delete_link)(GSList * list, GSList * link_);
GSList * (g_slist_reverse)(GSList * list);
GSList * (g_slist_copy)(GSList * list);
GSList * (g_slist_copy_deep)(GSList * list, GCopyFunc func, gpointer user_data);
GSList * (g_slist_nth)(GSList * list, guint n);
GSList * (g_slist_find)(GSList * list, gconstpointer data);
GSList * (g_slist_find_custom)(GSList * list, gconstpointer data, GCompareFunc func);
gint (g_slist_position)(GSList * list, GSList * llink);
gint (g_slist_index)(GSList * list, gconstpointer data);
GSList * (g_slist_last)(GSList * list);
guint (g_slist_length)(GSList * list);
void (g_slist_foreach)(GSList * list, GFunc func, gpointer user_data);
GSList * (g_slist_sort)(GSList * list, GCompareFunc compare_func);
GSList * (g_slist_sort_with_data)(GSList * list, GCompareDataFunc compare_func, gpointer user_data);
gpointer (g_slist_nth_data)(GSList * list, guint n);
void (g_clear_slist)(GSList * * slist_ptr, GDestroyNotify destroy);
GMainContext * (g_main_context_new)(void);
GMainContext * (g_main_context_new_with_flags)(GMainContextFlags flags);
GMainContext * (g_main_context_ref)(GMainContext * context);
void (g_main_context_unref)(GMainContext * context);
GMainContext * (g_main_context_default)(void);
gboolean (g_main_context_iteration)(GMainContext * context, gboolean may_block);
gboolean (g_main_context_pending)(GMainContext * context);
GSource * (g_main_context_find_source_by_id)(GMainContext * context, guint source_id);
GSource * (g_main_context_find_source_by_user_data)(GMainContext * context, gpointer user_data);
GSource * (g_main_context_find_source_by_funcs_user_data)(GMainContext * context, GSourceFuncs * funcs, gpointer user_data);
void (g_main_context_wakeup)(GMainContext * context);
gboolean (g_main_context_acquire)(GMainContext * context);
void (g_main_context_release)(GMainContext * context);
gboolean (g_main_context_is_owner)(GMainContext * context);
gboolean (g_main_context_wait)(GMainContext * context, GCond * cond, GMutex * mutex);
gboolean (g_main_context_prepare)(GMainContext * context, gint * priority);
gint (g_main_context_query)(GMainContext * context, gint max_priority, gint * timeout_, GPollFD * fds, gint n_fds);
gboolean (g_main_context_check)(GMainContext * context, gint max_priority, GPollFD * fds, gint n_fds);
void (g_main_context_dispatch)(GMainContext * context);
void (g_main_context_set_poll_func)(GMainContext * context, GPollFunc func);
GPollFunc (g_main_context_get_poll_func)(GMainContext * context);
void (g_main_context_add_poll)(GMainContext * context, GPollFD * fd, gint priority);
void (g_main_context_remove_poll)(GMainContext * context, GPollFD * fd);
gint (g_main_depth)(void);
GSource * (g_main_current_source)(void);
void (g_main_context_push_thread_default)(GMainContext * context);
void (g_main_context_pop_thread_default)(GMainContext * context);
GMainContext * (g_main_context_get_thread_default)(void);
GMainContext * (g_main_context_ref_thread_default)(void);
GMainLoop * (g_main_loop_new)(GMainContext * context, gboolean is_running);
void (g_main_loop_run)(GMainLoop * loop);
void (g_main_loop_quit)(GMainLoop * loop);
GMainLoop * (g_main_loop_ref)(GMainLoop * loop);
void (g_main_loop_unref)(GMainLoop * loop);
gboolean (g_main_loop_is_running)(GMainLoop * loop);
GMainContext * (g_main_loop_get_context)(GMainLoop * loop);
GSource * (g_source_new)(GSourceFuncs * source_funcs, guint struct_size);
void (g_source_set_dispose_function)(GSource * source, GSourceDisposeFunc dispose);
GSource * (g_source_ref)(GSource * source);
void (g_source_unref)(GSource * source);
guint (g_source_attach)(GSource * source, GMainContext * context);
void (g_source_destroy)(GSource * source);
void (g_source_set_priority)(GSource * source, gint priority);
gint (g_source_get_priority)(GSource * source);
void (g_source_set_can_recurse)(GSource * source, gboolean can_recurse);
gboolean (g_source_get_can_recurse)(GSource * source);
guint (g_source_get_id)(GSource * source);
GMainContext * (g_source_get_context)(GSource * source);
void (g_source_set_callback)(GSource * source, GSourceFunc func, gpointer data, GDestroyNotify notify);
void (g_source_set_funcs)(GSource * source, GSourceFuncs * funcs);
gboolean (g_source_is_destroyed)(GSource * source);
void (g_source_set_name)(GSource * source, const char * name);
void (g_source_set_static_name)(GSource * source, const char * name);
const char * (g_source_get_name)(GSource * source);
void (g_source_set_name_by_id)(guint tag, const char * name);
void (g_source_set_ready_time)(GSource * source, gint64 ready_time);
gint64 (g_source_get_ready_time)(GSource * source);
gpointer (g_source_add_unix_fd)(GSource * source, gint fd, GIOCondition events);
void (g_source_modify_unix_fd)(GSource * source, gpointer tag, GIOCondition new_events);
void (g_source_remove_unix_fd)(GSource * source, gpointer tag);
GIOCondition (g_source_query_unix_fd)(GSource * source, gpointer tag);
void (g_source_set_callback_indirect)(GSource * source, gpointer callback_data, GSourceCallbackFuncs * callback_funcs);
void (g_source_add_poll)(GSource * source, GPollFD * fd);
void (g_source_remove_poll)(GSource * source, GPollFD * fd);
void (g_source_add_child_source)(GSource * source, GSource * child_source);
void (g_source_remove_child_source)(GSource * source, GSource * child_source);
void (g_source_get_current_time)(GSource * source, GTimeVal * timeval);
gint64 (g_source_get_time)(GSource * source);
GSource * (g_idle_source_new)(void);
GSource * (g_child_watch_source_new)(GPid pid);
GSource * (g_timeout_source_new)(guint interval);
GSource * (g_timeout_source_new_seconds)(guint interval);
void (g_get_current_time)(GTimeVal * result);
gint64 (g_get_monotonic_time)(void);
gint64 (g_get_real_time)(void);
gboolean (g_source_remove)(guint tag);
gboolean (g_source_remove_by_user_data)(gpointer user_data);
gboolean (g_source_remove_by_funcs_user_data)(GSourceFuncs * funcs, gpointer user_data);
void (g_clear_handle_id)(guint * tag_ptr, GClearHandleFunc clear_func);
guint (g_timeout_add_full)(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);
guint (g_timeout_add)(guint interval, GSourceFunc function, gpointer data);
guint (g_timeout_add_once)(guint interval, GSourceOnceFunc function, gpointer data);
guint (g_timeout_add_seconds_full)(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);
guint (g_timeout_add_seconds)(guint interval, GSourceFunc function, gpointer data);
guint (g_timeout_add_seconds_once)(guint interval, GSourceOnceFunc function, gpointer data);
guint (g_child_watch_add_full)(gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify);
guint (g_child_watch_add)(GPid pid, GChildWatchFunc function, gpointer data);
guint (g_idle_add)(GSourceFunc function, gpointer data);
guint (g_idle_add_full)(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);
guint (g_idle_add_once)(GSourceOnceFunc function, gpointer data);
gboolean (g_idle_remove_by_data)(gpointer data);
void (g_main_context_invoke_full)(GMainContext * context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);
void (g_main_context_invoke)(GMainContext * context, GSourceFunc function, gpointer data);
guint32 (g_unicode_script_to_iso15924)(GUnicodeScript script);
GUnicodeScript (g_unicode_script_from_iso15924)(guint32 iso15924);
gboolean (g_unichar_isalnum)(gunichar c);
gboolean (g_unichar_isalpha)(gunichar c);
gboolean (g_unichar_iscntrl)(gunichar c);
gboolean (g_unichar_isdigit)(gunichar c);
gboolean (g_unichar_isgraph)(gunichar c);
gboolean (g_unichar_islower)(gunichar c);
gboolean (g_unichar_isprint)(gunichar c);
gboolean (g_unichar_ispunct)(gunichar c);
gboolean (g_unichar_isspace)(gunichar c);
gboolean (g_unichar_isupper)(gunichar c);
gboolean (g_unichar_isxdigit)(gunichar c);
gboolean (g_unichar_istitle)(gunichar c);
gboolean (g_unichar_isdefined)(gunichar c);
gboolean (g_unichar_iswide)(gunichar c);
gboolean (g_unichar_iswide_cjk)(gunichar c);
gboolean (g_unichar_iszerowidth)(gunichar c);
gboolean (g_unichar_ismark)(gunichar c);
gunichar (g_unichar_toupper)(gunichar c);
gunichar (g_unichar_tolower)(gunichar c);
gunichar (g_unichar_totitle)(gunichar c);
gint (g_unichar_digit_value)(gunichar c);
gint (g_unichar_xdigit_value)(gunichar c);
GUnicodeType (g_unichar_type)(gunichar c);
GUnicodeBreakType (g_unichar_break_type)(gunichar c);
gint (g_unichar_combining_class)(gunichar uc);
gboolean (g_unichar_get_mirror_char)(gunichar ch, gunichar * mirrored_ch);
GUnicodeScript (g_unichar_get_script)(gunichar ch);
gboolean (g_unichar_validate)(gunichar ch);
gboolean (g_unichar_compose)(gunichar a, gunichar b, gunichar * ch);
gboolean (g_unichar_decompose)(gunichar ch, gunichar * a, gunichar * b);
gsize (g_unichar_fully_decompose)(gunichar ch, gboolean compat, gunichar * result, gsize result_len);
void (g_unicode_canonical_ordering)(gunichar * string, gsize len);
gunichar * (g_unicode_canonical_decomposition)(gunichar ch, gsize * result_len);
gunichar (g_utf8_get_char)(const gchar * p);
gunichar (g_utf8_get_char_validated)(const gchar * p, gssize max_len);
gchar * (g_utf8_offset_to_pointer)(const gchar * str, glong offset);
glong (g_utf8_pointer_to_offset)(const gchar * str, const gchar * pos);
gchar * (g_utf8_prev_char)(const gchar * p);
gchar * (g_utf8_find_next_char)(const gchar * p, const gchar * end);
gchar * (g_utf8_find_prev_char)(const gchar * str, const gchar * p);
glong (g_utf8_strlen)(const gchar * p, gssize max);
gchar * (g_utf8_substring)(const gchar * str, glong start_pos, glong end_pos);
gchar * (g_utf8_strncpy)(gchar * dest, const gchar * src, gsize n);
gchar * (g_utf8_truncate_middle)(const gchar * string, gsize truncate_length);
gchar * (g_utf8_strchr)(const gchar * p, gssize len, gunichar c);
gchar * (g_utf8_strrchr)(const gchar * p, gssize len, gunichar c);
gchar * (g_utf8_strreverse)(const gchar * str, gssize len);
gunichar2 * (g_utf8_to_utf16)(const gchar * str, glong len, glong * items_read, glong * items_written, GError * * error);
gunichar * (g_utf8_to_ucs4)(const gchar * str, glong len, glong * items_read, glong * items_written, GError * * error);
gunichar * (g_utf8_to_ucs4_fast)(const gchar * str, glong len, glong * items_written);
gunichar * (g_utf16_to_ucs4)(const gunichar2 * str, glong len, glong * items_read, glong * items_written, GError * * error);
gchar * (g_utf16_to_utf8)(const gunichar2 * str, glong len, glong * items_read, glong * items_written, GError * * error);
gunichar2 * (g_ucs4_to_utf16)(const gunichar * str, glong len, glong * items_read, glong * items_written, GError * * error);
gchar * (g_ucs4_to_utf8)(const gunichar * str, glong len, glong * items_read, glong * items_written, GError * * error);
gint (g_unichar_to_utf8)(gunichar c, gchar * outbuf);
gboolean (g_utf8_validate)(const gchar * str, gssize max_len, const gchar * * end);
gboolean (g_utf8_validate_len)(const gchar * str, gsize max_len, const gchar * * end);
gchar * (g_utf8_strup)(const gchar * str, gssize len);
gchar * (g_utf8_strdown)(const gchar * str, gssize len);
gchar * (g_utf8_casefold)(const gchar * str, gssize len);
gchar * (g_utf8_normalize)(const gchar * str, gssize len, GNormalizeMode mode);
gint (g_utf8_collate)(const gchar * str1, const gchar * str2);
gchar * (g_utf8_collate_key)(const gchar * str, gssize len);
gchar * (g_utf8_collate_key_for_filename)(const gchar * str, gssize len);
gchar * (g_utf8_make_valid)(const gchar * str, gssize len);
gchar (g_ascii_tolower)(gchar c);
gchar (g_ascii_toupper)(gchar c);
gint (g_ascii_digit_value)(gchar c);
gint (g_ascii_xdigit_value)(gchar c);
gchar * (g_strdelimit)(gchar * string, const gchar * delimiters, gchar new_delimiter);
gchar * (g_strcanon)(gchar * string, const gchar * valid_chars, gchar substitutor);
const gchar * (g_strerror)(gint errnum);
const gchar * (g_strsignal)(gint signum);
gchar * (g_strreverse)(gchar * string);
gsize (g_strlcpy)(gchar * dest, const gchar * src, gsize dest_size);
gsize (g_strlcat)(gchar * dest, const gchar * src, gsize dest_size);
gchar * (g_strstr_len)(const gchar * haystack, gssize haystack_len, const gchar * needle);
gchar * (g_strrstr)(const gchar * haystack, const gchar * needle);
gchar * (g_strrstr_len)(const gchar * haystack, gssize haystack_len, const gchar * needle);
gboolean (g_str_has_suffix)(const gchar * str, const gchar * suffix);
gboolean (g_str_has_prefix)(const gchar * str, const gchar * prefix);
gdouble (g_strtod)(const gchar * nptr, gchar * * endptr);
gdouble (g_ascii_strtod)(const gchar * nptr, gchar * * endptr);
guint64 (g_ascii_strtoull)(const gchar * nptr, gchar * * endptr, guint base);
gint64 (g_ascii_strtoll)(const gchar * nptr, gchar * * endptr, guint base);
gchar * (g_ascii_dtostr)(gchar * buffer, gint buf_len, gdouble d);
gchar * (g_ascii_formatd)(gchar * buffer, gint buf_len, const gchar * format, gdouble d);
gchar * (g_strchug)(gchar * string);
gchar * (g_strchomp)(gchar * string);
gint (g_ascii_strcasecmp)(const gchar * s1, const gchar * s2);
gint (g_ascii_strncasecmp)(const gchar * s1, const gchar * s2, gsize n);
gchar * (g_ascii_strdown)(const gchar * str, gssize len);
gchar * (g_ascii_strup)(const gchar * str, gssize len);
gboolean (g_str_is_ascii)(const gchar * str);
gint (g_strcasecmp)(const gchar * s1, const gchar * s2);
gint (g_strncasecmp)(const gchar * s1, const gchar * s2, guint n);
gchar * (g_strdown)(gchar * string);
gchar * (g_strup)(gchar * string);
gchar * (g_strdup)(const gchar * str);
gchar * (g_strdup_printf)(const gchar * format, ...);
gchar * (g_strdup_vprintf)(const gchar * format, va_list args);
gchar * (g_strndup)(const gchar * str, gsize n);
gchar * (g_strnfill)(gsize length, gchar fill_char);
gchar * (g_strcompress)(const gchar * source);
gchar * (g_strescape)(const gchar * source, const gchar * exceptions);
gpointer (g_memdup)(gconstpointer mem, guint byte_size);
gpointer (g_memdup2)(gconstpointer mem, gsize byte_size);
gchar * * (g_strsplit)(const gchar * string, const gchar * delimiter, gint max_tokens);
gchar * * (g_strsplit_set)(const gchar * string, const gchar * delimiters, gint max_tokens);
gchar * (g_strjoinv)(const gchar * separator, gchar * * str_array);
void (g_strfreev)(gchar * * str_array);
gchar * * (g_strdupv)(gchar * * str_array);
guint (g_strv_length)(gchar * * str_array);
gchar * (g_stpcpy)(gchar * dest, const char * src);
gchar * (g_str_to_ascii)(const gchar * str, const gchar * from_locale);
gchar * * (g_str_tokenize_and_fold)(const gchar * string, const gchar * translit_locale, gchar * * * ascii_alternates);
gboolean (g_str_match_string)(const gchar * search_term, const gchar * potential_hit, gboolean accept_alternates);
gboolean (g_strv_contains)(const gchar * const * strv, const gchar * str);
gboolean (g_strv_equal)(const gchar * const * strv1, const gchar * const * strv2);
GQuark (g_number_parser_error_quark)(void);
gboolean (g_ascii_string_to_signed)(const gchar * str, guint base, gint64 min, gint64 max, gint64 * out_num, GError * * error);
gboolean (g_ascii_string_to_unsigned)(const gchar * str, guint base, guint64 min, guint64 max, guint64 * out_num, GError * * error);
GString * (g_string_new)(const gchar * init);
GString * (g_string_new_take)(gchar * init);
GString * (g_string_new_len)(const gchar * init, gssize len);
GString * (g_string_sized_new)(gsize dfl_size);
gchar * (g_string_free)(GString * string, gboolean free_segment);
gchar * (g_string_free_and_steal)(GString * string);
GBytes * (g_string_free_to_bytes)(GString * string);
gboolean (g_string_equal)(const GString * v, const GString * v2);
guint (g_string_hash)(const GString * str);
GString * (g_string_assign)(GString * string, const gchar * rval);
GString * (g_string_truncate)(GString * string, gsize len);
GString * (g_string_set_size)(GString * string, gsize len);
GString * (g_string_insert_len)(GString * string, gssize pos, const gchar * val, gssize len);
GString * (g_string_append)(GString * string, const gchar * val);
GString * (g_string_append_len)(GString * string, const gchar * val, gssize len);
GString * (g_string_append_c)(GString * string, gchar c);
GString * (g_string_append_unichar)(GString * string, gunichar wc);
GString * (g_string_prepend)(GString * string, const gchar * val);
GString * (g_string_prepend_c)(GString * string, gchar c);
GString * (g_string_prepend_unichar)(GString * string, gunichar wc);
GString * (g_string_prepend_len)(GString * string, const gchar * val, gssize len);
GString * (g_string_insert)(GString * string, gssize pos, const gchar * val);
GString * (g_string_insert_c)(GString * string, gssize pos, gchar c);
GString * (g_string_insert_unichar)(GString * string, gssize pos, gunichar wc);
GString * (g_string_overwrite)(GString * string, gsize pos, const gchar * val);
GString * (g_string_overwrite_len)(GString * string, gsize pos, const gchar * val, gssize len);
GString * (g_string_erase)(GString * string, gssize pos, gssize len);
guint (g_string_replace)(GString * string, const gchar * find, const gchar * replace, guint limit);
GString * (g_string_ascii_down)(GString * string);
GString * (g_string_ascii_up)(GString * string);
void (g_string_vprintf)(GString * string, const gchar * format, va_list args);
void (g_string_printf)(GString * string, const gchar * format, ...);
void (g_string_append_vprintf)(GString * string, const gchar * format, va_list args);
void (g_string_append_printf)(GString * string, const gchar * format, ...);
GString * (g_string_append_uri_escaped)(GString * string, const gchar * unescaped, const gchar * reserved_chars_allowed, gboolean allow_utf8);
GString * (g_string_down)(GString * string);
GString * (g_string_up)(GString * string);
void (g_io_channel_init)(GIOChannel * channel);
GIOChannel * (g_io_channel_ref)(GIOChannel * channel);
void (g_io_channel_unref)(GIOChannel * channel);
GIOError (g_io_channel_read)(GIOChannel * channel, gchar * buf, gsize count, gsize * bytes_read);
GIOError (g_io_channel_write)(GIOChannel * channel, const gchar * buf, gsize count, gsize * bytes_written);
GIOError (g_io_channel_seek)(GIOChannel * channel, gint64 offset, GSeekType type);
void (g_io_channel_close)(GIOChannel * channel);
GIOStatus (g_io_channel_shutdown)(GIOChannel * channel, gboolean flush, GError * * err);
guint (g_io_add_watch_full)(GIOChannel * channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify);
GSource * (g_io_create_watch)(GIOChannel * channel, GIOCondition condition);
guint (g_io_add_watch)(GIOChannel * channel, GIOCondition condition, GIOFunc func, gpointer user_data);
void (g_io_channel_set_buffer_size)(GIOChannel * channel, gsize size);
gsize (g_io_channel_get_buffer_size)(GIOChannel * channel);
GIOCondition (g_io_channel_get_buffer_condition)(GIOChannel * channel);
GIOStatus (g_io_channel_set_flags)(GIOChannel * channel, GIOFlags flags, GError * * error);
GIOFlags (g_io_channel_get_flags)(GIOChannel * channel);
void (g_io_channel_set_line_term)(GIOChannel * channel, const gchar * line_term, gint length);
const gchar * (g_io_channel_get_line_term)(GIOChannel * channel, gint * length);
void (g_io_channel_set_buffered)(GIOChannel * channel, gboolean buffered);
gboolean (g_io_channel_get_buffered)(GIOChannel * channel);
GIOStatus (g_io_channel_set_encoding)(GIOChannel * channel, const gchar * encoding, GError * * error);
const gchar * (g_io_channel_get_encoding)(GIOChannel * channel);
void (g_io_channel_set_close_on_unref)(GIOChannel * channel, gboolean do_close);
gboolean (g_io_channel_get_close_on_unref)(GIOChannel * channel);
GIOStatus (g_io_channel_flush)(GIOChannel * channel, GError * * error);
GIOStatus (g_io_channel_read_line)(GIOChannel * channel, gchar * * str_return, gsize * length, gsize * terminator_pos, GError * * error);
GIOStatus (g_io_channel_read_line_string)(GIOChannel * channel, GString * buffer, gsize * terminator_pos, GError * * error);
GIOStatus (g_io_channel_read_to_end)(GIOChannel * channel, gchar * * str_return, gsize * length, GError * * error);
GIOStatus (g_io_channel_read_chars)(GIOChannel * channel, gchar * buf, gsize count, gsize * bytes_read, GError * * error);
GIOStatus (g_io_channel_read_unichar)(GIOChannel * channel, gunichar * thechar, GError * * error);
GIOStatus (g_io_channel_write_chars)(GIOChannel * channel, const gchar * buf, gssize count, gsize * bytes_written, GError * * error);
GIOStatus (g_io_channel_write_unichar)(GIOChannel * channel, gunichar thechar, GError * * error);
GIOStatus (g_io_channel_seek_position)(GIOChannel * channel, gint64 offset, GSeekType type, GError * * error);
GIOChannel * (g_io_channel_new_file)(const gchar * filename, const gchar * mode, GError * * error);
GQuark (g_io_channel_error_quark)(void);
GIOChannelError (g_io_channel_error_from_errno)(gint en);
GIOChannel * (g_io_channel_unix_new)(int fd);
gint (g_io_channel_unix_get_fd)(GIOChannel * channel);
GQuark (g_key_file_error_quark)(void);
GKeyFile * (g_key_file_new)(void);
GKeyFile * (g_key_file_ref)(GKeyFile * key_file);
void (g_key_file_unref)(GKeyFile * key_file);
void (g_key_file_free)(GKeyFile * key_file);
void (g_key_file_set_list_separator)(GKeyFile * key_file, gchar separator);
gboolean (g_key_file_load_from_file)(GKeyFile * key_file, const gchar * file, GKeyFileFlags flags, GError * * error);
gboolean (g_key_file_load_from_data)(GKeyFile * key_file, const gchar * data, gsize length, GKeyFileFlags flags, GError * * error);
gboolean (g_key_file_load_from_bytes)(GKeyFile * key_file, GBytes * bytes, GKeyFileFlags flags, GError * * error);
gboolean (g_key_file_load_from_dirs)(GKeyFile * key_file, const gchar * file, const gchar * * search_dirs, gchar * * full_path, GKeyFileFlags flags, GError * * error);
gboolean (g_key_file_load_from_data_dirs)(GKeyFile * key_file, const gchar * file, gchar * * full_path, GKeyFileFlags flags, GError * * error);
gchar * (g_key_file_to_data)(GKeyFile * key_file, gsize * length, GError * * error);
gboolean (g_key_file_save_to_file)(GKeyFile * key_file, const gchar * filename, GError * * error);
gchar * (g_key_file_get_start_group)(GKeyFile * key_file);
gchar * * (g_key_file_get_groups)(GKeyFile * key_file, gsize * length);
gchar * * (g_key_file_get_keys)(GKeyFile * key_file, const gchar * group_name, gsize * length, GError * * error);
gboolean (g_key_file_has_group)(GKeyFile * key_file, const gchar * group_name);
gboolean (g_key_file_has_key)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
gchar * (g_key_file_get_value)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
void (g_key_file_set_value)(GKeyFile * key_file, const gchar * group_name, const gchar * key, const gchar * value);
gchar * (g_key_file_get_string)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
void (g_key_file_set_string)(GKeyFile * key_file, const gchar * group_name, const gchar * key, const gchar * string);
gchar * (g_key_file_get_locale_string)(GKeyFile * key_file, const gchar * group_name, const gchar * key, const gchar * locale, GError * * error);
gchar * (g_key_file_get_locale_for_key)(GKeyFile * key_file, const gchar * group_name, const gchar * key, const gchar * locale);
void (g_key_file_set_locale_string)(GKeyFile * key_file, const gchar * group_name, const gchar * key, const gchar * locale, const gchar * string);
gboolean (g_key_file_get_boolean)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
void (g_key_file_set_boolean)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gboolean value);
gint (g_key_file_get_integer)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
void (g_key_file_set_integer)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gint value);
gint64 (g_key_file_get_int64)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
void (g_key_file_set_int64)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gint64 value);
guint64 (g_key_file_get_uint64)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
void (g_key_file_set_uint64)(GKeyFile * key_file, const gchar * group_name, const gchar * key, guint64 value);
gdouble (g_key_file_get_double)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
void (g_key_file_set_double)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gdouble value);
gchar * * (g_key_file_get_string_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gsize * length, GError * * error);
void (g_key_file_set_string_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, const gchar * const list[], gsize length);
gchar * * (g_key_file_get_locale_string_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, const gchar * locale, gsize * length, GError * * error);
void (g_key_file_set_locale_string_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, const gchar * locale, const gchar * const list[], gsize length);
gboolean * (g_key_file_get_boolean_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gsize * length, GError * * error);
void (g_key_file_set_boolean_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gboolean list[], gsize length);
gint * (g_key_file_get_integer_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gsize * length, GError * * error);
void (g_key_file_set_double_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gdouble list[], gsize length);
gdouble * (g_key_file_get_double_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gsize * length, GError * * error);
void (g_key_file_set_integer_list)(GKeyFile * key_file, const gchar * group_name, const gchar * key, gint list[], gsize length);
gboolean (g_key_file_set_comment)(GKeyFile * key_file, const gchar * group_name, const gchar * key, const gchar * comment, GError * * error);
gchar * (g_key_file_get_comment)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
gboolean (g_key_file_remove_comment)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
gboolean (g_key_file_remove_key)(GKeyFile * key_file, const gchar * group_name, const gchar * key, GError * * error);
gboolean (g_key_file_remove_group)(GKeyFile * key_file, const gchar * group_name, GError * * error);
GMappedFile * (g_mapped_file_new)(const gchar * filename, gboolean writable, GError * * error);
GMappedFile * (g_mapped_file_new_from_fd)(gint fd, gboolean writable, GError * * error);
gsize (g_mapped_file_get_length)(GMappedFile * file);
gchar * (g_mapped_file_get_contents)(GMappedFile * file);
GBytes * (g_mapped_file_get_bytes)(GMappedFile * file);
GMappedFile * (g_mapped_file_ref)(GMappedFile * file);
void (g_mapped_file_unref)(GMappedFile * file);
void (g_mapped_file_free)(GMappedFile * file);
GQuark (g_markup_error_quark)(void);
GMarkupParseContext * (g_markup_parse_context_new)(const GMarkupParser * parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify);
GMarkupParseContext * (g_markup_parse_context_ref)(GMarkupParseContext * context);
void (g_markup_parse_context_unref)(GMarkupParseContext * context);
void (g_markup_parse_context_free)(GMarkupParseContext * context);
gboolean (g_markup_parse_context_parse)(GMarkupParseContext * context, const gchar * text, gssize text_len, GError * * error);
void (g_markup_parse_context_push)(GMarkupParseContext * context, const GMarkupParser * parser, gpointer user_data);
gpointer (g_markup_parse_context_pop)(GMarkupParseContext * context);
gboolean (g_markup_parse_context_end_parse)(GMarkupParseContext * context, GError * * error);
const gchar * (g_markup_parse_context_get_element)(GMarkupParseContext * context);
const GSList * (g_markup_parse_context_get_element_stack)(GMarkupParseContext * context);
void (g_markup_parse_context_get_position)(GMarkupParseContext * context, gint * line_number, gint * char_number);
gpointer (g_markup_parse_context_get_user_data)(GMarkupParseContext * context);
gchar * (g_markup_escape_text)(const gchar * text, gssize length);
gchar * (g_markup_printf_escaped)(const char * format, ...);
gchar * (g_markup_vprintf_escaped)(const char * format, va_list args);
gboolean (g_variant_type_string_is_valid)(const gchar * type_string);
gboolean (g_variant_type_string_scan)(const gchar * string, const gchar * limit, const gchar * * endptr);
void (g_variant_type_free)(GVariantType * type);
GVariantType * (g_variant_type_copy)(const GVariantType * type);
GVariantType * (g_variant_type_new)(const gchar * type_string);
gsize (g_variant_type_get_string_length)(const GVariantType * type);
const gchar * (g_variant_type_peek_string)(const GVariantType * type);
gchar * (g_variant_type_dup_string)(const GVariantType * type);
gboolean (g_variant_type_is_definite)(const GVariantType * type);
gboolean (g_variant_type_is_container)(const GVariantType * type);
gboolean (g_variant_type_is_basic)(const GVariantType * type);
gboolean (g_variant_type_is_maybe)(const GVariantType * type);
gboolean (g_variant_type_is_array)(const GVariantType * type);
gboolean (g_variant_type_is_tuple)(const GVariantType * type);
gboolean (g_variant_type_is_dict_entry)(const GVariantType * type);
gboolean (g_variant_type_is_variant)(const GVariantType * type);
guint (g_variant_type_hash)(gconstpointer type);
gboolean (g_variant_type_equal)(gconstpointer type1, gconstpointer type2);
gboolean (g_variant_type_is_subtype_of)(const GVariantType * type, const GVariantType * supertype);
const GVariantType * (g_variant_type_element)(const GVariantType * type);
const GVariantType * (g_variant_type_first)(const GVariantType * type);
const GVariantType * (g_variant_type_next)(const GVariantType * type);
gsize (g_variant_type_n_items)(const GVariantType * type);
const GVariantType * (g_variant_type_key)(const GVariantType * type);
const GVariantType * (g_variant_type_value)(const GVariantType * type);
GVariantType * (g_variant_type_new_array)(const GVariantType * element);
GVariantType * (g_variant_type_new_maybe)(const GVariantType * element);
GVariantType * (g_variant_type_new_tuple)(const GVariantType * const * items, gint length);
GVariantType * (g_variant_type_new_dict_entry)(const GVariantType * key, const GVariantType * value);
const GVariantType * (g_variant_type_checked_)(const gchar * type_string);
gsize (g_variant_type_string_get_depth_)(const gchar * type_string);
void (g_variant_unref)(GVariant * value);
GVariant * (g_variant_ref)(GVariant * value);
GVariant * (g_variant_ref_sink)(GVariant * value);
gboolean (g_variant_is_floating)(GVariant * value);
GVariant * (g_variant_take_ref)(GVariant * value);
const GVariantType * (g_variant_get_type)(GVariant * value);
const gchar * (g_variant_get_type_string)(GVariant * value);
gboolean (g_variant_is_of_type)(GVariant * value, const GVariantType * type);
gboolean (g_variant_is_container)(GVariant * value);
GVariantClass (g_variant_classify)(GVariant * value);
GVariant * (g_variant_new_boolean)(gboolean value);
GVariant * (g_variant_new_byte)(guint8 value);
GVariant * (g_variant_new_int16)(gint16 value);
GVariant * (g_variant_new_uint16)(guint16 value);
GVariant * (g_variant_new_int32)(gint32 value);
GVariant * (g_variant_new_uint32)(guint32 value);
GVariant * (g_variant_new_int64)(gint64 value);
GVariant * (g_variant_new_uint64)(guint64 value);
GVariant * (g_variant_new_handle)(gint32 value);
GVariant * (g_variant_new_double)(gdouble value);
GVariant * (g_variant_new_string)(const gchar * string);
GVariant * (g_variant_new_take_string)(gchar * string);
GVariant * (g_variant_new_object_path)(const gchar * object_path);
gboolean (g_variant_is_object_path)(const gchar * string);
GVariant * (g_variant_new_signature)(const gchar * signature);
gboolean (g_variant_is_signature)(const gchar * string);
GVariant * (g_variant_new_variant)(GVariant * value);
GVariant * (g_variant_new_strv)(const gchar * const * strv, gssize length);
GVariant * (g_variant_new_objv)(const gchar * const * strv, gssize length);
GVariant * (g_variant_new_bytestring)(const gchar * string);
GVariant * (g_variant_new_bytestring_array)(const gchar * const * strv, gssize length);
GVariant * (g_variant_new_fixed_array)(const GVariantType * element_type, gconstpointer elements, gsize n_elements, gsize element_size);
gboolean (g_variant_get_boolean)(GVariant * value);
guint8 (g_variant_get_byte)(GVariant * value);
gint16 (g_variant_get_int16)(GVariant * value);
guint16 (g_variant_get_uint16)(GVariant * value);
gint32 (g_variant_get_int32)(GVariant * value);
guint32 (g_variant_get_uint32)(GVariant * value);
gint64 (g_variant_get_int64)(GVariant * value);
guint64 (g_variant_get_uint64)(GVariant * value);
gint32 (g_variant_get_handle)(GVariant * value);
gdouble (g_variant_get_double)(GVariant * value);
GVariant * (g_variant_get_variant)(GVariant * value);
const gchar * (g_variant_get_string)(GVariant * value, gsize * length);
gchar * (g_variant_dup_string)(GVariant * value, gsize * length);
const gchar * * (g_variant_get_strv)(GVariant * value, gsize * length);
gchar * * (g_variant_dup_strv)(GVariant * value, gsize * length);
const gchar * * (g_variant_get_objv)(GVariant * value, gsize * length);
gchar * * (g_variant_dup_objv)(GVariant * value, gsize * length);
const gchar * (g_variant_get_bytestring)(GVariant * value);
gchar * (g_variant_dup_bytestring)(GVariant * value, gsize * length);
const gchar * * (g_variant_get_bytestring_array)(GVariant * value, gsize * length);
gchar * * (g_variant_dup_bytestring_array)(GVariant * value, gsize * length);
GVariant * (g_variant_new_maybe)(const GVariantType * child_type, GVariant * child);
GVariant * (g_variant_new_array)(const GVariantType * child_type, GVariant * const * children, gsize n_children);
GVariant * (g_variant_new_tuple)(GVariant * const * children, gsize n_children);
GVariant * (g_variant_new_dict_entry)(GVariant * key, GVariant * value);
GVariant * (g_variant_get_maybe)(GVariant * value);
gsize (g_variant_n_children)(GVariant * value);
GVariant * (g_variant_get_child_value)(GVariant * value, gsize index_);
GVariant * (g_variant_lookup_value)(GVariant * dictionary, const gchar * key, const GVariantType * expected_type);
gconstpointer (g_variant_get_fixed_array)(GVariant * value, gsize * n_elements, gsize element_size);
gsize (g_variant_get_size)(GVariant * value);
gconstpointer (g_variant_get_data)(GVariant * value);
GBytes * (g_variant_get_data_as_bytes)(GVariant * value);
void (g_variant_store)(GVariant * value, gpointer data);
gchar * (g_variant_print)(GVariant * value, gboolean type_annotate);
GString * (g_variant_print_string)(GVariant * value, GString * string, gboolean type_annotate);
guint (g_variant_hash)(gconstpointer value);
gboolean (g_variant_equal)(gconstpointer one, gconstpointer two);
GVariant * (g_variant_get_normal_form)(GVariant * value);
gboolean (g_variant_is_normal_form)(GVariant * value);
GVariant * (g_variant_byteswap)(GVariant * value);
GVariant * (g_variant_new_from_bytes)(const GVariantType * type, GBytes * bytes, gboolean trusted);
GVariant * (g_variant_new_from_data)(const GVariantType * type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data);
GVariantIter * (g_variant_iter_new)(GVariant * value);
gsize (g_variant_iter_init)(GVariantIter * iter, GVariant * value);
GVariantIter * (g_variant_iter_copy)(GVariantIter * iter);
gsize (g_variant_iter_n_children)(GVariantIter * iter);
void (g_variant_iter_free)(GVariantIter * iter);
GVariant * (g_variant_iter_next_value)(GVariantIter * iter);
GQuark (g_variant_parser_get_error_quark)(void);
GQuark (g_variant_parse_error_quark)(void);
GVariantBuilder * (g_variant_builder_new)(const GVariantType * type);
void (g_variant_builder_unref)(GVariantBuilder * builder);
GVariantBuilder * (g_variant_builder_ref)(GVariantBuilder * builder);
void (g_variant_builder_init)(GVariantBuilder * builder, const GVariantType * type);
GVariant * (g_variant_builder_end)(GVariantBuilder * builder);
void (g_variant_builder_clear)(GVariantBuilder * builder);
void (g_variant_builder_open)(GVariantBuilder * builder, const GVariantType * type);
void (g_variant_builder_close)(GVariantBuilder * builder);
void (g_variant_builder_add_value)(GVariantBuilder * builder, GVariant * value);
GVariant * (g_variant_new_va)(const gchar * format_string, const gchar * * endptr, va_list * app);
void (g_variant_get_va)(GVariant * value, const gchar * format_string, const gchar * * endptr, va_list * app);
gboolean (g_variant_check_format_string)(GVariant * value, const gchar * format_string, gboolean copy_only);
GVariant * (g_variant_parse)(const GVariantType * type, const gchar * text, const gchar * limit, const gchar * * endptr, GError * * error);
GVariant * (g_variant_new_parsed)(const gchar * format, ...);
GVariant * (g_variant_new_parsed_va)(const gchar * format, va_list * app);
gchar * (g_variant_parse_error_print_context)(GError * error, const gchar * source_str);
gint (g_variant_compare)(gconstpointer one, gconstpointer two);
GVariantDict * (g_variant_dict_new)(GVariant * from_asv);
void (g_variant_dict_init)(GVariantDict * dict, GVariant * from_asv);
GVariant * (g_variant_dict_lookup_value)(GVariantDict * dict, const gchar * key, const GVariantType * expected_type);
gboolean (g_variant_dict_contains)(GVariantDict * dict, const gchar * key);
void (g_variant_dict_insert_value)(GVariantDict * dict, const gchar * key, GVariant * value);
gboolean (g_variant_dict_remove)(GVariantDict * dict, const gchar * key);
void (g_variant_dict_clear)(GVariantDict * dict);
GVariant * (g_variant_dict_end)(GVariantDict * dict);
GVariantDict * (g_variant_dict_ref)(GVariantDict * dict);
void (g_variant_dict_unref)(GVariantDict * dict);
gsize (g_printf_string_upper_bound)(const gchar * format, va_list args);
guint (g_log_set_handler)(const gchar * log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data);
guint (g_log_set_handler_full)(const gchar * log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data, GDestroyNotify destroy);
void (g_log_remove_handler)(const gchar * log_domain, guint handler_id);
void (g_log_default_handler)(const gchar * log_domain, GLogLevelFlags log_level, const gchar * message, gpointer unused_data);
GLogFunc (g_log_set_default_handler)(GLogFunc log_func, gpointer user_data);
void (g_log)(const gchar * log_domain, GLogLevelFlags log_level, const gchar * format, ...);
void (g_logv)(const gchar * log_domain, GLogLevelFlags log_level, const gchar * format, va_list args);
GLogLevelFlags (g_log_set_fatal_mask)(const gchar * log_domain, GLogLevelFlags fatal_mask);
GLogLevelFlags (g_log_set_always_fatal)(GLogLevelFlags fatal_mask);
void (g_log_structured_array)(GLogLevelFlags log_level, const GLogField * fields, gsize n_fields);
void (g_log_variant)(const gchar * log_domain, GLogLevelFlags log_level, GVariant * fields);
void (g_log_set_writer_func)(GLogWriterFunc func, gpointer user_data, GDestroyNotify user_data_free);
gboolean (g_log_writer_supports_color)(gint output_fd);
gboolean (g_log_writer_is_journald)(gint output_fd);
gchar * (g_log_writer_format_fields)(GLogLevelFlags log_level, const GLogField * fields, gsize n_fields, gboolean use_color);
GLogWriterOutput (g_log_writer_syslog)(GLogLevelFlags log_level, const GLogField * fields, gsize n_fields, gpointer user_data);
GLogWriterOutput (g_log_writer_journald)(GLogLevelFlags log_level, const GLogField * fields, gsize n_fields, gpointer user_data);
GLogWriterOutput (g_log_writer_standard_streams)(GLogLevelFlags log_level, const GLogField * fields, gsize n_fields, gpointer user_data);
GLogWriterOutput (g_log_writer_default)(GLogLevelFlags log_level, const GLogField * fields, gsize n_fields, gpointer user_data);
void (g_log_writer_default_set_use_stderr)(gboolean use_stderr);
gboolean (g_log_writer_default_would_drop)(GLogLevelFlags log_level, const char * log_domain);
void (g_log_writer_default_set_debug_domains)(const gchar * const * domains);
gboolean (g_log_get_debug_enabled)(void);
void (g_log_set_debug_enabled)(gboolean enabled);
void (_g_log_fallback_handler)(const gchar * log_domain, GLogLevelFlags log_level, const gchar * message, gpointer unused_data);
void (g_return_if_fail_warning)(const char * log_domain, const char * pretty_function, const char * expression);
void (g_warn_message)(const char * domain, const char * file, int line, const char * func, const char * warnexpr);
void (g_assert_warning)(const char * log_domain, const char * file, const int line, const char * pretty_function, const char * expression);
void (g_print)(const gchar * format, ...);
GPrintFunc (g_set_print_handler)(GPrintFunc func);
GPrintFunc (g_set_printerr_handler)(GPrintFunc func);
GQuark (g_option_error_quark)(void);
GOptionContext * (g_option_context_new)(const gchar * parameter_string);
void (g_option_context_set_summary)(GOptionContext * context, const gchar * summary);
const gchar * (g_option_context_get_summary)(GOptionContext * context);
void (g_option_context_set_description)(GOptionContext * context, const gchar * description);
const gchar * (g_option_context_get_description)(GOptionContext * context);
void (g_option_context_free)(GOptionContext * context);
void (g_option_context_set_help_enabled)(GOptionContext * context, gboolean help_enabled);
gboolean (g_option_context_get_help_enabled)(GOptionContext * context);
void (g_option_context_set_ignore_unknown_options)(GOptionContext * context, gboolean ignore_unknown);
gboolean (g_option_context_get_ignore_unknown_options)(GOptionContext * context);
void (g_option_context_set_strict_posix)(GOptionContext * context, gboolean strict_posix);
gboolean (g_option_context_get_strict_posix)(GOptionContext * context);
void (g_option_context_add_main_entries)(GOptionContext * context, const GOptionEntry * entries, const gchar * translation_domain);
gboolean (g_option_context_parse)(GOptionContext * context, gint * argc, gchar * * * argv, GError * * error);
gboolean (g_option_context_parse_strv)(GOptionContext * context, gchar * * * arguments, GError * * error);
void (g_option_context_set_translate_func)(GOptionContext * context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);
void (g_option_context_set_translation_domain)(GOptionContext * context, const gchar * domain);
void (g_option_context_add_group)(GOptionContext * context, GOptionGroup * group);
void (g_option_context_set_main_group)(GOptionContext * context, GOptionGroup * group);
GOptionGroup * (g_option_context_get_main_group)(GOptionContext * context);
gchar * (g_option_context_get_help)(GOptionContext * context, gboolean main_help, GOptionGroup * group);
GOptionGroup * (g_option_group_new)(const gchar * name, const gchar * description, const gchar * help_description, gpointer user_data, GDestroyNotify destroy);
void (g_option_group_set_parse_hooks)(GOptionGroup * group, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func);
void (g_option_group_set_error_hook)(GOptionGroup * group, GOptionErrorFunc error_func);
void (g_option_group_free)(GOptionGroup * group);
GOptionGroup * (g_option_group_ref)(GOptionGroup * group);
void (g_option_group_unref)(GOptionGroup * group);
void (g_option_group_add_entries)(GOptionGroup * group, const GOptionEntry * entries);
void (g_option_group_set_translate_func)(GOptionGroup * group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);
void (g_option_group_set_translation_domain)(GOptionGroup * group, const gchar * domain);
GPathBuf * (g_path_buf_new)(void);
GPathBuf * (g_path_buf_new_from_path)(const char * path);
GPathBuf * (g_path_buf_init)(GPathBuf * buf);
GPathBuf * (g_path_buf_init_from_path)(GPathBuf * buf, const char * path);
void (g_path_buf_clear)(GPathBuf * buf);
char * (g_path_buf_clear_to_path)(GPathBuf * buf);
void (g_path_buf_free)(GPathBuf * buf);
char * (g_path_buf_free_to_path)(GPathBuf * buf);
GPathBuf * (g_path_buf_copy)(GPathBuf * buf);
GPathBuf * (g_path_buf_push)(GPathBuf * buf, const char * path);
gboolean (g_path_buf_pop)(GPathBuf * buf);
gboolean (g_path_buf_set_filename)(GPathBuf * buf, const char * file_name);
gboolean (g_path_buf_set_extension)(GPathBuf * buf, const char * extension);
char * (g_path_buf_to_path)(GPathBuf * buf);
gboolean (g_path_buf_equal)(gconstpointer v1, gconstpointer v2);
GPatternSpec * (g_pattern_spec_new)(const gchar * pattern);
void (g_pattern_spec_free)(GPatternSpec * pspec);
GPatternSpec * (g_pattern_spec_copy)(GPatternSpec * pspec);
gboolean (g_pattern_spec_equal)(GPatternSpec * pspec1, GPatternSpec * pspec2);
gboolean (g_pattern_spec_match)(GPatternSpec * pspec, gsize string_length, const gchar * string, const gchar * string_reversed);
gboolean (g_pattern_spec_match_string)(GPatternSpec * pspec, const gchar * string);
gboolean (g_pattern_match)(GPatternSpec * pspec, guint string_length, const gchar * string, const gchar * string_reversed);
gboolean (g_pattern_match_string)(GPatternSpec * pspec, const gchar * string);
gboolean (g_pattern_match_simple)(const gchar * pattern, const gchar * string);
guint (g_spaced_primes_closest)(guint num);
void (g_qsort_with_data)(gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data);
void (g_sort_array)(const void * array, size_t n_elements, size_t element_size, GCompareDataFunc compare_func, void * user_data);
GQueue * (g_queue_new)(void);
void (g_queue_free)(GQueue * queue);
void (g_queue_free_full)(GQueue * queue, GDestroyNotify free_func);
void (g_queue_init)(GQueue * queue);
void (g_queue_clear)(GQueue * queue);
gboolean (g_queue_is_empty)(GQueue * queue);
void (g_queue_clear_full)(GQueue * queue, GDestroyNotify free_func);
guint (g_queue_get_length)(GQueue * queue);
void (g_queue_reverse)(GQueue * queue);
GQueue * (g_queue_copy)(GQueue * queue);
void (g_queue_foreach)(GQueue * queue, GFunc func, gpointer user_data);
GList * (g_queue_find)(GQueue * queue, gconstpointer data);
GList * (g_queue_find_custom)(GQueue * queue, gconstpointer data, GCompareFunc func);
void (g_queue_sort)(GQueue * queue, GCompareDataFunc compare_func, gpointer user_data);
void (g_queue_push_head)(GQueue * queue, gpointer data);
void (g_queue_push_tail)(GQueue * queue, gpointer data);
void (g_queue_push_nth)(GQueue * queue, gpointer data, gint n);
gpointer (g_queue_pop_head)(GQueue * queue);
gpointer (g_queue_pop_tail)(GQueue * queue);
gpointer (g_queue_pop_nth)(GQueue * queue, guint n);
gpointer (g_queue_peek_head)(GQueue * queue);
gpointer (g_queue_peek_tail)(GQueue * queue);
gpointer (g_queue_peek_nth)(GQueue * queue, guint n);
gint (g_queue_index)(GQueue * queue, gconstpointer data);
gboolean (g_queue_remove)(GQueue * queue, gconstpointer data);
guint (g_queue_remove_all)(GQueue * queue, gconstpointer data);
void (g_queue_insert_before)(GQueue * queue, GList * sibling, gpointer data);
void (g_queue_insert_before_link)(GQueue * queue, GList * sibling, GList * link_);
void (g_queue_insert_after)(GQueue * queue, GList * sibling, gpointer data);
void (g_queue_insert_after_link)(GQueue * queue, GList * sibling, GList * link_);
void (g_queue_insert_sorted)(GQueue * queue, gpointer data, GCompareDataFunc func, gpointer user_data);
void (g_queue_push_head_link)(GQueue * queue, GList * link_);
void (g_queue_push_tail_link)(GQueue * queue, GList * link_);
void (g_queue_push_nth_link)(GQueue * queue, gint n, GList * link_);
GList * (g_queue_pop_head_link)(GQueue * queue);
GList * (g_queue_pop_tail_link)(GQueue * queue);
GList * (g_queue_pop_nth_link)(GQueue * queue, guint n);
GList * (g_queue_peek_head_link)(GQueue * queue);
GList * (g_queue_peek_tail_link)(GQueue * queue);
GList * (g_queue_peek_nth_link)(GQueue * queue, guint n);
gint (g_queue_link_index)(GQueue * queue, GList * link_);
void (g_queue_unlink)(GQueue * queue, GList * link_);
void (g_queue_delete_link)(GQueue * queue, GList * link_);
GRand * (g_rand_new_with_seed)(guint32 seed);
GRand * (g_rand_new_with_seed_array)(const guint32 * seed, guint seed_length);
GRand * (g_rand_new)(void);
void (g_rand_free)(GRand * rand_);
GRand * (g_rand_copy)(GRand * rand_);
void (g_rand_set_seed)(GRand * rand_, guint32 seed);
void (g_rand_set_seed_array)(GRand * rand_, const guint32 * seed, guint seed_length);
guint32 (g_rand_int)(GRand * rand_);
gint32 (g_rand_int_range)(GRand * rand_, gint32 begin, gint32 end);
gdouble (g_rand_double)(GRand * rand_);
gdouble (g_rand_double_range)(GRand * rand_, gdouble begin, gdouble end);
void (g_random_set_seed)(guint32 seed);
guint32 (g_random_int)(void);
gint32 (g_random_int_range)(gint32 begin, gint32 end);
gdouble (g_random_double)(void);
gdouble (g_random_double_range)(gdouble begin, gdouble end);
gpointer (g_rc_box_alloc)(gsize block_size);
gpointer (g_rc_box_alloc0)(gsize block_size);
gpointer (g_rc_box_dup)(gsize block_size, gconstpointer mem_block);
gpointer (g_rc_box_acquire)(gpointer mem_block);
void (g_rc_box_release)(gpointer mem_block);
void (g_rc_box_release_full)(gpointer mem_block, GDestroyNotify clear_func);
gsize (g_rc_box_get_size)(gpointer mem_block);
gpointer (g_atomic_rc_box_alloc)(gsize block_size);
gpointer (g_atomic_rc_box_alloc0)(gsize block_size);
gpointer (g_atomic_rc_box_dup)(gsize block_size, gconstpointer mem_block);
gpointer (g_atomic_rc_box_acquire)(gpointer mem_block);
void (g_atomic_rc_box_release)(gpointer mem_block);
void (g_atomic_rc_box_release_full)(gpointer mem_block, GDestroyNotify clear_func);
gsize (g_atomic_rc_box_get_size)(gpointer mem_block);
void (g_ref_count_init)(grefcount * rc);
void (g_ref_count_inc)(grefcount * rc);
gboolean (g_ref_count_dec)(grefcount * rc);
gboolean (g_ref_count_compare)(grefcount * rc, gint val);
void (g_atomic_ref_count_init)(gatomicrefcount * arc);
void (g_atomic_ref_count_inc)(gatomicrefcount * arc);
gboolean (g_atomic_ref_count_dec)(gatomicrefcount * arc);
gboolean (g_atomic_ref_count_compare)(gatomicrefcount * arc, gint val);
char * (g_ref_string_new)(const char * str);
char * (g_ref_string_new_len)(const char * str, gssize len);
char * (g_ref_string_new_intern)(const char * str);
char * (g_ref_string_acquire)(char * str);
void (g_ref_string_release)(char * str);
gsize (g_ref_string_length)(char * str);
GQuark (g_regex_error_quark)(void);
GRegex * (g_regex_new)(const gchar * pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, GError * * error);
GRegex * (g_regex_ref)(GRegex * regex);
void (g_regex_unref)(GRegex * regex);
const gchar * (g_regex_get_pattern)(const GRegex * regex);
gint (g_regex_get_max_backref)(const GRegex * regex);
gint (g_regex_get_capture_count)(const GRegex * regex);
gboolean (g_regex_get_has_cr_or_lf)(const GRegex * regex);
gint (g_regex_get_max_lookbehind)(const GRegex * regex);
gint (g_regex_get_string_number)(const GRegex * regex, const gchar * name);
gchar * (g_regex_escape_string)(const gchar * string, gint length);
gchar * (g_regex_escape_nul)(const gchar * string, gint length);
GRegexCompileFlags (g_regex_get_compile_flags)(const GRegex * regex);
GRegexMatchFlags (g_regex_get_match_flags)(const GRegex * regex);
gboolean (g_regex_match_simple)(const gchar * pattern, const gchar * string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);
gboolean (g_regex_match)(const GRegex * regex, const gchar * string, GRegexMatchFlags match_options, GMatchInfo * * match_info);
gboolean (g_regex_match_full)(const GRegex * regex, const gchar * string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo * * match_info, GError * * error);
gboolean (g_regex_match_all)(const GRegex * regex, const gchar * string, GRegexMatchFlags match_options, GMatchInfo * * match_info);
gboolean (g_regex_match_all_full)(const GRegex * regex, const gchar * string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo * * match_info, GError * * error);
gchar * * (g_regex_split_simple)(const gchar * pattern, const gchar * string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);
gchar * * (g_regex_split)(const GRegex * regex, const gchar * string, GRegexMatchFlags match_options);
gchar * * (g_regex_split_full)(const GRegex * regex, const gchar * string, gssize string_len, gint start_position, GRegexMatchFlags match_options, gint max_tokens, GError * * error);
gchar * (g_regex_replace)(const GRegex * regex, const gchar * string, gssize string_len, gint start_position, const gchar * replacement, GRegexMatchFlags match_options, GError * * error);
gchar * (g_regex_replace_literal)(const GRegex * regex, const gchar * string, gssize string_len, gint start_position, const gchar * replacement, GRegexMatchFlags match_options, GError * * error);
gchar * (g_regex_replace_eval)(const GRegex * regex, const gchar * string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError * * error);
gboolean (g_regex_check_replacement)(const gchar * replacement, gboolean * has_references, GError * * error);
GRegex * (g_match_info_get_regex)(const GMatchInfo * match_info);
const gchar * (g_match_info_get_string)(const GMatchInfo * match_info);
GMatchInfo * (g_match_info_ref)(GMatchInfo * match_info);
void (g_match_info_unref)(GMatchInfo * match_info);
void (g_match_info_free)(GMatchInfo * match_info);
gboolean (g_match_info_next)(GMatchInfo * match_info, GError * * error);
gboolean (g_match_info_matches)(const GMatchInfo * match_info);
gint (g_match_info_get_match_count)(const GMatchInfo * match_info);
gboolean (g_match_info_is_partial_match)(const GMatchInfo * match_info);
gchar * (g_match_info_expand_references)(const GMatchInfo * match_info, const gchar * string_to_expand, GError * * error);
gchar * (g_match_info_fetch)(const GMatchInfo * match_info, gint match_num);
gboolean (g_match_info_fetch_pos)(const GMatchInfo * match_info, gint match_num, gint * start_pos, gint * end_pos);
gchar * (g_match_info_fetch_named)(const GMatchInfo * match_info, const gchar * name);
gboolean (g_match_info_fetch_named_pos)(const GMatchInfo * match_info, const gchar * name, gint * start_pos, gint * end_pos);
gchar * * (g_match_info_fetch_all)(const GMatchInfo * match_info);
GScanner * (g_scanner_new)(const GScannerConfig * config_templ);
void (g_scanner_destroy)(GScanner * scanner);
void (g_scanner_input_file)(GScanner * scanner, gint input_fd);
void (g_scanner_sync_file_offset)(GScanner * scanner);
void (g_scanner_input_text)(GScanner * scanner, const gchar * text, guint text_len);
GTokenType (g_scanner_get_next_token)(GScanner * scanner);
GTokenType (g_scanner_peek_next_token)(GScanner * scanner);
GTokenType (g_scanner_cur_token)(GScanner * scanner);
GTokenValue (g_scanner_cur_value)(GScanner * scanner);
guint (g_scanner_cur_line)(GScanner * scanner);
guint (g_scanner_cur_position)(GScanner * scanner);
gboolean (g_scanner_eof)(GScanner * scanner);
guint (g_scanner_set_scope)(GScanner * scanner, guint scope_id);
void (g_scanner_scope_add_symbol)(GScanner * scanner, guint scope_id, const gchar * symbol, gpointer value);
void (g_scanner_scope_remove_symbol)(GScanner * scanner, guint scope_id, const gchar * symbol);
gpointer (g_scanner_scope_lookup_symbol)(GScanner * scanner, guint scope_id, const gchar * symbol);
void (g_scanner_scope_foreach_symbol)(GScanner * scanner, guint scope_id, GHFunc func, gpointer user_data);
gpointer (g_scanner_lookup_symbol)(GScanner * scanner, const gchar * symbol);
void (g_scanner_unexp_token)(GScanner * scanner, GTokenType expected_token, const gchar * identifier_spec, const gchar * symbol_spec, const gchar * symbol_name, const gchar * message, gint is_error);
GSequence * (g_sequence_new)(GDestroyNotify data_destroy);
void (g_sequence_free)(GSequence * seq);
gint (g_sequence_get_length)(GSequence * seq);
void (g_sequence_foreach)(GSequence * seq, GFunc func, gpointer user_data);
void (g_sequence_foreach_range)(GSequenceIter * begin, GSequenceIter * end, GFunc func, gpointer user_data);
void (g_sequence_sort)(GSequence * seq, GCompareDataFunc cmp_func, gpointer cmp_data);
void (g_sequence_sort_iter)(GSequence * seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data);
gboolean (g_sequence_is_empty)(GSequence * seq);
GSequenceIter * (g_sequence_get_begin_iter)(GSequence * seq);
GSequenceIter * (g_sequence_get_end_iter)(GSequence * seq);
GSequenceIter * (g_sequence_get_iter_at_pos)(GSequence * seq, gint pos);
GSequenceIter * (g_sequence_append)(GSequence * seq, gpointer data);
GSequenceIter * (g_sequence_prepend)(GSequence * seq, gpointer data);
GSequenceIter * (g_sequence_insert_before)(GSequenceIter * iter, gpointer data);
void (g_sequence_move)(GSequenceIter * src, GSequenceIter * dest);
void (g_sequence_swap)(GSequenceIter * a, GSequenceIter * b);
GSequenceIter * (g_sequence_insert_sorted)(GSequence * seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);
GSequenceIter * (g_sequence_insert_sorted_iter)(GSequence * seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
void (g_sequence_sort_changed)(GSequenceIter * iter, GCompareDataFunc cmp_func, gpointer cmp_data);
void (g_sequence_sort_changed_iter)(GSequenceIter * iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
void (g_sequence_remove)(GSequenceIter * iter);
void (g_sequence_remove_range)(GSequenceIter * begin, GSequenceIter * end);
void (g_sequence_move_range)(GSequenceIter * dest, GSequenceIter * begin, GSequenceIter * end);
GSequenceIter * (g_sequence_search)(GSequence * seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);
GSequenceIter * (g_sequence_search_iter)(GSequence * seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
GSequenceIter * (g_sequence_lookup)(GSequence * seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);
GSequenceIter * (g_sequence_lookup_iter)(GSequence * seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
gpointer (g_sequence_get)(GSequenceIter * iter);
void (g_sequence_set)(GSequenceIter * iter, gpointer data);
gboolean (g_sequence_iter_is_begin)(GSequenceIter * iter);
gboolean (g_sequence_iter_is_end)(GSequenceIter * iter);
GSequenceIter * (g_sequence_iter_next)(GSequenceIter * iter);
GSequenceIter * (g_sequence_iter_prev)(GSequenceIter * iter);
gint (g_sequence_iter_get_position)(GSequenceIter * iter);
GSequenceIter * (g_sequence_iter_move)(GSequenceIter * iter, gint delta);
GSequence * (g_sequence_iter_get_sequence)(GSequenceIter * iter);
gint (g_sequence_iter_compare)(GSequenceIter * a, GSequenceIter * b);
GSequenceIter * (g_sequence_range_get_midpoint)(GSequenceIter * begin, GSequenceIter * end);
GQuark (g_shell_error_quark)(void);
gchar * (g_shell_quote)(const gchar * unquoted_string);
gchar * (g_shell_unquote)(const gchar * quoted_string, GError * * error);
gboolean (g_shell_parse_argv)(const gchar * command_line, gint * argcp, gchar * * * argvp, GError * * error);
gpointer (g_slice_alloc)(gsize block_size);
gpointer (g_slice_alloc0)(gsize block_size);
gpointer (g_slice_copy)(gsize block_size, gconstpointer mem_block);
void (g_slice_free1)(gsize block_size, gpointer mem_block);
void (g_slice_free_chain_with_offset)(gsize block_size, gpointer mem_chain, gsize next_offset);
void (g_slice_set_config)(GSliceConfig ckey, gint64 value);
gint64 (g_slice_get_config)(GSliceConfig ckey);
gint64 * (g_slice_get_config_state)(GSliceConfig ckey, gint64 address, guint * n_values);
GQuark (g_spawn_error_quark)(void);
GQuark (g_spawn_exit_error_quark)(void);
gboolean (g_spawn_async)(const gchar * working_directory, gchar * * argv, gchar * * envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid * child_pid, GError * * error);
gboolean (g_spawn_async_with_pipes)(const gchar * working_directory, gchar * * argv, gchar * * envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid * child_pid, gint * standard_input, gint * standard_output, gint * standard_error, GError * * error);
gboolean (g_spawn_async_with_pipes_and_fds)(const gchar * working_directory, const gchar * const * argv, const gchar * const * envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gint stdin_fd, gint stdout_fd, gint stderr_fd, const gint * source_fds, const gint * target_fds, gsize n_fds, GPid * child_pid_out, gint * stdin_pipe_out, gint * stdout_pipe_out, gint * stderr_pipe_out, GError * * error);
gboolean (g_spawn_async_with_fds)(const gchar * working_directory, gchar * * argv, gchar * * envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid * child_pid, gint stdin_fd, gint stdout_fd, gint stderr_fd, GError * * error);
gboolean (g_spawn_sync)(const gchar * working_directory, gchar * * argv, gchar * * envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar * * standard_output, gchar * * standard_error, gint * wait_status, GError * * error);
gboolean (g_spawn_command_line_sync)(const gchar * command_line, gchar * * standard_output, gchar * * standard_error, gint * wait_status, GError * * error);
gboolean (g_spawn_command_line_async)(const gchar * command_line, GError * * error);
gboolean (g_spawn_check_wait_status)(gint wait_status, GError * * error);
gboolean (g_spawn_check_exit_status)(gint wait_status, GError * * error);
void (g_spawn_close_pid)(GPid pid);
GStringChunk * (g_string_chunk_new)(gsize size);
void (g_string_chunk_free)(GStringChunk * chunk);
void (g_string_chunk_clear)(GStringChunk * chunk);
gchar * (g_string_chunk_insert)(GStringChunk * chunk, const gchar * string);
gchar * (g_string_chunk_insert_len)(GStringChunk * chunk, const gchar * string, gssize len);
gchar * (g_string_chunk_insert_const)(GStringChunk * chunk, const gchar * string);
GStrvBuilder * (g_strv_builder_new)(void);
void (g_strv_builder_unref)(GStrvBuilder * builder);
GStrv (g_strv_builder_unref_to_strv)(GStrvBuilder * builder);
GStrvBuilder * (g_strv_builder_ref)(GStrvBuilder * builder);
void (g_strv_builder_add)(GStrvBuilder * builder, const char * value);
void (g_strv_builder_addv)(GStrvBuilder * builder, const char * * value);
void (g_strv_builder_take)(GStrvBuilder * builder, char * value);
GStrv (g_strv_builder_end)(GStrvBuilder * builder);
int (g_strcmp0)(const char * str1, const char * str2);
gboolean (g_test_subprocess)(void);
int (g_test_run)(void);
void (g_test_add_func)(const char * testpath, GTestFunc test_func);
void (g_test_add_data_func)(const char * testpath, gconstpointer test_data, GTestDataFunc test_func);
void (g_test_add_data_func_full)(const char * testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func);
const char * (g_test_get_path)(void);
void (g_test_fail)(void);
void (g_test_incomplete)(const gchar * msg);
void (g_test_skip)(const gchar * msg);
gboolean (g_test_failed)(void);
void (g_test_set_nonfatal_assertions)(void);
void (g_test_disable_crash_reporting)(void);
void (g_test_bug_base)(const char * uri_pattern);
void (g_test_bug)(const char * bug_uri_snippet);
void (g_test_summary)(const char * summary);
void (g_test_timer_start)(void);
double (g_test_timer_elapsed)(void);
double (g_test_timer_last)(void);
void (g_test_queue_free)(gpointer gfree_pointer);
void (g_test_queue_destroy)(GDestroyNotify destroy_func, gpointer destroy_data);
gboolean (g_test_trap_fork)(guint64 usec_timeout, GTestTrapFlags test_trap_flags);
void (g_test_trap_subprocess)(const char * test_path, guint64 usec_timeout, GTestSubprocessFlags test_flags);
void (g_test_trap_subprocess_with_envp)(const char * test_path, const char * const * envp, guint64 usec_timeout, GTestSubprocessFlags test_flags);
gboolean (g_test_trap_has_passed)(void);
gboolean (g_test_trap_reached_timeout)(void);
gint32 (g_test_rand_int)(void);
gint32 (g_test_rand_int_range)(gint32 begin, gint32 end);
double (g_test_rand_double)(void);
double (g_test_rand_double_range)(double range_start, double range_end);
GTestCase * (g_test_create_case)(const char * test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);
GTestSuite * (g_test_create_suite)(const char * suite_name);
GTestSuite * (g_test_get_root)(void);
void (g_test_suite_add)(GTestSuite * suite, GTestCase * test_case);
void (g_test_suite_add_suite)(GTestSuite * suite, GTestSuite * nestedsuite);
int (g_test_run_suite)(GTestSuite * suite);
void (g_test_case_free)(GTestCase * test_case);
void (g_test_suite_free)(GTestSuite * suite);
void (g_test_trap_assertions)(const char * domain, const char * file, int line, const char * func, guint64 assertion_flags, const char * pattern);
void (g_assertion_message)(const char * domain, const char * file, int line, const char * func, const char * message);
void (g_assertion_message_expr)(const char * domain, const char * file, int line, const char * func, const char * expr);
void (g_assertion_message_cmpstr)(const char * domain, const char * file, int line, const char * func, const char * expr, const char * arg1, const char * cmp, const char * arg2);
void (g_assertion_message_cmpstrv)(const char * domain, const char * file, int line, const char * func, const char * expr, const char * const * arg1, const char * const * arg2, gsize first_wrong_idx);
void (g_assertion_message_cmpint)(const char * domain, const char * file, int line, const char * func, const char * expr, guint64 arg1, const char * cmp, guint64 arg2, char numtype);
void (g_assertion_message_cmpnum)(const char * domain, const char * file, int line, const char * func, const char * expr, long double arg1, const char * cmp, long double arg2, char numtype);
void (g_assertion_message_error)(const char * domain, const char * file, int line, const char * func, const char * expr, const GError * error, GQuark error_domain, int error_code);
void (g_test_add_vtable)(const char * testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);
const char * (g_test_log_type_name)(GTestLogType log_type);
GTestLogBuffer * (g_test_log_buffer_new)(void);
void (g_test_log_buffer_free)(GTestLogBuffer * tbuffer);
void (g_test_log_buffer_push)(GTestLogBuffer * tbuffer, guint n_bytes, const guint8 * bytes);
GTestLogMsg * (g_test_log_buffer_pop)(GTestLogBuffer * tbuffer);
void (g_test_log_msg_free)(GTestLogMsg * tmsg);
void (g_test_log_set_fatal_handler)(GTestLogFatalFunc log_func, gpointer user_data);
void (g_test_expect_message)(const gchar * log_domain, GLogLevelFlags log_level, const gchar * pattern);
void (g_test_assert_expected_messages_internal)(const char * domain, const char * file, int line, const char * func);
const gchar * (g_test_get_dir)(GTestFileType file_type);
GThreadPool * (g_thread_pool_new)(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError * * error);
GThreadPool * (g_thread_pool_new_full)(GFunc func, gpointer user_data, GDestroyNotify item_free_func, gint max_threads, gboolean exclusive, GError * * error);
void (g_thread_pool_free)(GThreadPool * pool, gboolean immediate, gboolean wait_);
gboolean (g_thread_pool_push)(GThreadPool * pool, gpointer data, GError * * error);
guint (g_thread_pool_unprocessed)(GThreadPool * pool);
void (g_thread_pool_set_sort_function)(GThreadPool * pool, GCompareDataFunc func, gpointer user_data);
gboolean (g_thread_pool_move_to_front)(GThreadPool * pool, gpointer data);
gboolean (g_thread_pool_set_max_threads)(GThreadPool * pool, gint max_threads, GError * * error);
gint (g_thread_pool_get_max_threads)(GThreadPool * pool);
guint (g_thread_pool_get_num_threads)(GThreadPool * pool);
void (g_thread_pool_set_max_unused_threads)(gint max_threads);
gint (g_thread_pool_get_max_unused_threads)(void);
guint (g_thread_pool_get_num_unused_threads)(void);
void (g_thread_pool_stop_unused_threads)(void);
void (g_thread_pool_set_max_idle_time)(guint interval);
guint (g_thread_pool_get_max_idle_time)(void);
GTimer * (g_timer_new)(void);
void (g_timer_destroy)(GTimer * timer);
void (g_timer_start)(GTimer * timer);
void (g_timer_stop)(GTimer * timer);
void (g_timer_reset)(GTimer * timer);
void (g_timer_continue)(GTimer * timer);
gdouble (g_timer_elapsed)(GTimer * timer, gulong * microseconds);
gboolean (g_timer_is_active)(GTimer * timer);
void (g_usleep)(gulong microseconds);
void (g_time_val_add)(GTimeVal * time_, glong microseconds);
gboolean (g_time_val_from_iso8601)(const gchar * iso_date, GTimeVal * time_);
gchar * (g_time_val_to_iso8601)(GTimeVal * time_);
void (g_trash_stack_push)(GTrashStack * * stack_p, gpointer data_p);
gpointer (g_trash_stack_pop)(GTrashStack * * stack_p);
gpointer (g_trash_stack_peek)(GTrashStack * * stack_p);
guint (g_trash_stack_height)(GTrashStack * * stack_p);
GTree * (g_tree_new)(GCompareFunc key_compare_func);
GTree * (g_tree_new_with_data)(GCompareDataFunc key_compare_func, gpointer key_compare_data);
GTree * (g_tree_new_full)(GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);
GTreeNode * (g_tree_node_first)(GTree * tree);
GTreeNode * (g_tree_node_last)(GTree * tree);
GTreeNode * (g_tree_node_previous)(GTreeNode * node);
GTreeNode * (g_tree_node_next)(GTreeNode * node);
GTree * (g_tree_ref)(GTree * tree);
void (g_tree_unref)(GTree * tree);
void (g_tree_destroy)(GTree * tree);
GTreeNode * (g_tree_insert_node)(GTree * tree, gpointer key, gpointer value);
void (g_tree_insert)(GTree * tree, gpointer key, gpointer value);
GTreeNode * (g_tree_replace_node)(GTree * tree, gpointer key, gpointer value);
void (g_tree_replace)(GTree * tree, gpointer key, gpointer value);
gboolean (g_tree_remove)(GTree * tree, gconstpointer key);
void (g_tree_remove_all)(GTree * tree);
gboolean (g_tree_steal)(GTree * tree, gconstpointer key);
gpointer (g_tree_node_key)(GTreeNode * node);
gpointer (g_tree_node_value)(GTreeNode * node);
GTreeNode * (g_tree_lookup_node)(GTree * tree, gconstpointer key);
gpointer (g_tree_lookup)(GTree * tree, gconstpointer key);
gboolean (g_tree_lookup_extended)(GTree * tree, gconstpointer lookup_key, gpointer * orig_key, gpointer * value);
void (g_tree_foreach)(GTree * tree, GTraverseFunc func, gpointer user_data);
void (g_tree_foreach_node)(GTree * tree, GTraverseNodeFunc func, gpointer user_data);
void (g_tree_traverse)(GTree * tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data);
GTreeNode * (g_tree_search_node)(GTree * tree, GCompareFunc search_func, gconstpointer user_data);
gpointer (g_tree_search)(GTree * tree, GCompareFunc search_func, gconstpointer user_data);
GTreeNode * (g_tree_lower_bound)(GTree * tree, gconstpointer key);
GTreeNode * (g_tree_upper_bound)(GTree * tree, gconstpointer key);
gint (g_tree_height)(GTree * tree);
gint (g_tree_nnodes)(GTree * tree);
GUri * (g_uri_ref)(GUri * uri);
void (g_uri_unref)(GUri * uri);
gboolean (g_uri_split)(const gchar * uri_ref, GUriFlags flags, gchar * * scheme, gchar * * userinfo, gchar * * host, gint * port, gchar * * path, gchar * * query, gchar * * fragment, GError * * error);
gboolean (g_uri_split_with_user)(const gchar * uri_ref, GUriFlags flags, gchar * * scheme, gchar * * user, gchar * * password, gchar * * auth_params, gchar * * host, gint * port, gchar * * path, gchar * * query, gchar * * fragment, GError * * error);
gboolean (g_uri_split_network)(const gchar * uri_string, GUriFlags flags, gchar * * scheme, gchar * * host, gint * port, GError * * error);
gboolean (g_uri_is_valid)(const gchar * uri_string, GUriFlags flags, GError * * error);
gchar * (g_uri_join)(GUriFlags flags, const gchar * scheme, const gchar * userinfo, const gchar * host, gint port, const gchar * path, const gchar * query, const gchar * fragment);
gchar * (g_uri_join_with_user)(GUriFlags flags, const gchar * scheme, const gchar * user, const gchar * password, const gchar * auth_params, const gchar * host, gint port, const gchar * path, const gchar * query, const gchar * fragment);
GUri * (g_uri_parse)(const gchar * uri_string, GUriFlags flags, GError * * error);
GUri * (g_uri_parse_relative)(GUri * base_uri, const gchar * uri_ref, GUriFlags flags, GError * * error);
gchar * (g_uri_resolve_relative)(const gchar * base_uri_string, const gchar * uri_ref, GUriFlags flags, GError * * error);
GUri * (g_uri_build)(GUriFlags flags, const gchar * scheme, const gchar * userinfo, const gchar * host, gint port, const gchar * path, const gchar * query, const gchar * fragment);
GUri * (g_uri_build_with_user)(GUriFlags flags, const gchar * scheme, const gchar * user, const gchar * password, const gchar * auth_params, const gchar * host, gint port, const gchar * path, const gchar * query, const gchar * fragment);
char * (g_uri_to_string)(GUri * uri);
char * (g_uri_to_string_partial)(GUri * uri, GUriHideFlags flags);
const gchar * (g_uri_get_scheme)(GUri * uri);
const gchar * (g_uri_get_userinfo)(GUri * uri);
const gchar * (g_uri_get_user)(GUri * uri);
const gchar * (g_uri_get_password)(GUri * uri);
const gchar * (g_uri_get_auth_params)(GUri * uri);
const gchar * (g_uri_get_host)(GUri * uri);
gint (g_uri_get_port)(GUri * uri);
const gchar * (g_uri_get_path)(GUri * uri);
const gchar * (g_uri_get_query)(GUri * uri);
const gchar * (g_uri_get_fragment)(GUri * uri);
GUriFlags (g_uri_get_flags)(GUri * uri);
GHashTable * (g_uri_parse_params)(const gchar * params, gssize length, const gchar * separators, GUriParamsFlags flags, GError * * error);
void (g_uri_params_iter_init)(GUriParamsIter * iter, const gchar * params, gssize length, const gchar * separators, GUriParamsFlags flags);
gboolean (g_uri_params_iter_next)(GUriParamsIter * iter, gchar * * attribute, gchar * * value, GError * * error);
GQuark (g_uri_error_quark)(void);
char * (g_uri_unescape_string)(const char * escaped_string, const char * illegal_characters);
char * (g_uri_unescape_segment)(const char * escaped_string, const char * escaped_string_end, const char * illegal_characters);
char * (g_uri_parse_scheme)(const char * uri);
const char * (g_uri_peek_scheme)(const char * uri);
char * (g_uri_escape_string)(const char * unescaped, const char * reserved_chars_allowed, gboolean allow_utf8);
GBytes * (g_uri_unescape_bytes)(const char * escaped_string, gssize length, const char * illegal_characters, GError * * error);
char * (g_uri_escape_bytes)(const guint8 * unescaped, gsize length, const char * reserved_chars_allowed);
gboolean (g_uuid_string_is_valid)(const gchar * str);
gchar * (g_uuid_string_random)(void);
const gchar * (glib_check_version)(guint required_major, guint required_minor, guint required_micro);
GMemChunk * (g_mem_chunk_new)(const gchar * name, gint atom_size, gsize area_size, gint type);
void (g_mem_chunk_destroy)(GMemChunk * mem_chunk);
gpointer (g_mem_chunk_alloc)(GMemChunk * mem_chunk);
gpointer (g_mem_chunk_alloc0)(GMemChunk * mem_chunk);
void (g_mem_chunk_free)(GMemChunk * mem_chunk, gpointer mem);
void (g_mem_chunk_clean)(GMemChunk * mem_chunk);
void (g_mem_chunk_reset)(GMemChunk * mem_chunk);
void (g_mem_chunk_print)(GMemChunk * mem_chunk);
void (g_mem_chunk_info)(void);
void (g_blow_chunks)(void);
GAllocator * (g_allocator_new)(const gchar * name, guint n_preallocs);
void (g_allocator_free)(GAllocator * allocator);
void (g_list_push_allocator)(GAllocator * allocator);
void (g_list_pop_allocator)(void);
void (g_slist_push_allocator)(GAllocator * allocator);
void (g_slist_pop_allocator)(void);
void (g_node_push_allocator)(GAllocator * allocator);
void (g_node_pop_allocator)(void);
GCache * (g_cache_new)(GCacheNewFunc value_new_func, GCacheDestroyFunc value_destroy_func, GCacheDupFunc key_dup_func, GCacheDestroyFunc key_destroy_func, GHashFunc hash_key_func, GHashFunc hash_value_func, GEqualFunc key_equal_func);
void (g_cache_destroy)(GCache * cache);
gpointer (g_cache_insert)(GCache * cache, gpointer key);
void (g_cache_remove)(GCache * cache, gconstpointer value);
void (g_cache_key_foreach)(GCache * cache, GHFunc func, gpointer user_data);
void (g_cache_value_foreach)(GCache * cache, GHFunc func, gpointer user_data);
GCompletion * (g_completion_new)(GCompletionFunc func);
void (g_completion_add_items)(GCompletion * cmp, GList * items);
void (g_completion_remove_items)(GCompletion * cmp, GList * items);
void (g_completion_clear_items)(GCompletion * cmp);
GList * (g_completion_complete)(GCompletion * cmp, const gchar * prefix, gchar * * new_prefix);
GList * (g_completion_complete_utf8)(GCompletion * cmp, const gchar * prefix, gchar * * new_prefix);
void (g_completion_set_compare)(GCompletion * cmp, GCompletionStrncmpFunc strncmp_func);
void (g_completion_free)(GCompletion * cmp);
GRelation * (g_relation_new)(gint fields);
void (g_relation_destroy)(GRelation * relation);
void (g_relation_index)(GRelation * relation, gint field, GHashFunc hash_func, GEqualFunc key_equal_func);
gint (g_relation_delete)(GRelation * relation, gconstpointer key, gint field);
GTuples * (g_relation_select)(GRelation * relation, gconstpointer key, gint field);
gint (g_relation_count)(GRelation * relation, gconstpointer key, gint field);
void (g_relation_print)(GRelation * relation);
void (g_tuples_destroy)(GTuples * tuples);
gpointer (g_tuples_index)(GTuples * tuples, gint index_, gint field);
GThread * (g_thread_create)(GThreadFunc func, gpointer data, gboolean joinable, GError * * error);
GThread * (g_thread_create_full)(GThreadFunc func, gpointer data, gulong stack_size, gboolean joinable, gboolean bound, GThreadPriority priority, GError * * error);
void (g_thread_set_priority)(GThread * thread, GThreadPriority priority);
void (g_thread_foreach)(GFunc thread_func, gpointer user_data);
void (g_static_mutex_init)(GStaticMutex * mutex);
void (g_static_mutex_free)(GStaticMutex * mutex);
GMutex * (g_static_mutex_get_mutex_impl)(GStaticMutex * mutex);
void (g_static_rec_mutex_init)(GStaticRecMutex * mutex);
void (g_static_rec_mutex_lock)(GStaticRecMutex * mutex);
gboolean (g_static_rec_mutex_trylock)(GStaticRecMutex * mutex);
void (g_static_rec_mutex_unlock)(GStaticRecMutex * mutex);
void (g_static_rec_mutex_lock_full)(GStaticRecMutex * mutex, guint depth);
guint (g_static_rec_mutex_unlock_full)(GStaticRecMutex * mutex);
void (g_static_rec_mutex_free)(GStaticRecMutex * mutex);
void (g_static_rw_lock_init)(GStaticRWLock * lock);
void (g_static_rw_lock_reader_lock)(GStaticRWLock * lock);
gboolean (g_static_rw_lock_reader_trylock)(GStaticRWLock * lock);
void (g_static_rw_lock_reader_unlock)(GStaticRWLock * lock);
void (g_static_rw_lock_writer_lock)(GStaticRWLock * lock);
gboolean (g_static_rw_lock_writer_trylock)(GStaticRWLock * lock);
void (g_static_rw_lock_writer_unlock)(GStaticRWLock * lock);
void (g_static_rw_lock_free)(GStaticRWLock * lock);
GPrivate * (g_private_new)(GDestroyNotify notify);
void (g_static_private_init)(GStaticPrivate * private_key);
gpointer (g_static_private_get)(GStaticPrivate * private_key);
void (g_static_private_set)(GStaticPrivate * private_key, gpointer data, GDestroyNotify notify);
void (g_static_private_free)(GStaticPrivate * private_key);
gboolean (g_once_init_enter_impl)(volatile gsize * location);
void (g_thread_init)(gpointer vtable);
void (g_thread_init_with_errorcheck_mutexes)(gpointer vtable);
gboolean (g_thread_get_initialized)(void);
GMutex * (g_mutex_new)(void);
void (g_mutex_free)(GMutex * mutex);
GCond * (g_cond_new)(void);
void (g_cond_free)(GCond * cond);
gboolean (g_cond_timed_wait)(GCond * cond, GMutex * mutex, GTimeVal * abs_time);
gint (g_printf)(const gchar * format, ...);
gint (g_fprintf)(FILE * file, const gchar * format, ...);
gint (g_sprintf)(gchar * string, const gchar * format, ...);
gint (g_vprintf)(const gchar * format, va_list args);
gint (g_vfprintf)(FILE * file, const gchar * format, va_list args);
gint (g_vsprintf)(gchar * string, const gchar * format, va_list args);
gint (g_vasprintf)(gchar * * string, const gchar * format, va_list args);
int (g_access)(const gchar * filename, int mode);
int (g_chdir)(const gchar * path);
int (g_unlink)(const gchar * filename);
int (g_rmdir)(const gchar * filename);
gboolean (g_close)(gint fd, GError * * error);
GQuark (g_unix_error_quark)(void);
gboolean (g_unix_open_pipe)(gint * fds, gint flags, GError * * error);
gboolean (g_unix_set_fd_nonblocking)(gint fd, gboolean nonblock, GError * * error);
GSource * (g_unix_signal_source_new)(gint signum);
guint (g_unix_signal_add_full)(gint priority, gint signum, GSourceFunc handler, gpointer user_data, GDestroyNotify notify);
guint (g_unix_signal_add)(gint signum, GSourceFunc handler, gpointer user_data);
GSource * (g_unix_fd_source_new)(gint fd, GIOCondition condition);
guint (g_unix_fd_add_full)(gint priority, gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data, GDestroyNotify notify);
guint (g_unix_fd_add)(gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data);
struct passwd * (g_unix_get_passwd_entry)(const gchar * user_name, GError * * error);
int (g_closefrom)(int lowfd);
int (g_fdwalk_set_cloexec)(int lowfd);